'use strict';

var React     = require('react')
var normalize = require('react-style-normalizer')
var assign    = require('object-assign')
var cloneWithProps = require('react-clonewithprops')

var Toolbar = React.createClass({

	displayName: 'ReactToolbar',

	getDefaultProps: function() {
		return {
			defaultStyle: {
				display: 'flex'
			},

			defaultHorizontalStyle: {
				flexFlow: 'row',
				alignItems: 'center',
				alignContent: 'stretch'
			},

			defaultVerticalStyle: {
				flexFlow: 'column',
				alignItems: 'stretch',
				alignContent: 'center'
			}
		}
	},

	render: function(){

		var state = this.state
		var props = this.prepareProps(this.props, state)

		return React.createElement("div", React.__spread({},  props))
	},

	prepareProps: function(thisProps, state) {
		var props = assign({}, thisProps)

		props.vertical = props.orientation == 'vertical'
		props.style = this.prepareStyle(props, state)
		props.children = this.prepareChildren(props, state)

		return props
	},

	prepareStyle: function(props, state) {

		var defaultOrientationStyle = props.defaultHorizontalStyle
		var orientationStyle = props.horizontalStyle

		if (props.vertical){
			defaultOrientationStyle = props.defaultVerticalStyle
			orientationStyle = props.verticalStyle
		}

		var style = assign({}, props.defaultStyle, defaultOrientationStyle, props.style, orientationStyle)

		return normalize(style)
	},

	prepareChildren: function(props) {

		var regionCount = 0

		React.Children.forEach(props.children, function(child){
			if (child && child.props.isToolbarRegion){
				regionCount++
			}
		})

		var regionIndex = -1

		return React.Children.map(props.children, function(child){
			if (child && child.props.isToolbarRegion){
				regionIndex++

				var childProps = child.props

				var first     = regionIndex === 0
				var last      = regionIndex === regionCount - 1
				var inBetween = !first && !last
				var flex      = inBetween || regionCount < 3

				var newProps = {
					first      : first,
					last       : last,
					inBetween  : inBetween,
					flex       : childProps.flex? childProps.flex: flex,
					orientation: props.orientation,
					align      : childProps.align || 'center'
				}

				if (!childProps.align && regionCount > 1){
					if (first){
						newProps.align = 'start'
					} else if (last){
						newProps.align = 'end'
					}
				}

				child = cloneWithProps(child, newProps)
			}

			return child
		})
	}
})

Toolbar.Region = React.createClass({

	displayName: 'ReactToolbarRegion',

	getDefaultProps: function(){
		return {
			isToolbarRegion: true,

			defaultStyle: {
				display  : 'inline-block',
				alignSelf: 'center'
			},

			defaultVerticalStyle: {
				display : 'flex',
				flexFlow: 'column'
			}
		}
	},

	render: function(){
		var props = this.prepareProps(this.props)

		return React.createElement("div", React.__spread({},  props))
	},

	prepareProps: function(thisProps) {
		var props = assign({}, thisProps)

		props.vertical = props.orientation == 'vertical'
		props.style    = this.prepareStyle(props)

		return props
	},

	prepareStyle: function(props) {
		var alignStyle = {}
		var defaultStyle

		if (props.flex){
			defaultStyle = { flex: props.flex === true? 1: props.flex }
		}

		if (props.vertical){
			alignStyle.justifyContent = props.align == 'start'?
											'flex-start':
											props.align == 'end'?
												'flex-end':
												'center'
		} else {
			alignStyle.textAlign = props.align == 'start'?
											'left':
											props.align == 'end'?
												'right':
												'center'
		}

		var defaultOrientationStyle = props.defaultHorizontalStyle
		var orientationStyle = props.horizontalStyle

		if (props.vertical){
			defaultOrientationStyle = props.defaultVerticalStyle
			orientationStyle = props.verticalStyle
		}

		var style = assign({}, props.defaultStyle, defaultStyle, defaultOrientationStyle, props.style, orientationStyle, alignStyle)

		return normalize(style)
	},
})

module.exports = Toolbar