{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nclass CheckboxIOS extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      status,\n      disabled,\n      onPress,\n      theme\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n    return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: onPress,\n      disabled: disabled,\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: \"button\",\n      accessibilityRole: \"button\",\n      accessibilityState: {\n        disabled\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container\n    }), /*#__PURE__*/React.createElement(View, {\n      style: {\n        opacity: indeterminate || checked ? 1 : 0\n      }\n    }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: icon,\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  }\n\n}\n\n_defineProperty(CheckboxIOS, \"displayName\", 'Checkbox.IOS');\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(CheckboxIOS); // @component-docs ignore-next-line\n\nexport { CheckboxIOS };","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","React","render","theme","rest","checked","status","indeterminate","checkedColor","disabled","rippleColor","color","icon","styles","container","opacity","borderRadius","padding","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkedColor}\n            direction=\"ltr\"\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}