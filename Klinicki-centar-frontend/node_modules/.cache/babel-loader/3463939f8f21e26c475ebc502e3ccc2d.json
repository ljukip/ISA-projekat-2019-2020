{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, View, SafeAreaView } from 'react-native';\nimport overlay from '../../styles/overlay';\nimport Appbar, { DEFAULT_APPBAR_HEIGHT } from './Appbar';\nimport shadow from '../../styles/shadow';\nimport { withTheme } from '../../core/theming';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.android.png\" />\n *     <figcaption>Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.ios.png\" />\n *     <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const _goBack = () => console.log('Went back');\n *\n *   const _handleSearch = () => console.log('Searching');\n *\n *   const _handleMore = () => console.log('Shown more');\n *\n *   return (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={_goBack} />\n *       <Appbar.Content title=\"Title\" subtitle=\"Subtitle\" />\n *       <Appbar.Action icon=\"magnify\" onPress={_handleSearch} />\n *       <Appbar.Action icon=\"dots-vertical\" onPress={_handleMore} />\n *     </Appbar.Header>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nclass AppbarHeader extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      // Don't use default props since we check it to know whether we should use SafeAreaView\n      statusBarHeight = APPROX_STATUSBAR_HEIGHT,\n      style,\n      dark\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"statusBarHeight\", \"style\", \"dark\"]);\n\n    const {\n      dark: isDarkTheme,\n      colors,\n      mode\n    } = rest.theme;\n\n    const _ref = StyleSheet.flatten(style) || {},\n          {\n      height = DEFAULT_APPBAR_HEIGHT,\n      elevation = 4,\n      backgroundColor: customBackground,\n      zIndex = 0\n    } = _ref,\n          restStyle = _objectWithoutProperties(_ref, [\"height\", \"elevation\", \"backgroundColor\", \"zIndex\"]);\n\n    const backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary; // Let the user override the behaviour\n\n    const Wrapper = typeof this.props.statusBarHeight === 'number' ? View : SafeAreaView;\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      style: [{\n        backgroundColor,\n        zIndex,\n        elevation\n      }, shadow(elevation)]\n    }, /*#__PURE__*/React.createElement(Appbar //@ts-ignore\n    , _extends({\n      style: [//@ts-ignore\n      {\n        height,\n        backgroundColor,\n        marginTop: statusBarHeight\n      }, styles.appbar, restStyle],\n      dark: dark\n    }, rest)));\n  }\n\n}\n\n_defineProperty(AppbarHeader, \"displayName\", 'Appbar.Header');\n\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0\n  }\n});\nexport default withTheme(AppbarHeader); // @component-docs ignore-next-line\n\nexport { AppbarHeader };","map":{"version":3,"sources":["AppbarHeader.tsx"],"names":["AppbarHeader","React","render","statusBarHeight","dark","rest","mode","height","elevation","backgroundColor","zIndex","restStyle","StyleSheet","customBackground","isDarkTheme","overlay","colors","Wrapper","shadow","marginTop","styles","appbar","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,IAAA,EAAA,YAAA,QAAA,cAAA;AAOA,OAAA,OAAA,MAAA,sBAAA;AACA,OAAA,MAAA,IAAA,qBAAA,QAAA,UAAA;AACA,OAAA,MAAA,MAAA,qBAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AACA,SAAA,uBAAA,QAAA,iBAAA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,MAAA,YAAA,SAA2BC,KAAK,CAAhC,SAAA,CAAkD;AAGhDC,EAAAA,MAAM,GAAG;AACP,UAAA,WAAA,GAMI,KANJ,KAAA;AAAA,UAAM;AACJ;AACAC,MAAAA,eAAe,GAFX,uBAAA;AAAA,MAAA,KAAA;AAIJC,MAAAA;AAJI,QAAN,WAAA;AAAA,UAKKC,IALL,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,iBAAA,EAAA,OAAA,EAAA,MAAA,CAAA,CAAA;;AAOA,UAAM;AAAED,MAAAA,IAAI,EAAN,WAAA;AAAA,MAAA,MAAA;AAA6BE,MAAAA;AAA7B,QAAsCD,IAAI,CAAhD,KAAA;;AACA,UAAA,IAAA,GAMeO,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KANf,EAAA;AAAA,UAAM;AACJL,MAAAA,MAAM,GADF,qBAAA;AAEJC,MAAAA,SAAS,GAFL,CAAA;AAGJC,MAAAA,eAAe,EAHX,gBAAA;AAIJC,MAAAA,MAAM,GAAG;AAJL,QAAN,IAAA;AAAA,UAKKC,SALL,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,QAAA,EAAA,WAAA,EAAA,iBAAA,EAAA,QAAA,CAAA,CAAA;;AAOA,UAAMF,eAAe,GAAGI,gBAAgB,GAAA,gBAAA,GAEpCC,WAAW,IAAIR,IAAI,KAAnBQ,UAAAA,GACAC,OAAO,CAAA,SAAA,EAAYC,MAAM,CADzBF,OACO,CADPA,GAEAE,MAAM,CApBH,OAgBP,CAhBO,CAqBP;;AACA,UAAMC,OAAO,GACX,OAAO,KAAA,KAAA,CAAP,eAAA,KAAA,QAAA,GAAA,IAAA,GADF,YAAA;AAGA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,MAAA,KAAK,EACH,CACE;AAAA,QAAA,eAAA;AAAA,QAAA,MAAA;AAA2BT,QAAAA;AAA3B,OADF,EAEEU,MAAM,CAFR,SAEQ,CAFR;AAFJ,KAAA,EAAA,aAQE,KAAA,CAAA,aAAA,CAAA,MAAA,CACE;AADF,MAAA,QAAA,CAAA;AAEE,MAAA,KAAK,EAAE,CACL;AACA;AAAA,QAAA,MAAA;AAAA,QAAA,eAAA;AAA2BC,QAAAA,SAAS,EAAEhB;AAAtC,OAFK,EAGLiB,MAAM,CAHD,MAAA,EAFT,SAES,CAFT;AAQE,MAAA,IAAI,EAAEhB;AARR,KAAA,EATJ,IASI,CAAA,CARF,CADF;AAsBD;;AAlD+C;;gBAA5CJ,Y,iBACiB,e;;AAoDvB,MAAMoB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,MAAM,EAAE;AACNb,IAAAA,SAAS,EAAE;AADL;AADuB,CAAlB,CAAf;AAMA,eAAec,SAAS,CAAxB,YAAwB,CAAxB,C,CAEA;;AACA,SAAA,YAAA","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  SafeAreaView,\n  ViewStyle,\n} from 'react-native';\nimport overlay from '../../styles/overlay';\nimport Appbar, { DEFAULT_APPBAR_HEIGHT } from './Appbar';\nimport shadow from '../../styles/shadow';\nimport { withTheme } from '../../core/theming';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\n\ntype Props = React.ComponentProps<typeof Appbar> & {\n  /**\n   * Whether the background color is a dark color. A dark header will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Extra padding to add at the top of header to account for translucent status bar.\n   * This is automatically handled on iOS >= 11 including iPhone X using `SafeAreaView`.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to disable the default behaviour, and customize the height.\n   */\n  statusBarHeight?: number;\n  /**\n   * Content of the header.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.android.png\" />\n *     <figcaption>Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.ios.png\" />\n *     <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const _goBack = () => console.log('Went back');\n *\n *   const _handleSearch = () => console.log('Searching');\n *\n *   const _handleMore = () => console.log('Shown more');\n *\n *   return (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={_goBack} />\n *       <Appbar.Content title=\"Title\" subtitle=\"Subtitle\" />\n *       <Appbar.Action icon=\"magnify\" onPress={_handleSearch} />\n *       <Appbar.Action icon=\"dots-vertical\" onPress={_handleMore} />\n *     </Appbar.Header>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass AppbarHeader extends React.Component<Props> {\n  static displayName = 'Appbar.Header';\n\n  render() {\n    const {\n      // Don't use default props since we check it to know whether we should use SafeAreaView\n      statusBarHeight = APPROX_STATUSBAR_HEIGHT,\n      style,\n      dark,\n      ...rest\n    } = this.props;\n    const { dark: isDarkTheme, colors, mode } = rest.theme;\n    const {\n      height = DEFAULT_APPBAR_HEIGHT,\n      elevation = 4,\n      backgroundColor: customBackground,\n      zIndex = 0,\n      ...restStyle\n    }: ViewStyle = StyleSheet.flatten(style) || {};\n    const backgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n    // Let the user override the behaviour\n    const Wrapper =\n      typeof this.props.statusBarHeight === 'number' ? View : SafeAreaView;\n\n    return (\n      <Wrapper\n        style={\n          [\n            { backgroundColor, zIndex, elevation },\n            shadow(elevation),\n          ] as StyleProp<ViewStyle>\n        }\n      >\n        <Appbar\n          //@ts-ignore\n          style={[\n            //@ts-ignore\n            { height, backgroundColor, marginTop: statusBarHeight },\n            styles.appbar,\n            restStyle,\n          ]}\n          dark={dark}\n          {...rest}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(AppbarHeader);\n\n// @component-docs ignore-next-line\nexport { AppbarHeader };\n"]},"metadata":{},"sourceType":"module"}