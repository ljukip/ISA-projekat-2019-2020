{"ast":null,"code":"/*\r\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\nimport { HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios from 'axios';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('axios-http-handler');\nexport var SEND_PROGRESS_EVENT = 'sendProgress';\n\nvar AxiosHttpHandler =\n/** @class */\nfunction () {\n  function AxiosHttpHandler(httpOptions, emitter) {\n    if (httpOptions === void 0) {\n      httpOptions = {};\n    }\n\n    this.httpOptions = httpOptions;\n    this.emitter = emitter;\n  }\n\n  AxiosHttpHandler.prototype.destroy = function () {// Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  };\n\n  AxiosHttpHandler.prototype.handle = function (request, options) {\n    var requestTimeoutInMs = this.httpOptions.requestTimeout;\n    var emitter = this.emitter;\n    var path = request.path;\n\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n\n    var port = request.port;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\n    var axiosRequest = {};\n    axiosRequest.url = url;\n    axiosRequest.method = request.method;\n    axiosRequest.headers = request.headers; // The host header is automatically added by the browser and adding it explicitly in the\n    // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n    // This is because the host header is a forbidden header for the http client to set\n    // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n    // https://fetch.spec.whatwg.org/#forbidden-header-name\n    // The reason we are removing this header here instead of in the aws-sdk's client\n    // middleware is that the host header is required to be in the request signature and if\n    // we remove it from the middlewares, then the request fails because the header is added\n    // by the browser but is absent from the signature.\n\n    delete axiosRequest.headers['host'];\n\n    if (request.body) {\n      axiosRequest.data = request.body;\n    } else {\n      // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n      // If the POST request body is empty but content-type header is set, axios is forcibly removing it\n      // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n      // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n      // removing the content-type header. Link for the source code\n      // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n      if (axiosRequest.headers['Content-Type']) {\n        axiosRequest.data = null;\n      }\n    }\n\n    if (emitter) {\n      axiosRequest.onUploadProgress = function (event) {\n        emitter.emit(SEND_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n    } // From gamma release, aws-sdk now expects all response type to be of blob or streams\n\n\n    axiosRequest.responseType = 'blob';\n    var raceOfPromises = [axios.request(axiosRequest).then(function (response) {\n      return {\n        response: new HttpResponse({\n          headers: response.headers,\n          statusCode: response.status,\n          body: response.data\n        })\n      };\n    }).catch(function (error) {\n      // Error\n      logger.error(error);\n      throw error;\n    }), requestTimeout(requestTimeoutInMs)];\n    return Promise.race(raceOfPromises);\n  };\n\n  return AxiosHttpHandler;\n}();\n\nexport { AxiosHttpHandler };\n\nfunction requestTimeout(timeoutInMs) {\n  if (timeoutInMs === void 0) {\n    timeoutInMs = 0;\n  }\n\n  return new Promise(function (resolve, reject) {\n    if (timeoutInMs) {\n      setTimeout(function () {\n        var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n        timeoutError.name = 'TimeoutError';\n        reject(timeoutError);\n      }, timeoutInMs);\n    }\n  });\n}","map":{"version":3,"sources":["../../src/providers/axios-http-handler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nimport { HttpResponse } from '@aws-sdk/protocol-http';\r\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\r\nimport axios from 'axios';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\nvar logger = new Logger('axios-http-handler');\r\nexport var SEND_PROGRESS_EVENT = 'sendProgress';\r\nvar AxiosHttpHandler = /** @class */ (function () {\r\n    function AxiosHttpHandler(httpOptions, emitter) {\r\n        if (httpOptions === void 0) { httpOptions = {}; }\r\n        this.httpOptions = httpOptions;\r\n        this.emitter = emitter;\r\n    }\r\n    AxiosHttpHandler.prototype.destroy = function () {\r\n        // Do nothing. TLS and HTTP/2 connection pooling is handled by the\r\n        // browser.\r\n    };\r\n    AxiosHttpHandler.prototype.handle = function (request, options) {\r\n        var requestTimeoutInMs = this.httpOptions.requestTimeout;\r\n        var emitter = this.emitter;\r\n        var path = request.path;\r\n        if (request.query) {\r\n            var queryString = buildQueryString(request.query);\r\n            if (queryString) {\r\n                path += \"?\" + queryString;\r\n            }\r\n        }\r\n        var port = request.port;\r\n        var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\r\n        var axiosRequest = {};\r\n        axiosRequest.url = url;\r\n        axiosRequest.method = request.method;\r\n        axiosRequest.headers = request.headers;\r\n        // The host header is automatically added by the browser and adding it explicitly in the\r\n        // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\r\n        // This is because the host header is a forbidden header for the http client to set\r\n        // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\r\n        // https://fetch.spec.whatwg.org/#forbidden-header-name\r\n        // The reason we are removing this header here instead of in the aws-sdk's client\r\n        // middleware is that the host header is required to be in the request signature and if\r\n        // we remove it from the middlewares, then the request fails because the header is added\r\n        // by the browser but is absent from the signature.\r\n        delete axiosRequest.headers['host'];\r\n        if (request.body) {\r\n            axiosRequest.data = request.body;\r\n        }\r\n        else {\r\n            // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\r\n            // If the POST request body is empty but content-type header is set, axios is forcibly removing it\r\n            // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\r\n            // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\r\n            // removing the content-type header. Link for the source code\r\n            // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\r\n            if (axiosRequest.headers['Content-Type']) {\r\n                axiosRequest.data = null;\r\n            }\r\n        }\r\n        if (emitter) {\r\n            axiosRequest.onUploadProgress = function (event) {\r\n                emitter.emit(SEND_PROGRESS_EVENT, event);\r\n                logger.debug(event);\r\n            };\r\n        }\r\n        // From gamma release, aws-sdk now expects all response type to be of blob or streams\r\n        axiosRequest.responseType = 'blob';\r\n        var raceOfPromises = [\r\n            axios\r\n                .request(axiosRequest)\r\n                .then(function (response) {\r\n                return {\r\n                    response: new HttpResponse({\r\n                        headers: response.headers,\r\n                        statusCode: response.status,\r\n                        body: response.data,\r\n                    }),\r\n                };\r\n            })\r\n                .catch(function (error) {\r\n                // Error\r\n                logger.error(error);\r\n                throw error;\r\n            }),\r\n            requestTimeout(requestTimeoutInMs),\r\n        ];\r\n        return Promise.race(raceOfPromises);\r\n    };\r\n    return AxiosHttpHandler;\r\n}());\r\nexport { AxiosHttpHandler };\r\nfunction requestTimeout(timeoutInMs) {\r\n    if (timeoutInMs === void 0) { timeoutInMs = 0; }\r\n    return new Promise(function (resolve, reject) {\r\n        if (timeoutInMs) {\r\n            setTimeout(function () {\r\n                var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\r\n                timeoutError.name = 'TimeoutError';\r\n                reject(timeoutError);\r\n            }, timeoutInMs);\r\n        }\r\n    });\r\n}\r\n//# sourceMappingURL=axios-http-handler.js.map"]},"metadata":{},"sourceType":"module"}