{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet, TouchableWithoutFeedback, View } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass Chip extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      elevation: new Animated.Value(0)\n    });\n\n    _defineProperty(this, \"handlePressIn\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.elevation, {\n        toValue: 4,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(this, \"handlePressOut\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.elevation, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\"]);\n\n    const {\n      dark,\n      colors\n    } = theme;\n    const {\n      backgroundColor = mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb',\n      borderRadius = 16\n    } = StyleSheet.flatten(style) || {};\n    const borderColor = mode === 'outlined' ? color(selectedColor !== undefined ? selectedColor : color(dark ? white : black)).alpha(0.29).rgb().string() : backgroundColor;\n    const textColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n    const iconColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n    const selectedBackgroundColor = (dark ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4) : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n    const underlayColor = selectedColor ? color(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n    const accessibilityTraits = ['button'];\n    const accessibilityState = {\n      selected,\n      disabled\n    };\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n    }\n\n    return /*#__PURE__*/React.createElement(Surface, _extends({\n      style: [styles.container, {\n        elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n        backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n        borderColor,\n        borderRadius\n      }, style]\n    }, rest), /*#__PURE__*/React.createElement(TouchableRipple, {\n      borderless: true,\n      delayPressIn: 0,\n      style: {\n        borderRadius\n      },\n      onPress: onPress,\n      onLongPress: onLongPress,\n      onPressIn: this.handlePressIn,\n      onPressOut: this.handlePressOut,\n      underlayColor: underlayColor,\n      disabled: disabled,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityTraits: accessibilityTraits,\n      accessibilityComponentType: \"button\",\n      accessibilityRole: \"button\",\n      accessibilityState: accessibilityState,\n      testID: testID\n    }, /*#__PURE__*/React.createElement(View, {\n      style: styles.content\n    }, avatar && !icon ? /*#__PURE__*/React.createElement(View, {\n      style: [styles.avatarWrapper, disabled && {\n        opacity: 0.26\n      }]\n    }, /*#__PURE__*/React.isValidElement(avatar) ?\n    /*#__PURE__*/\n\n    /* $FlowFixMe */\n    React.cloneElement(avatar, {\n      /* $FlowFixMe */\n      style: [styles.avatar, avatar.props.style]\n    }) : avatar) : null, icon || selected ? /*#__PURE__*/React.createElement(View, {\n      style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null]\n    }, /*#__PURE__*/React.createElement(Icon, {\n      source: icon || 'check',\n      color: avatar ? white : iconColor,\n      size: 18\n    })) : null, /*#__PURE__*/React.createElement(Text, {\n      numberOfLines: 1,\n      style: [styles.text, _objectSpread(_objectSpread({}, theme.fonts.regular), {}, {\n        color: textColor,\n        marginRight: onClose ? 4 : 8,\n        marginLeft: avatar || icon || selected ? 4 : 8\n      }), textStyle]\n    }, children), onClose ? /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n      onPress: onClose,\n      accessibilityTraits: \"button\",\n      accessibilityComponentType: \"button\"\n    }, /*#__PURE__*/React.createElement(View, {\n      style: styles.icon\n    }, /*#__PURE__*/React.createElement(Icon, {\n      source: \"close-circle\",\n      size: 16,\n      color: iconColor\n    }))) : null)));\n  }\n\n}\n\n_defineProperty(Chip, \"defaultProps\", {\n  mode: 'flat',\n  disabled: false,\n  selected: false\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  icon: {\n    padding: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"sources":["Chip.tsx"],"names":["Chip","React","mode","disabled","selected","elevation","Animated","scale","toValue","duration","useNativeDriver","render","selectedColor","rest","colors","backgroundColor","dark","borderRadius","StyleSheet","borderColor","color","textColor","iconColor","selectedBackgroundColor","underlayColor","accessibilityTraits","accessibilityState","styles","Platform","testID","content","avatar","opacity","style","icon","theme","marginRight","onClose","marginLeft","container","borderWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","text","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","avatarWrapper","avatarSelected","position","top","left","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  private handlePressIn = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n        ? '#383838'\n        : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor).fade(0.5).rgb().string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits: AccessibilityTrait[] = ['button'];\n    const accessibilityState: AccessibilityState = {\n      selected,\n      disabled,\n    };\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={\n          [\n            styles.container,\n            {\n              elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n              backgroundColor: selected\n                ? selectedBackgroundColor\n                : backgroundColor,\n              borderColor,\n              borderRadius,\n            },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={accessibilityState}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'check'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  ...theme.fonts.regular,\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n            >\n              {children}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"close-circle\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}