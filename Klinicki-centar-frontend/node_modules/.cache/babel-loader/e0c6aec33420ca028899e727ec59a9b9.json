{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nconst BORDER_WIDTH = 2;\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nclass RadioButtonAndroid extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      borderAnim: new Animated.Value(BORDER_WIDTH),\n      radioAnim: new Animated.Value(1)\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const {\n      scale\n    } = this.props.theme.animation;\n\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      disabled,\n      onPress,\n      theme,\n      value,\n      status\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\"]);\n\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n    let rippleColor, radioColor;\n    return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n      const checked = isChecked({\n        contextValue: context === null || context === void 0 ? void 0 : context.value,\n        status,\n        value\n      }) === 'checked';\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n        radioColor = theme.colors.disabled;\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n        radioColor = checked ? checkedColor : uncheckedColor;\n      }\n\n      return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: disabled ? undefined : () => {\n          handlePress({\n            onPress,\n            onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n            value\n          });\n        },\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n        accessibilityRole: \"button\",\n        accessibilityState: {\n          disabled\n        },\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container\n      }), /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.radio, {\n          borderColor: radioColor,\n          borderWidth: this.state.borderAnim\n        }]\n      }, checked ? /*#__PURE__*/React.createElement(View, {\n        style: [StyleSheet.absoluteFill, styles.radioContainer]\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.dot, {\n          backgroundColor: radioColor,\n          transform: [{\n            scale: this.state.radioAnim\n          }]\n        }]\n      })) : null));\n    });\n  }\n\n}\n\n_defineProperty(RadioButtonAndroid, \"displayName\", 'RadioButton.Android');\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid); // @component-docs ignore-next-line\n\nexport { RadioButtonAndroid };","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","React","borderAnim","Animated","radioAnim","componentDidUpdate","prevProps","scale","toValue","duration","useNativeDriver","render","status","rest","checkedColor","theme","uncheckedColor","color","context","checked","contextValue","value","rippleColor","radioColor","disabled","handlePress","onValueChange","styles","container","borderColor","borderWidth","StyleSheet","backgroundColor","transform","borderRadius","radioContainer","alignItems","justifyContent","radio","height","width","margin","dot","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  borderAnim: Animated.Value;\n  radioAnim: Animated.Value;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n    const { scale } = this.props.theme.animation;\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, value, status, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor: string, radioColor: string;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor).fade(0.32).rgb().string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityState={{ disabled }}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}