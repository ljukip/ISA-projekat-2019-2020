{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nclass RadioButtonIOS extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      disabled,\n      onPress,\n      theme,\n      status,\n      value\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\"]);\n\n    const checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    }\n\n    return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n      const checked = isChecked({\n        contextValue: context === null || context === void 0 ? void 0 : context.value,\n        status,\n        value\n      }) === 'checked';\n      return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: disabled ? undefined : () => {\n          handlePress({\n            onPress,\n            value,\n            onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange\n          });\n        },\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n        accessibilityRole: \"button\",\n        accessibilityState: {\n          disabled\n        },\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container\n      }), /*#__PURE__*/React.createElement(View, {\n        style: {\n          opacity: checked ? 1 : 0\n        }\n      }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n        allowFontScaling: false,\n        name: \"check\",\n        size: 24,\n        color: checkedColor,\n        direction: \"ltr\"\n      })));\n    });\n  }\n\n}\n\n_defineProperty(RadioButtonIOS, \"displayName\", 'RadioButton.IOS');\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS); // @component-docs ignore-next-line\n\nexport { RadioButtonIOS };","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","React","render","value","rest","checkedColor","disabled","theme","rippleColor","color","context","checked","contextValue","handlePress","onValueChange","styles","container","opacity","borderRadius","padding","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    const { disabled, onPress, theme, status, value, ...rest } = this.props;\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor: string;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    }\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        value,\n                        onValueChange: context?.onValueChange,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityState={{ disabled }}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <View style={{ opacity: checked ? 1 : 0 }}>\n                <MaterialCommunityIcon\n                  allowFontScaling={false}\n                  name=\"check\"\n                  size={24}\n                  color={checkedColor}\n                  direction=\"ltr\"\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}