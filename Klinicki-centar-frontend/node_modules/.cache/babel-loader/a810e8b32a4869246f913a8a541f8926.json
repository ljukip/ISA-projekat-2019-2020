{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nclass HelperText extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      shown: new Animated.Value(this.props.visible ? 1 : 0),\n      textHeight: 0\n    });\n\n    _defineProperty(this, \"showText\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(this, \"hideText\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(this, \"handleTextLayout\", e => {\n      //@ts-ignore Animated.Text typings are improved but something is still broken. It thinks onLayout is not callable.\n      this.props.onLayout && this.props.onLayout(e);\n      this.setState({\n        textHeight: e.nativeEvent.layout.height\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.visible !== this.props.visible || prevState.textHeight !== this.state.textHeight) {\n      if (this.props.visible) {\n        this.showText();\n      } else {\n        this.hideText();\n      }\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      style,\n      type,\n      visible,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onLayout,\n      padding\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"]);\n\n    const {\n      colors,\n      dark\n    } = theme;\n    const textColor = this.props.type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n    return (\n      /*#__PURE__*/\n      // @ts-ignore\n      React.createElement(AnimatedText, _extends({\n        onLayout: this.handleTextLayout,\n        style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n          color: textColor,\n          opacity: this.state.shown,\n          transform: visible && type === 'error' ? [{\n            translateY: this.state.shown.interpolate({\n              inputRange: [0, 1],\n              outputRange: [-this.state.textHeight / 2, 0]\n            })\n          }] : []\n        }, style]\n      }, rest), this.props.children)\n    );\n  }\n\n}\n\n_defineProperty(HelperText, \"defaultProps\", {\n  type: 'info',\n  padding: 'normal',\n  visible: true\n});\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","React","type","padding","visible","shown","Animated","textHeight","componentDidUpdate","prevProps","prevState","scale","toValue","duration","useNativeDriver","e","height","render","rest","dark","textColor","colors","color","styles","opacity","transform","translateY","inputRange","outputRange","text","fontSize","paddingVertical","paddingHorizontal","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\ntype State = {\n  shown: Animated.Value;\n  textHeight: number;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass HelperText extends React.PureComponent<Props, State> {\n  static defaultProps: Partial<Props> = {\n    type: 'info',\n    padding: 'normal',\n    visible: true,\n  };\n\n  state = {\n    shown: new Animated.Value(this.props.visible ? 1 : 0),\n    textHeight: 0,\n  };\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      prevProps.visible !== this.props.visible ||\n      prevState.textHeight !== this.state.textHeight\n    ) {\n      if (this.props.visible) {\n        this.showText();\n      } else {\n        this.hideText();\n      }\n    }\n  }\n\n  private showText = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.shown, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideText = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.shown, {\n      toValue: 0,\n      duration: 180 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private handleTextLayout = (e: LayoutChangeEvent) => {\n    //@ts-ignore Animated.Text typings are improved but something is still broken. It thinks onLayout is not callable.\n    this.props.onLayout && this.props.onLayout(e);\n    this.setState({\n      textHeight: e.nativeEvent.layout.height,\n    });\n  };\n\n  render() {\n    const {\n      style,\n      type,\n      visible,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onLayout,\n      padding,\n      ...rest\n    } = this.props;\n    const { colors, dark } = theme;\n\n    const textColor =\n      this.props.type === 'error'\n        ? colors.error\n        : color(colors.text)\n            .alpha(dark ? 0.7 : 0.54)\n            .rgb()\n            .string();\n\n    return (\n      // @ts-ignore\n      <AnimatedText\n        onLayout={this.handleTextLayout}\n        style={[\n          styles.text,\n          padding !== 'none' ? styles.padding : {},\n          {\n            color: textColor,\n            opacity: this.state.shown,\n            transform:\n              visible && type === 'error'\n                ? [\n                    {\n                      translateY: this.state.shown.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [-this.state.textHeight / 2, 0],\n                      }),\n                    },\n                  ]\n                : [],\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        {this.props.children}\n      </AnimatedText>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}