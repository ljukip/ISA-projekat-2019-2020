{"ast":null,"code":"/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** @class */\nvar CognitoUserSession = /*#__PURE__*/function () {\n  /**\r\n   * Constructs a new CognitoUserSession object\r\n   * @param {CognitoIdToken} IdToken The session's Id token.\r\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\r\n   * @param {CognitoAccessToken} AccessToken The session's access token.\r\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\r\n   */\n  function CognitoUserSession(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        IdToken = _ref.IdToken,\n        RefreshToken = _ref.RefreshToken,\n        AccessToken = _ref.AccessToken,\n        ClockDrift = _ref.ClockDrift;\n\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n  }\n  /**\r\n   * @returns {CognitoIdToken} the session's Id token\r\n   */\n\n\n  var _proto = CognitoUserSession.prototype;\n\n  _proto.getIdToken = function getIdToken() {\n    return this.idToken;\n  }\n  /**\r\n   * @returns {CognitoRefreshToken} the session's refresh token\r\n   */\n  ;\n\n  _proto.getRefreshToken = function getRefreshToken() {\n    return this.refreshToken;\n  }\n  /**\r\n   * @returns {CognitoAccessToken} the session's access token\r\n   */\n  ;\n\n  _proto.getAccessToken = function getAccessToken() {\n    return this.accessToken;\n  }\n  /**\r\n   * @returns {int} the session's clock drift\r\n   */\n  ;\n\n  _proto.getClockDrift = function getClockDrift() {\n    return this.clockDrift;\n  }\n  /**\r\n   * @returns {int} the computer's clock drift\r\n   */\n  ;\n\n  _proto.calculateClockDrift = function calculateClockDrift() {\n    var now = Math.floor(new Date() / 1000);\n    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n    return now - iat;\n  }\n  /**\r\n   * Checks to see if the session is still valid based on session expiry information found\r\n   * in tokens and the current time (adjusted with clock drift)\r\n   * @returns {boolean} if the session is still valid\r\n   */\n  ;\n\n  _proto.isValid = function isValid() {\n    var now = Math.floor(new Date() / 1000);\n    var adjusted = now - this.clockDrift;\n    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n  };\n\n  return CognitoUserSession;\n}();\n\nexport { CognitoUserSession as default };","map":{"version":3,"sources":["C:/Users/Ljubica/Desktop/ISA-projekat-2019-2020/klinicki-centar-frontend/node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js"],"names":["CognitoUserSession","_temp","_ref","IdToken","RefreshToken","AccessToken","ClockDrift","Error","idToken","refreshToken","accessToken","clockDrift","undefined","calculateClockDrift","_proto","prototype","getIdToken","getRefreshToken","getAccessToken","getClockDrift","now","Math","floor","Date","iat","min","getIssuedAt","isValid","adjusted","getExpiration","default"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAiBA;AACA,IAAIA,kBAAkB,GAAG,aAAa,YAAY;AAChD;;;;;;;AAOA,WAASA,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,QAAIC,IAAI,GAAGD,KAAK,KAAK,KAAK,CAAf,GAAmB,EAAnB,GAAwBA,KAAnC;AAAA,QACIE,OAAO,GAAGD,IAAI,CAACC,OADnB;AAAA,QAEIC,YAAY,GAAGF,IAAI,CAACE,YAFxB;AAAA,QAGIC,WAAW,GAAGH,IAAI,CAACG,WAHvB;AAAA,QAIIC,UAAU,GAAGJ,IAAI,CAACI,UAJtB;;AAMA,QAAID,WAAW,IAAI,IAAf,IAAuBF,OAAO,IAAI,IAAtC,EAA4C;AAC1C,YAAM,IAAII,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,SAAKC,OAAL,GAAeL,OAAf;AACA,SAAKM,YAAL,GAAoBL,YAApB;AACA,SAAKM,WAAL,GAAmBL,WAAnB;AACA,SAAKM,UAAL,GAAkBL,UAAU,KAAKM,SAAf,GAA2B,KAAKC,mBAAL,EAA3B,GAAwDP,UAA1E;AACD;AACD;;;;;AAKA,MAAIQ,MAAM,GAAGd,kBAAkB,CAACe,SAAhC;;AAEAD,EAAAA,MAAM,CAACE,UAAP,GAAoB,SAASA,UAAT,GAAsB;AACxC,WAAO,KAAKR,OAAZ;AACD;AACD;;;AAHA;;AAQAM,EAAAA,MAAM,CAACG,eAAP,GAAyB,SAASA,eAAT,GAA2B;AAClD,WAAO,KAAKR,YAAZ;AACD;AACD;;;AAHA;;AAQAK,EAAAA,MAAM,CAACI,cAAP,GAAwB,SAASA,cAAT,GAA0B;AAChD,WAAO,KAAKR,WAAZ;AACD;AACD;;;AAHA;;AAQAI,EAAAA,MAAM,CAACK,aAAP,GAAuB,SAASA,aAAT,GAAyB;AAC9C,WAAO,KAAKR,UAAZ;AACD;AACD;;;AAHA;;AAQAG,EAAAA,MAAM,CAACD,mBAAP,GAA6B,SAASA,mBAAT,GAA+B;AAC1D,QAAIO,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,KAAa,IAAxB,CAAV;AACA,QAAIC,GAAG,GAAGH,IAAI,CAACI,GAAL,CAAS,KAAKf,WAAL,CAAiBgB,WAAjB,EAAT,EAAyC,KAAKlB,OAAL,CAAakB,WAAb,EAAzC,CAAV;AACA,WAAON,GAAG,GAAGI,GAAb;AACD;AACD;;;;;AALA;;AAYAV,EAAAA,MAAM,CAACa,OAAP,GAAiB,SAASA,OAAT,GAAmB;AAClC,QAAIP,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,KAAa,IAAxB,CAAV;AACA,QAAIK,QAAQ,GAAGR,GAAG,GAAG,KAAKT,UAA1B;AACA,WAAOiB,QAAQ,GAAG,KAAKlB,WAAL,CAAiBmB,aAAjB,EAAX,IAA+CD,QAAQ,GAAG,KAAKpB,OAAL,CAAaqB,aAAb,EAAjE;AACD,GAJD;;AAMA,SAAO7B,kBAAP;AACD,CAlFqC,EAAtC;;AAoFA,SAASA,kBAAkB,IAAI8B,OAA/B","sourcesContent":["/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nvar CognitoUserSession = /*#__PURE__*/function () {\r\n  /**\r\n   * Constructs a new CognitoUserSession object\r\n   * @param {CognitoIdToken} IdToken The session's Id token.\r\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\r\n   * @param {CognitoAccessToken} AccessToken The session's access token.\r\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\r\n   */\r\n  function CognitoUserSession(_temp) {\r\n    var _ref = _temp === void 0 ? {} : _temp,\r\n        IdToken = _ref.IdToken,\r\n        RefreshToken = _ref.RefreshToken,\r\n        AccessToken = _ref.AccessToken,\r\n        ClockDrift = _ref.ClockDrift;\r\n\r\n    if (AccessToken == null || IdToken == null) {\r\n      throw new Error('Id token and Access Token must be present.');\r\n    }\r\n\r\n    this.idToken = IdToken;\r\n    this.refreshToken = RefreshToken;\r\n    this.accessToken = AccessToken;\r\n    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\r\n  }\r\n  /**\r\n   * @returns {CognitoIdToken} the session's Id token\r\n   */\r\n\r\n\r\n  var _proto = CognitoUserSession.prototype;\r\n\r\n  _proto.getIdToken = function getIdToken() {\r\n    return this.idToken;\r\n  }\r\n  /**\r\n   * @returns {CognitoRefreshToken} the session's refresh token\r\n   */\r\n  ;\r\n\r\n  _proto.getRefreshToken = function getRefreshToken() {\r\n    return this.refreshToken;\r\n  }\r\n  /**\r\n   * @returns {CognitoAccessToken} the session's access token\r\n   */\r\n  ;\r\n\r\n  _proto.getAccessToken = function getAccessToken() {\r\n    return this.accessToken;\r\n  }\r\n  /**\r\n   * @returns {int} the session's clock drift\r\n   */\r\n  ;\r\n\r\n  _proto.getClockDrift = function getClockDrift() {\r\n    return this.clockDrift;\r\n  }\r\n  /**\r\n   * @returns {int} the computer's clock drift\r\n   */\r\n  ;\r\n\r\n  _proto.calculateClockDrift = function calculateClockDrift() {\r\n    var now = Math.floor(new Date() / 1000);\r\n    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\r\n    return now - iat;\r\n  }\r\n  /**\r\n   * Checks to see if the session is still valid based on session expiry information found\r\n   * in tokens and the current time (adjusted with clock drift)\r\n   * @returns {boolean} if the session is still valid\r\n   */\r\n  ;\r\n\r\n  _proto.isValid = function isValid() {\r\n    var now = Math.floor(new Date() / 1000);\r\n    var adjusted = now - this.clockDrift;\r\n    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\r\n  };\r\n\r\n  return CognitoUserSession;\r\n}();\r\n\r\nexport { CognitoUserSession as default };"]},"metadata":{},"sourceType":"module"}