{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nconst defaultSize = 20;\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass Badge extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      opacity: new Animated.Value(this.props.visible ? 1 : 0)\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      visible,\n      theme: {\n        animation: {\n          scale\n        }\n      }\n    } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      children,\n      size = defaultSize,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"size\", \"style\", \"theme\", \"visible\"]);\n\n    const {\n      opacity\n    } = this.state;\n\n    const _ref = StyleSheet.flatten(style) || {},\n          {\n      backgroundColor = theme.colors.notification\n    } = _ref,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n\n    const textColor = color(backgroundColor).isLight() ? black : white;\n    const borderRadius = size / 2;\n    return (\n      /*#__PURE__*/\n      // @ts-ignore\n      React.createElement(Animated.Text, _extends({\n        numberOfLines: 1,\n        style: [_objectSpread(_objectSpread({\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5\n        }, theme.fonts.regular), {}, {\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius\n        }), styles.container, restStyle]\n      }, rest), children)\n    );\n  }\n\n}\n\n_defineProperty(Badge, \"defaultProps\", {\n  visible: true,\n  size: defaultSize\n});\n\nexport default withTheme(Badge);\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","React","visible","size","opacity","Animated","componentDidUpdate","theme","animation","scale","prevProps","toValue","duration","useNativeDriver","render","rest","backgroundColor","notification","restStyle","StyleSheet","textColor","color","borderRadius","fontSize","lineHeight","height","minWidth","styles","withTheme","container","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: defaultSize,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      visible,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      size = defaultSize,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible,\n      ...rest\n    } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).isLight() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      // @ts-ignore\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            ...theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}