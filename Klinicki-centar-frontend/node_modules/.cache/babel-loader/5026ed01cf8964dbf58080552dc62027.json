{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nexport const ListAccordionGroupContext = /*#__PURE__*/React.createContext(null);\n/**\n * List.AccordionGroup allows to control a group of List Accordions. Id prop for List.Accordion is required in order to group to work.\n * List.AccordionGroup can be controlled or uncontrolled component. Example shows uncontrolled version.\n * At most one Accordion will be expanded in given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nclass ListAccordionGroup extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      expandedId: undefined\n    });\n\n    _defineProperty(this, \"onAccordionPress\", expandedId => {\n      this.setState(({\n        expandedId: currentExpandedId\n      }) => ({\n        expandedId: currentExpandedId === expandedId ? undefined : expandedId\n      }));\n    });\n  }\n\n  render() {\n    const {\n      expandedId,\n      onAccordionPress,\n      children\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ListAccordionGroupContext.Provider, {\n      value: {\n        expandedId: expandedId || this.state.expandedId,\n        // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || this.onAccordionPress\n      }\n    }, children);\n  }\n\n}\n\n_defineProperty(ListAccordionGroup, \"displayName\", 'List.AccordionGroup');\n\nexport default ListAccordionGroup;","map":{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","undefined","currentExpandedId","render","children","onAccordionPress"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAsBA,OAAO,MAAMA,yBAAyB,GAAA,aAAGC,KAAK,CAALA,aAAAA,CAAlC,IAAkCA,CAAlC;AAQP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,MAAA,kBAAA,SAAiCA,KAAK,CAAtC,SAAA,CAA+D;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAG9C;AACbE,MAAAA,UAAU,EAAEC;AADC,KAH8C,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAOzCD,UAAD,IAAiC;AAClD,WAAA,QAAA,CAAc,CAAC;AAAEA,QAAAA,UAAU,EAAEE;AAAd,OAAD,MAAwC;AACpDF,QAAAA,UAAU,EAAEE,iBAAiB,KAAjBA,UAAAA,GAAAA,SAAAA,GAA+CF;AADP,OAAxC,CAAd;AAR2D,KAAA,CAAA;AAAA;;AAa7DG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,UAAA;AAAA,MAAA,gBAAA;AAAgCC,MAAAA;AAAhC,QAA6C,KAAnD,KAAA;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,yBAAD,CAAA,QAAA,EAAA;AACE,MAAA,KAAK,EAAE;AACLJ,QAAAA,UAAU,EAAEA,UAAU,IAAI,KAAA,KAAA,CADrB,UAAA;AAC4C;AACjDK,QAAAA,gBAAgB,EAAEA,gBAAgB,IAAI,KAAKA;AAFtC;AADT,KAAA,EADF,QACE,CADF;AAUD;;AA1B4D;;gBAAzDN,kB,iBACiB,qB;;AA4BvB,eAAA,kBAAA","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\ntype State = {\n  expandedId: string | number | undefined;\n};\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. Id prop for List.Accordion is required in order to group to work.\n * List.AccordionGroup can be controlled or uncontrolled component. Example shows uncontrolled version.\n * At most one Accordion will be expanded in given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nclass ListAccordionGroup extends React.Component<Props, State> {\n  static displayName = 'List.AccordionGroup';\n\n  state: State = {\n    expandedId: undefined,\n  };\n\n  onAccordionPress = (expandedId: string | number) => {\n    this.setState(({ expandedId: currentExpandedId }) => ({\n      expandedId: currentExpandedId === expandedId ? undefined : expandedId,\n    }));\n  };\n\n  render() {\n    const { expandedId, onAccordionPress, children } = this.props;\n\n    return (\n      <ListAccordionGroupContext.Provider\n        value={{\n          expandedId: expandedId || this.state.expandedId, // component can be controlled or uncontrolled\n          onAccordionPress: onAccordionPress || this.onAccordionPress,\n        }}\n      >\n        {children}\n      </ListAccordionGroupContext.Provider>\n    );\n  }\n}\n\nexport default ListAccordionGroup;\n"]},"metadata":{},"sourceType":"module"}