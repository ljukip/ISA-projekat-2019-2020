{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, Easing, Platform, StyleSheet, View } from 'react-native';\nimport { withTheme } from '../core/theming';\nconst DURATION = 2400;\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass ActivityIndicator extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      timer: new Animated.Value(0),\n      fade: new Animated.Value(!this.props.animating && this.props.hidesWhenStopped ? 0 : 1)\n    });\n\n    _defineProperty(this, \"rotation\", undefined);\n\n    _defineProperty(this, \"startRotation\", () => {\n      const {\n        fade,\n        timer\n      } = this.state;\n      const {\n        scale\n      } = this.props.theme.animation; // Show indicator\n\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 1,\n        isInteraction: false,\n        useNativeDriver: true\n      }).start(); // Circular animation in loop\n\n      if (this.rotation) {\n        timer.setValue(0); // $FlowFixMe\n\n        Animated.loop(this.rotation).start();\n      }\n    });\n\n    _defineProperty(this, \"stopRotation\", () => {\n      if (this.rotation) {\n        this.rotation.stop();\n      }\n    });\n  }\n\n  componentDidMount() {\n    const {\n      animating\n    } = this.props;\n    const {\n      timer\n    } = this.state; // Circular animation in loop\n\n    this.rotation = Animated.timing(timer, {\n      duration: DURATION,\n      easing: Easing.linear,\n      // Animated.loop does not work if useNativeDriver is true on web\n      useNativeDriver: Platform.OS !== 'web',\n      toValue: 1,\n      isInteraction: false\n    });\n\n    if (animating) {\n      this.startRotation();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      animating,\n      hidesWhenStopped,\n      theme: {\n        animation: {\n          scale\n        }\n      }\n    } = this.props;\n    const {\n      fade\n    } = this.state;\n\n    if (animating !== prevProps.animating) {\n      if (animating) {\n        this.startRotation();\n      } else if (hidesWhenStopped) {\n        // Hide indicator first and then stop rotation\n        Animated.timing(fade, {\n          duration: 200 * scale,\n          toValue: 0,\n          useNativeDriver: true,\n          isInteraction: false\n        }).start(this.stopRotation.bind(this));\n      } else {\n        this.stopRotation();\n      }\n    }\n  }\n\n  render() {\n    const {\n      fade,\n      timer\n    } = this.state;\n\n    const _this$props = this.props,\n          {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      animating,\n      color: indicatorColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      hidesWhenStopped,\n      size: indicatorSize,\n      style,\n      theme\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"animating\", \"color\", \"hidesWhenStopped\", \"size\", \"style\", \"theme\"]);\n\n    const color = indicatorColor || theme.colors.primary;\n    const size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize ? indicatorSize : 24;\n    const frames = 60 * DURATION / 1000;\n    const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n    const containerStyle = {\n      width: size,\n      height: size / 2,\n      overflow: 'hidden'\n    };\n    return /*#__PURE__*/React.createElement(View, _extends({\n      style: [styles.container, style]\n    }, rest), /*#__PURE__*/React.createElement(Animated.View, {\n      style: [{\n        width: size,\n        height: size,\n        opacity: fade\n      }],\n      collapsable: false\n    }, [0, 1].map(index => {\n      // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n      const inputRange = Array.from(new Array(frames), (_, frameIndex) => frameIndex / (frames - 1));\n      const outputRange = Array.from(new Array(frames), (_, frameIndex) => {\n        let progress = 2 * frameIndex / (frames - 1);\n        const rotation = index ? +(360 - 15) : -(180 - 15);\n\n        if (progress > 1.0) {\n          progress = 2.0 - progress;\n        }\n\n        const direction = index ? -1 : +1;\n        return \"\".concat(direction * (180 - 30) * easing(progress) + rotation, \"deg\");\n      });\n      const layerStyle = {\n        width: size,\n        height: size,\n        transform: [{\n          rotate: timer.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\"\".concat(0 + 30 + 15, \"deg\"), \"\".concat(2 * 360 + 30 + 15, \"deg\")]\n          })\n        }]\n      };\n      const viewportStyle = {\n        width: size,\n        height: size,\n        transform: [{\n          translateY: index ? -size / 2 : 0\n        }, {\n          rotate: timer.interpolate({\n            inputRange,\n            outputRange\n          })\n        }]\n      };\n      const offsetStyle = index ? {\n        top: size / 2\n      } : null;\n      const lineStyle = {\n        width: size,\n        height: size,\n        borderColor: color,\n        borderWidth: size / 10,\n        borderRadius: size / 2\n      };\n      return /*#__PURE__*/React.createElement(Animated.View, {\n        key: index,\n        style: [styles.layer]\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: layerStyle\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [containerStyle, offsetStyle],\n        collapsable: false\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: viewportStyle\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: containerStyle,\n        collapsable: false\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: lineStyle\n      }))))));\n    })));\n  }\n\n}\n\n_defineProperty(ActivityIndicator, \"defaultProps\", {\n  animating: true,\n  size: 'small',\n  hidesWhenStopped: true\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  layer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    justifyContent: 'center',\n    alignItems: 'center'\n  })\n});\nexport default withTheme(ActivityIndicator);","map":{"version":3,"sources":["ActivityIndicator.tsx"],"names":["DURATION","ActivityIndicator","React","animating","size","hidesWhenStopped","timer","Animated","fade","componentDidMount","duration","easing","Easing","useNativeDriver","Platform","toValue","isInteraction","componentDidUpdate","theme","animation","scale","prevProps","render","color","rest","indicatorColor","indicatorSize","frames","containerStyle","width","height","overflow","styles","opacity","index","inputRange","Array","frameIndex","outputRange","progress","rotation","direction","layerStyle","transform","rotate","viewportStyle","translateY","offsetStyle","top","lineStyle","borderColor","borderWidth","borderRadius","container","justifyContent","alignItems","layer","StyleSheet","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Whether to show the indicator or hide it.\n   */\n  animating?: boolean;\n  /**\n   * The color of the spinner.\n   */\n  color?: string;\n  /**\n   * Size of the indicator.\n   */\n  size?: 'small' | 'large' | number;\n  /**\n   * Whether the indicator should hide when not animating.\n   */\n  hidesWhenStopped?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  timer: Animated.Value;\n  fade: Animated.Value;\n};\n\nconst DURATION = 2400;\n\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ActivityIndicator extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    animating: true,\n    size: 'small',\n    hidesWhenStopped: true,\n  };\n\n  state = {\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(\n      !this.props.animating && this.props.hidesWhenStopped ? 0 : 1\n    ),\n  };\n\n  rotation: Animated.CompositeAnimation | undefined = undefined;\n\n  componentDidMount() {\n    const { animating } = this.props;\n    const { timer } = this.state;\n\n    // Circular animation in loop\n    this.rotation = Animated.timing(timer, {\n      duration: DURATION,\n      easing: Easing.linear,\n      // Animated.loop does not work if useNativeDriver is true on web\n      useNativeDriver: Platform.OS !== 'web',\n      toValue: 1,\n      isInteraction: false,\n    });\n\n    if (animating) {\n      this.startRotation();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      animating,\n      hidesWhenStopped,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n    const { fade } = this.state;\n\n    if (animating !== prevProps.animating) {\n      if (animating) {\n        this.startRotation();\n      } else if (hidesWhenStopped) {\n        // Hide indicator first and then stop rotation\n        Animated.timing(fade, {\n          duration: 200 * scale,\n          toValue: 0,\n          useNativeDriver: true,\n          isInteraction: false,\n        }).start(this.stopRotation.bind(this));\n      } else {\n        this.stopRotation();\n      }\n    }\n  }\n\n  private startRotation = () => {\n    const { fade, timer } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    // Show indicator\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      isInteraction: false,\n      useNativeDriver: true,\n    }).start();\n\n    // Circular animation in loop\n    if (this.rotation) {\n      timer.setValue(0);\n      // $FlowFixMe\n      Animated.loop(this.rotation).start();\n    }\n  };\n\n  private stopRotation = () => {\n    if (this.rotation) {\n      this.rotation.stop();\n    }\n  };\n\n  render() {\n    const { fade, timer } = this.state;\n    const {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      animating,\n      color: indicatorColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      hidesWhenStopped,\n      size: indicatorSize,\n      style,\n      theme,\n      ...rest\n    } = this.props;\n    const color = indicatorColor || theme.colors.primary;\n    const size =\n      typeof indicatorSize === 'string'\n        ? indicatorSize === 'small'\n          ? 24\n          : 48\n        : indicatorSize\n        ? indicatorSize\n        : 24;\n\n    const frames = (60 * DURATION) / 1000;\n    const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n    const containerStyle = {\n      width: size,\n      height: size / 2,\n      overflow: 'hidden',\n    };\n\n    return (\n      <View style={[styles.container, style]} {...rest}>\n        <Animated.View\n          style={[{ width: size, height: size, opacity: fade }]}\n          collapsable={false}\n        >\n          {[0, 1].map((index) => {\n            // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n            const inputRange = Array.from(\n              new Array(frames),\n              (_, frameIndex) => frameIndex / (frames - 1)\n            );\n            const outputRange = Array.from(\n              new Array(frames),\n              (_, frameIndex) => {\n                let progress = (2 * frameIndex) / (frames - 1);\n                const rotation = index ? +(360 - 15) : -(180 - 15);\n\n                if (progress > 1.0) {\n                  progress = 2.0 - progress;\n                }\n\n                const direction = index ? -1 : +1;\n\n                return `${\n                  direction * (180 - 30) * easing(progress) + rotation\n                }deg`;\n              }\n            );\n\n            const layerStyle = {\n              width: size,\n              height: size,\n              transform: [\n                {\n                  rotate: timer.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [\n                      `${0 + 30 + 15}deg`,\n                      `${2 * 360 + 30 + 15}deg`,\n                    ],\n                  }),\n                },\n              ],\n            };\n\n            const viewportStyle = {\n              width: size,\n              height: size,\n              transform: [\n                {\n                  translateY: index ? -size / 2 : 0,\n                },\n                {\n                  rotate: timer.interpolate({ inputRange, outputRange }),\n                },\n              ],\n            };\n\n            const offsetStyle = index ? { top: size / 2 } : null;\n\n            const lineStyle = {\n              width: size,\n              height: size,\n              borderColor: color,\n              borderWidth: size / 10,\n              borderRadius: size / 2,\n            };\n\n            return (\n              <Animated.View key={index} style={[styles.layer]}>\n                <Animated.View style={layerStyle}>\n                  <Animated.View\n                    style={[containerStyle, offsetStyle]}\n                    collapsable={false}\n                  >\n                    <Animated.View style={viewportStyle}>\n                      <Animated.View style={containerStyle} collapsable={false}>\n                        <Animated.View style={lineStyle} />\n                      </Animated.View>\n                    </Animated.View>\n                  </Animated.View>\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  layer: {\n    ...StyleSheet.absoluteFillObject,\n\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(ActivityIndicator);\n"]},"metadata":{},"sourceType":"module"}