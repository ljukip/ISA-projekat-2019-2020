{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\"]);\n\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right\n    });\n    const {\n      colors,\n      fonts\n    } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const _ref = StyleSheet.flatten(style) || {},\n          {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background\n    } = _ref,\n          viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"backgroundColor\"]);\n\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n    const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(({\n      side,\n      type\n    }) => side === AdornmentSide.Left && type === AdornmentType.Icon);\n\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n    const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n    const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n    };\n    const pad = calculatePadding(paddingSettings);\n    const paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n      pad\n    }));\n    const baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n    const placeholderOpacity = interpolatePlaceholder(parentState.labeled, hasActiveOutline);\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n      errorColor,\n      labelTranslationXOffset\n    };\n    const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n    const {\n      leftLayout,\n      rightLayout\n    } = parentState;\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n    });\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n    });\n    const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n    const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth\n    });\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange\n    };\n    let adornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused\n    };\n\n    if (adornmentConfig.length) {\n      adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n        left,\n        right,\n        textStyle: _objectSpread(_objectSpread({}, font), {}, {\n          fontSize,\n          fontWeight\n        }),\n        visible: this.props.parentState.labeled\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(View, {\n      style: viewStyle\n    }, /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Outline, {\n      theme: theme,\n      hasActiveOutline: hasActiveOutline,\n      activeColor: activeColor,\n      outlineColor: outlineColor,\n      backgroundColor: backgroundColor\n    }), /*#__PURE__*/React.createElement(View, {\n      style: {\n        paddingTop: LABEL_PADDING_TOP,\n        paddingBottom: 0,\n        minHeight\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      parentState: parentState,\n      labelProps: labelProps,\n      labelBackground: LabelBackground\n    }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n      ref: innerRef,\n      onChangeText,\n      placeholder: label ? parentState.placeholder : this.props.placeholder,\n      placeholderTextColor: placeholderColor,\n      editable: !disabled && editable,\n      selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n      onFocus,\n      onBlur,\n      underlineColorAndroid: 'transparent',\n      multiline,\n      style: [styles.input, !multiline || multiline && height ? {\n        height: inputHeight\n      } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n        fontSize,\n        fontWeight,\n        color: inputTextColor,\n        textAlignVertical: multiline ? 'top' : 'center'\n      }), adornmentStyleAdjustmentForNativeInput]\n    }))), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps)));\n  }\n\n}\n\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: props => /*#__PURE__*/React.createElement(NativeTextInput, props)\n});\n\nexport default TextInputOutlined;\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor\n}) => /*#__PURE__*/React.createElement(View, {\n  pointerEvents: \"none\",\n  style: [styles.outline, // eslint-disable-next-line react-native/no-inline-styles\n  {\n    backgroundColor,\n    borderRadius: theme.roundness,\n    borderWidth: hasActiveOutline ? 2 : 1,\n    borderColor: hasActiveOutline ? activeColor : outlineColor\n  }]\n});\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["TextInput","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","disabled","error","multiline","editable","render","props","right","rest","adornmentConfig","getAdornmentConfig","fonts","font","hasActiveOutline","parentState","fontSize","backgroundColor","colors","background","viewStyle","StyleSheet","fontSizeStyle","inputTextColor","activeColor","color","placeholderColor","outlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","labelTranslationXOffset","isAdornmentLeftIcon","type","side","AdornmentSide","AdornmentType","ADORNMENT_SIZE","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","placeholderStyle","wiggleOffsetX","minHeight","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","leftLayout","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","left","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","affixTopPosition","onAffixChange","onRightAffixLayoutChange","adornmentProps","isTextInputFocused","focused","textStyle","fontWeight","visible","labeled","paddingTop","paddingBottom","LabelBackground","ref","placeholder","label","placeholderTextColor","selectionColor","underlineColorAndroid","style","textAlignVertical","Outline","borderRadius","theme","borderWidth","borderColor","position","paddingHorizontal","outline","top","bottom","input","flexGrow","margin","textAlign","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = interpolatePlaceholder(\n      parentState.labeled,\n      hasActiveOutline\n    );\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n      errorColor,\n      labelTranslationXOffset,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: string | undefined;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}