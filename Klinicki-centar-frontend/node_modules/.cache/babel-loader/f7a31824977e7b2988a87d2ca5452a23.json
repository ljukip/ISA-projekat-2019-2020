{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\n\nclass RadioButtonItem extends React.Component {\n  render() {\n    const {\n      value,\n      label,\n      style,\n      labelStyle,\n      onPress,\n      disabled,\n      color,\n      uncheckedColor,\n      status,\n      theme: {\n        colors\n      },\n      accessibilityLabel\n    } = this.props;\n    return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n      return /*#__PURE__*/React.createElement(TouchableRipple, {\n        onPress: disabled ? undefined : () => handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value\n        }),\n        accessibilityLabel: accessibilityLabel\n      }, /*#__PURE__*/React.createElement(View, {\n        style: [styles.container, style],\n        pointerEvents: \"none\"\n      }, /*#__PURE__*/React.createElement(Text, {\n        style: [styles.label, {\n          color: colors.text\n        }, labelStyle]\n      }, label), /*#__PURE__*/React.createElement(RadioButton, {\n        value: value,\n        disabled: disabled,\n        status: status,\n        color: color,\n        uncheckedColor: uncheckedColor\n      })));\n    });\n  }\n\n}\n\n_defineProperty(RadioButtonItem, \"displayName\", 'RadioButton.Item');\n\nexport default withTheme(RadioButtonItem); // @component-docs ignore-next-line\n\nexport { RadioButtonItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","React","render","theme","colors","accessibilityLabel","context","disabled","handlePress","onPress","onValueChange","value","styles","color","text","uncheckedColor","withTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,UAAA,QAAA,cAAA;AAOA,SAAA,SAAA,QAAA,oBAAA;AACA,SAAA,kBAAA,QAAA,oBAAA;AACA,SAAA,WAAA,QAAA,SAAA;AACA,OAAA,eAAA,MAAA,oBAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,IAAA,MAAA,oBAAA;AAiDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAA,eAAA,SAA8BC,KAAK,CAAnC,SAAA,CAAqD;AAGnDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,KAAA;AAAA,MAAA,KAAA;AAAA,MAAA,KAAA;AAAA,MAAA,UAAA;AAAA,MAAA,OAAA;AAAA,MAAA,QAAA;AAAA,MAAA,KAAA;AAAA,MAAA,cAAA;AAAA,MAAA,MAAA;AAUJC,MAAAA,KAAK,EAAE;AAAEC,QAAAA;AAAF,OAVH;AAWJC,MAAAA;AAXI,QAYF,KAZJ,KAAA;AAcA,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA,IAAA,EACIC,OAAD,IAAsC;AACrC,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AACE,QAAA,OAAO,EACLC,QAAQ,GAAA,SAAA,GAEJ,MACEC,WAAW,CAAC;AACVC,UAAAA,OAAO,EADG,OAAA;AAEVC,UAAAA,aAAa,EAAEJ,OAAF,KAAA,IAAEA,IAAAA,OAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,OAAO,CAFZ,aAAA;AAGVK,UAAAA;AAHU,SAAD,CALrB;AAWE,QAAA,kBAAkB,EAAEN;AAXtB,OAAA,EAAA,aAaE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACO,MAAM,CAAP,SAAA,EAAb,KAAa,CAAb;AAAwC,QAAA,aAAa,EAAC;AAAtD,OAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,KAAK,EAAE,CAACA,MAAM,CAAP,KAAA,EAAe;AAAEC,UAAAA,KAAK,EAAET,MAAM,CAACU;AAAhB,SAAf,EAAA,UAAA;AADT,OAAA,EADF,KACE,CADF,EAAA,aAME,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AACE,QAAA,KAAK,EADP,KAAA;AAEE,QAAA,QAAQ,EAFV,QAAA;AAGE,QAAA,MAAM,EAHR,MAAA;AAIE,QAAA,KAAK,EAJP,KAAA;AAKE,QAAA,cAAc,EAAEC;AALlB,OAAA,CANF,CAbF,CADF;AAHN,KACE,CADF;AAoCD;;AAtDkD;;gBAA/Cf,e,iBACiB,kB;;AAwDvB,eAAegB,SAAS,CAAxB,eAAwB,CAAxB,C,CAEA;;AACA,SAAA,eAAA;AAEA,MAAMJ,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EADJ,KAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,cAAc,EAHL,eAAA;AAITC,IAAAA,eAAe,EAJN,CAAA;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nclass RadioButtonItem extends React.Component<Props> {\n  static displayName = 'RadioButton.Item';\n\n  render() {\n    const {\n      value,\n      label,\n      style,\n      labelStyle,\n      onPress,\n      disabled,\n      color,\n      uncheckedColor,\n      status,\n      theme: { colors },\n      accessibilityLabel,\n    } = this.props;\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          return (\n            <TouchableRipple\n              onPress={\n                disabled\n                  ? undefined\n                  : () =>\n                      handlePress({\n                        onPress: onPress,\n                        onValueChange: context?.onValueChange,\n                        value,\n                      })\n              }\n              accessibilityLabel={accessibilityLabel}\n            >\n              <View style={[styles.container, style]} pointerEvents=\"none\">\n                <Text\n                  style={[styles.label, { color: colors.text }, labelStyle]}\n                >\n                  {label}\n                </Text>\n                <RadioButton\n                  value={value}\n                  disabled={disabled}\n                  status={status}\n                  color={color}\n                  uncheckedColor={uncheckedColor}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}