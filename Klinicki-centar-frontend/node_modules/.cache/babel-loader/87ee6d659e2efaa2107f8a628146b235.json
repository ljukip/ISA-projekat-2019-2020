{"ast":null,"code":"import { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nexport var parseMobileHubConfig = function (config) {\n  var amplifyConfig = {}; // Analytics\n\n  if (config['aws_mobile_analytics_app_id']) {\n    var Analytics = {\n      AWSPinpoint: {\n        appId: config['aws_mobile_analytics_app_id'],\n        region: config['aws_mobile_analytics_app_region']\n      }\n    };\n    amplifyConfig.Analytics = Analytics;\n  } // Auth\n\n\n  if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n    amplifyConfig.Auth = {\n      userPoolId: config['aws_user_pools_id'],\n      userPoolWebClientId: config['aws_user_pools_web_client_id'],\n      region: config['aws_cognito_region'],\n      identityPoolId: config['aws_cognito_identity_pool_id'],\n      identityPoolRegion: config['aws_cognito_region'],\n      mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable'\n    };\n  } // Storage\n\n\n  var storageConfig;\n\n  if (config['aws_user_files_s3_bucket']) {\n    storageConfig = {\n      AWSS3: {\n        bucket: config['aws_user_files_s3_bucket'],\n        region: config['aws_user_files_s3_bucket_region'],\n        dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing']\n      }\n    };\n  } else {\n    storageConfig = config ? config.Storage || config : {};\n  }\n\n  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n  amplifyConfig.Storage = Object.assign({}, storageConfig);\n  logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n  return amplifyConfig;\n};\n/**\r\n * @deprecated use per-function export\r\n */\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser() {}\n\n  Parser.parseMobilehubConfig = parseMobileHubConfig;\n  return Parser;\n}();\n\nexport { Parser };\n/**\r\n * @deprecated use per-function export\r\n */\n\nexport default Parser;","map":{"version":3,"sources":["../src/Parser.ts"],"names":[],"mappings":"AACA,SAAS,aAAa,IAAI,MAA1B,QAAwC,UAAxC;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,QAAX,CAAf;AAEA,OAAO,IAAM,oBAAoB,GAAG,UAAC,MAAD,EAAO;AAC1C,MAAM,aAAa,GAAkB,EAArC,CAD0C,CAE1C;;AACA,MAAI,MAAM,CAAC,6BAAD,CAAV,EAA2C;AAC1C,QAAM,SAAS,GAAG;AACjB,MAAA,WAAW,EAAE;AACZ,QAAA,KAAK,EAAE,MAAM,CAAC,6BAAD,CADD;AAEZ,QAAA,MAAM,EAAE,MAAM,CAAC,iCAAD;AAFF;AADI,KAAlB;AAMA,IAAA,aAAa,CAAC,SAAd,GAA0B,SAA1B;AACA,GAXyC,CAa1C;;;AACA,MAAI,MAAM,CAAC,8BAAD,CAAN,IAA0C,MAAM,CAAC,mBAAD,CAApD,EAA2E;AAC1E,IAAA,aAAa,CAAC,IAAd,GAAqB;AACpB,MAAA,UAAU,EAAE,MAAM,CAAC,mBAAD,CADE;AAEpB,MAAA,mBAAmB,EAAE,MAAM,CAAC,8BAAD,CAFP;AAGpB,MAAA,MAAM,EAAE,MAAM,CAAC,oBAAD,CAHM;AAIpB,MAAA,cAAc,EAAE,MAAM,CAAC,8BAAD,CAJF;AAKpB,MAAA,kBAAkB,EAAE,MAAM,CAAC,oBAAD,CALN;AAMpB,MAAA,eAAe,EAAE,MAAM,CAAC,uBAAD,CAAN,KAAoC;AANjC,KAArB;AAQA,GAvByC,CAyB1C;;;AACA,MAAI,aAAJ;;AACA,MAAI,MAAM,CAAC,0BAAD,CAAV,EAAwC;AACvC,IAAA,aAAa,GAAG;AACf,MAAA,KAAK,EAAE;AACN,QAAA,MAAM,EAAE,MAAM,CAAC,0BAAD,CADR;AAEN,QAAA,MAAM,EAAE,MAAM,CAAC,iCAAD,CAFR;AAGN,QAAA,0CAA0C,EACzC,MAAM,CACL,oEADK;AAJD;AADQ,KAAhB;AAUA,GAXD,MAWO;AACN,IAAA,aAAa,GAAG,MAAM,GAAG,MAAM,CAAC,OAAP,IAAkB,MAArB,GAA8B,EAApD;AACA;;AACD,EAAA,aAAa,CAAC,SAAd,GAA0B,MAAM,CAAC,MAAP,CACzB,EADyB,EAEzB,aAAa,CAAC,SAFW,EAGzB,MAAM,CAAC,SAHkB,CAA1B;AAKA,EAAA,aAAa,CAAC,IAAd,GAAqB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,aAAa,CAAC,IAAhC,EAAsC,MAAM,CAAC,IAA7C,CAArB;AACA,EAAA,aAAa,CAAC,OAAd,GAAwB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,aAAlB,CAAxB;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,cAAb,EAA6B,MAA7B,EAAqC,kBAArC,EAAyD,aAAzD;AACA,SAAO,aAAP;AACA,CAlDM;AAoDP;;;;AAGA,IAAA,MAAA;AAAA;AAAA,YAAA;AAAA,WAAA,MAAA,GAAA,CAEC;;AADO,EAAA,MAAA,CAAA,oBAAA,GAAuB,oBAAvB;AACR,SAAA,MAAA;AAAC,CAFD,EAAA;;SAAa,M;AAIb;;;;AAGA,eAAe,MAAf","sourceRoot":"","sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\r\nvar logger = new Logger('Parser');\r\nexport var parseMobileHubConfig = function (config) {\r\n    var amplifyConfig = {};\r\n    // Analytics\r\n    if (config['aws_mobile_analytics_app_id']) {\r\n        var Analytics = {\r\n            AWSPinpoint: {\r\n                appId: config['aws_mobile_analytics_app_id'],\r\n                region: config['aws_mobile_analytics_app_region'],\r\n            },\r\n        };\r\n        amplifyConfig.Analytics = Analytics;\r\n    }\r\n    // Auth\r\n    if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\r\n        amplifyConfig.Auth = {\r\n            userPoolId: config['aws_user_pools_id'],\r\n            userPoolWebClientId: config['aws_user_pools_web_client_id'],\r\n            region: config['aws_cognito_region'],\r\n            identityPoolId: config['aws_cognito_identity_pool_id'],\r\n            identityPoolRegion: config['aws_cognito_region'],\r\n            mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\r\n        };\r\n    }\r\n    // Storage\r\n    var storageConfig;\r\n    if (config['aws_user_files_s3_bucket']) {\r\n        storageConfig = {\r\n            AWSS3: {\r\n                bucket: config['aws_user_files_s3_bucket'],\r\n                region: config['aws_user_files_s3_bucket_region'],\r\n                dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'],\r\n            },\r\n        };\r\n    }\r\n    else {\r\n        storageConfig = config ? config.Storage || config : {};\r\n    }\r\n    amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\r\n    amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\r\n    amplifyConfig.Storage = Object.assign({}, storageConfig);\r\n    logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\r\n    return amplifyConfig;\r\n};\r\n/**\r\n * @deprecated use per-function export\r\n */\r\nvar Parser = /** @class */ (function () {\r\n    function Parser() {\r\n    }\r\n    Parser.parseMobilehubConfig = parseMobileHubConfig;\r\n    return Parser;\r\n}());\r\nexport { Parser };\r\n/**\r\n * @deprecated use per-function export\r\n */\r\nexport default Parser;\r\n//# sourceMappingURL=Parser.js.map"]},"metadata":{},"sourceType":"module"}