{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport Icon from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nconst defaultSize = 64;\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\n\nclass Avatar extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      icon,\n      size = defaultSize,\n      style,\n      theme\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"icon\", \"size\", \"style\", \"theme\"]);\n\n    const _ref = StyleSheet.flatten(style) || {},\n          {\n      backgroundColor = theme.colors.primary\n    } = _ref,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n\n    const textColor = this.props.color || (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n    return /*#__PURE__*/React.createElement(View, _extends({\n      style: [{\n        width: size,\n        height: size,\n        borderRadius: size / 2,\n        backgroundColor\n      }, styles.container, restStyle]\n    }, rest), /*#__PURE__*/React.createElement(Icon, {\n      source: icon,\n      color: textColor,\n      size: size * 0.6\n    }));\n  }\n\n}\n\n_defineProperty(Avatar, \"displayName\", 'Avatar.Icon');\n\n_defineProperty(Avatar, \"defaultProps\", {\n  size: defaultSize\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(Avatar);","map":{"version":3,"sources":["AvatarIcon.tsx"],"names":["defaultSize","Avatar","React","size","render","theme","rest","backgroundColor","primary","restStyle","StyleSheet","textColor","color","width","height","borderRadius","styles","container","justifyContent","alignItems","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,UAAA,QAAA,cAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA,MAAA,SAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AACA,SAAA,KAAA,QAAA,qBAAA;AAGA,MAAMA,WAAW,GAAjB,EAAA;AAsBA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAA,MAAA,SAAqBE,KAAK,CAA1B,SAAA,CAA4C;AAO1CE,EAAAA,MAAM,GAAG;AACP,UAAA,WAAA,GAA4D,KAA5D,KAAA;AAAA,UAAM;AAAA,MAAA,IAAA;AAAQD,MAAAA,IAAI,GAAZ,WAAA;AAAA,MAAA,KAAA;AAAmCE,MAAAA;AAAnC,QAAN,WAAA;AAAA,UAAmDC,IAAnD,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAEA,UAAA,IAAA,GACEI,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KADF,EAAA;AAAA,UAAM;AAAEH,MAAAA,eAAe,GAAGF,KAAK,CAALA,MAAAA,CAAaG;AAAjC,QAAN,IAAA;AAAA,UAAmDC,SAAnD,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,CAAA;;AAEA,UAAME,SAAS,GACb,KAAA,KAAA,CAAA,KAAA,KACCC,KAAK,CAALA,eAAK,CAALA,CAAAA,OAAAA,KAAAA,oBAAAA,GAFH,KACE,CADF;AAIA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,MAAA,KAAK,EAAE,CACL;AACEC,QAAAA,KAAK,EADP,IAAA;AAEEC,QAAAA,MAAM,EAFR,IAAA;AAGEC,QAAAA,YAAY,EAAEZ,IAAI,GAHpB,CAAA;AAIEI,QAAAA;AAJF,OADK,EAOLS,MAAM,CAPD,SAAA,EAAA,SAAA;AADT,KAAA,EAAA,IAAA,CAAA,EAAA,aAaE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,MAAM,EAAZ,IAAA;AAAoB,MAAA,KAAK,EAAzB,SAAA;AAAsC,MAAA,IAAI,EAAEb,IAAI,GAAG;AAAnD,KAAA,CAbF,CADF;AAiBD;;AAjCyC;;gBAAtCF,M,iBACiB,a;;gBADjBA,M,kBAGkB;AACpBE,EAAAA,IAAI,EAAEH;AADc,C;;AAiCxB,MAAMgB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EADL,QAAA;AAETC,IAAAA,UAAU,EAAE;AAFH;AADoB,CAAlB,CAAf;AAOA,eAAeC,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\nimport Icon from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport type { IconSource } from './../Icon';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nclass Avatar extends React.Component<Props> {\n  static displayName = 'Avatar.Icon';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const { icon, size = defaultSize, style, theme, ...rest } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      this.props.color ||\n      (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        <Icon source={icon} color={textColor} size={size * 0.6} />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Avatar);\n"]},"metadata":{},"sourceType":"module"}