{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Text as NativeText } from 'react-native';\nimport { withTheme } from '../../core/theming'; // @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://facebook.github.io/react-native/docs/text.html#props\n */\n\nclass Text extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"root\", void 0);\n  }\n  /**\n   * @internal\n   */\n\n\n  setNativeProps(args) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      style,\n      theme\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"theme\"]);\n\n    return /*#__PURE__*/React.createElement(NativeText, _extends({}, rest, {\n      ref: c => {\n        this.root = c;\n      },\n      style: [_objectSpread(_objectSpread({}, theme.fonts.regular), {}, {\n        color: theme.colors.text,\n        textAlign: 'left'\n      }), style]\n    }));\n  }\n\n}\n\nexport default withTheme(Text);","map":{"version":3,"sources":["Text.tsx"],"names":["Text","React","setNativeProps","render","theme","rest","c","color","textAlign","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAASA,IAAI,IAAb,UAAA,QAAA,cAAA;AACA,SAAA,SAAA,QAAA,oBAAA,C,CAUA;;AAEA;;;;;;AAKA,MAAA,IAAA,SAAmBC,KAAK,CAAxB,SAAA,CAA0C;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;AAAA;AAGxC;;;;;AAGAC,EAAAA,cAAc,CAAA,IAAA,EAAe;AAC3B,WAAO,KAAA,IAAA,IAAa,KAAA,IAAA,CAAA,cAAA,CAApB,IAAoB,CAApB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAA,WAAA,GAAkC,KAAlC,KAAA;AAAA,UAAM;AAAA,MAAA,KAAA;AAASC,MAAAA;AAAT,QAAN,WAAA;AAAA,UAAyBC,IAAzB,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,MAAA,GAAG,EAAGC,CAAD,IAAO;AACV,aAAA,IAAA,GAAA,CAAA;AAHJ,OAAA;AAKE,MAAA,KAAK,EAAE,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAEAF,KAAK,CAALA,KAAAA,CAFA,OAAA,CAAA,EAAA,EAAA,EAAA;AAGHG,QAAAA,KAAK,EAAEH,KAAK,CAALA,MAAAA,CAHJ,IAAA;AAIHI,QAAAA,SAAS,EAAE;AAJR,OAAA,CAAA,EAAA,KAAA;AALT,KAAA,CAAA,CADF;AAgBD;;AA7BuC;;AAgC1C,eAAeC,SAAS,CAAxB,IAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { Text as NativeText, TextStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof NativeText> & {\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n// @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://facebook.github.io/react-native/docs/text.html#props\n */\nclass Text extends React.Component<Props> {\n  private root: NativeText | undefined | null;\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  render() {\n    const { style, theme, ...rest } = this.props;\n\n    return (\n      <NativeText\n        {...rest}\n        ref={(c) => {\n          this.root = c;\n        }}\n        style={[\n          {\n            ...theme.fonts.regular,\n            color: theme.colors.text,\n            textAlign: 'left',\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nexport default withTheme(Text);\n"]},"metadata":{},"sourceType":"module"}