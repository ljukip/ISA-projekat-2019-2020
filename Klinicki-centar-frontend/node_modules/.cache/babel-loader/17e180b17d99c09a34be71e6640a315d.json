{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass MenuItem extends React.Component {\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      testID,\n      titleStyle\n    } = this.props;\n    const disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n    const titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n    const iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n    return /*#__PURE__*/React.createElement(TouchableRipple, {\n      style: [styles.container, style],\n      onPress: onPress,\n      disabled: disabled,\n      testID: testID\n    }, /*#__PURE__*/React.createElement(View, {\n      style: styles.row\n    }, icon ? /*#__PURE__*/React.createElement(View, {\n      style: [styles.item, styles.icon],\n      pointerEvents: \"box-none\"\n    }, /*#__PURE__*/React.createElement(Icon, {\n      source: icon,\n      size: 24,\n      color: iconColor\n    })) : null, /*#__PURE__*/React.createElement(View, {\n      style: [styles.item, styles.content, icon ? styles.widthWithIcon : null],\n      pointerEvents: \"none\"\n    }, /*#__PURE__*/React.createElement(Text, {\n      numberOfLines: 1,\n      style: [styles.title, {\n        color: titleColor\n      }, titleStyle]\n    }, title))));\n  }\n\n}\n\n_defineProperty(MenuItem, \"displayName\", 'Menu.Item');\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default withTheme(MenuItem); // @component-docs ignore-next-line\n\nexport { MenuItem };","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","React","render","titleStyle","disabledColor","color","theme","titleColor","disabled","iconColor","styles","testID","row","icon","minWidth","maxWidth","iconWidth","container","paddingHorizontal","height","justifyContent","flexDirection","width","title","fontSize","item","marginHorizontal","content","widthWithIcon","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text).alpha(0.54).rgb().string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]},"metadata":{},"sourceType":"module"}