{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport { black } from '../../styles/colors';\nimport IconButton from '../IconButton';\n/**\n * A component used to display an action item in the appbar.\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-action-android.png\" />\n *       <figcaption>Android</figcaption>\n *   </figure>\n * </div>\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-action-ios.png\" />\n *       <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nexport default class AppbarAction extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      color: iconColor = color(black).alpha(0.54).rgb().string(),\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\"]);\n\n    return /*#__PURE__*/React.createElement(IconButton, _extends({\n      onPress: onPress,\n      color: iconColor,\n      icon: icon,\n      disabled: disabled,\n      accessibilityLabel: accessibilityLabel,\n      animated: true\n    }, rest));\n  }\n\n}\n\n_defineProperty(AppbarAction, \"displayName\", 'Appbar.Action');\n\n_defineProperty(AppbarAction, \"defaultProps\", {\n  size: 24\n});","map":{"version":3,"sources":["AppbarAction.tsx"],"names":["AppbarAction","React","size","render","color","iconColor","accessibilityLabel","rest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,KAAA,MAAA,OAAA;AAMA,SAAA,KAAA,QAAA,qBAAA;AACA,OAAA,UAAA,MAAA,eAAA;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,eAAe,MAAA,YAAA,SAA2BC,KAAK,CAAhC,SAAA,CAAkD;AAO/DE,EAAAA,MAAM,GAAG;AACP,UAAA,WAAA,GAOI,KAPJ,KAAA;AAAA,UAAM;AACJC,MAAAA,KAAK,EAAEC,SAAS,GAAGD,KAAK,CAALA,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADf,MACeA,EADf;AAAA,MAAA,IAAA;AAAA,MAAA,QAAA;AAAA,MAAA,OAAA;AAKJE,MAAAA;AALI,QAAN,WAAA;AAAA,UAMKC,IANL,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,oBAAA,CAAA,CAAA;;AASA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;AACE,MAAA,OAAO,EADT,OAAA;AAEE,MAAA,KAAK,EAFP,SAAA;AAGE,MAAA,IAAI,EAHN,IAAA;AAIE,MAAA,QAAQ,EAJV,QAAA;AAKE,MAAA,kBAAkB,EALpB,kBAAA;AAME,MAAA,QAAQ,EAAA;AANV,KAAA,EADF,IACE,CAAA,CADF;AAWD;;AA5B8D;;gBAA5CP,Y,iBACE,e;;gBADFA,Y,kBAGG;AACpBE,EAAAA,IAAI,EAAE;AADc,C","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport type {\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport { black } from '../../styles/colors';\nimport IconButton from '../IconButton';\nimport type { IconSource } from '../Icon';\n\ntype Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-action-android.png\" />\n *       <figcaption>Android</figcaption>\n *   </figure>\n * </div>\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-action-ios.png\" />\n *       <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nexport default class AppbarAction extends React.Component<Props> {\n  static displayName = 'Appbar.Action';\n\n  static defaultProps = {\n    size: 24,\n  };\n\n  render() {\n    const {\n      color: iconColor = color(black).alpha(0.54).rgb().string(),\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      ...rest\n    } = this.props;\n\n    return (\n      <IconButton\n        onPress={onPress}\n        color={iconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        {...rest}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}