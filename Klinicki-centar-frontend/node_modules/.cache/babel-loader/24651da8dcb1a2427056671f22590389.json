{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { AccessibilityInfo, Appearance } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\nexport default class Provider extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      reduceMotionEnabled: false,\n      colorScheme: (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || 'light'\n    });\n\n    _defineProperty(this, \"handleAppearanceChange\", preferences => {\n      const {\n        colorScheme\n      } = preferences;\n      this.setState({\n        colorScheme\n      });\n    });\n\n    _defineProperty(this, \"getTheme\", () => {\n      const {\n        theme: providedTheme\n      } = this.props;\n      const {\n        reduceMotionEnabled,\n        colorScheme\n      } = this.state;\n\n      if (providedTheme) {\n        return providedTheme;\n      } else {\n        const theme = colorScheme === 'dark' ? DarkTheme : DefaultTheme;\n        return _objectSpread(_objectSpread({}, theme), {}, {\n          animation: _objectSpread(_objectSpread({}, theme.animation), {}, {\n            scale: reduceMotionEnabled ? 0 : 1\n          })\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateReduceMotionSettingsInfo\", async () => {\n      try {\n        const reduceMotionEnabled = await AccessibilityInfo.isReduceMotionEnabled();\n        this.setState({\n          reduceMotionEnabled\n        });\n      } catch (err) {\n        console.warn(err);\n      }\n    });\n  }\n\n  async componentDidMount() {\n    AccessibilityInfo.addEventListener('reduceMotionChanged', this.updateReduceMotionSettingsInfo);\n    this.updateReduceMotionSettingsInfo();\n    Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(this.handleAppearanceChange);\n  }\n\n  componentWillUnmount() {\n    AccessibilityInfo.removeEventListener('reduceMotionChanged', this.updateReduceMotionSettingsInfo);\n    Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(this.handleAppearanceChange);\n  }\n\n  render() {\n    const {\n      children,\n      settings\n    } = this.props;\n    return /*#__PURE__*/React.createElement(PortalHost, null, /*#__PURE__*/React.createElement(SettingsProvider, {\n      value: settings || {\n        icon: MaterialCommunityIcon\n      }\n    }, /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: this.getTheme()\n    }, children)));\n  }\n\n}","map":{"version":3,"sources":["Provider.tsx"],"names":["Provider","React","reduceMotionEnabled","colorScheme","AccessibilityInfo","Appearance","componentWillUnmount","preferences","theme","providedTheme","animation","scale","console","render","settings","icon","MaterialCommunityIcon"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,iBAAA,EAAA,UAAA,QAAA,cAAA;AACA,SAAA,aAAA,QAAA,WAAA;AACA,SAASA,QAAQ,IAAjB,gBAAA,QAAA,YAAA;AACA,OAAA,qBAAA,MAAA,qCAAA;AACA,OAAA,UAAA,MAAA,iCAAA;AACA,OAAA,YAAA,MAAA,wBAAA;AACA,OAAA,SAAA,MAAA,qBAAA;AAaA,eAAe,MAAA,QAAA,SAAuBC,KAAK,CAA5B,SAAA,CAAqD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAC1D;AACNC,MAAAA,mBAAmB,EADb,KAAA;AAENC,MAAAA,WAAW,EAAE,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAA,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,cAAA,EAAA,KAAgC;AAFvC,KAD0D,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,wBAAA,EAwBhEI,WAD+B,IAE5B;AACH,YAAM;AAAEJ,QAAAA;AAAF,UAAN,WAAA;AACA,WAAA,QAAA,CAAc;AAAEA,QAAAA;AAAF,OAAd;AA3BgE,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EA8B/C,MAAM;AACvB,YAAM;AAAEK,QAAAA,KAAK,EAAEC;AAAT,UAA2B,KAAjC,KAAA;AACA,YAAM;AAAA,QAAA,mBAAA;AAAuBN,QAAAA;AAAvB,UAAuC,KAA7C,KAAA;;AAEA,UAAA,aAAA,EAAmB;AACjB,eAAA,aAAA;AADF,OAAA,MAEO;AACL,cAAMK,KAAK,GAAIL,WAAW,KAAXA,MAAAA,GAAAA,SAAAA,GAAf,YAAA;AAIA,eAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAEEO,UAAAA,SAAS,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACJF,KAAK,CADD,SAAA,CAAA,EAAA,EAAA,EAAA;AAEPG,YAAAA,KAAK,EAAET,mBAAmB,GAAA,CAAA,GAAO;AAF1B,WAAA;AAFX,SAAA,CAAA;AAOD;AAhD+D,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gCAAA,EAmDzB,YAAY;AACnD,UAAI;AACF,cAAMA,mBAAmB,GAAG,MAAME,iBAAiB,CAAnD,qBAAkCA,EAAlC;AAEA,aAAA,QAAA,CAAc;AAAEF,UAAAA;AAAF,SAAd;AAHF,OAAA,CAIE,OAAA,GAAA,EAAY;AACZU,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,GAAAA;AACD;AA1D+D,KAAA,CAAA;AAAA;;AAMlE,QAAA,iBAAA,GAA0B;AACxBR,IAAAA,iBAAiB,CAAjBA,gBAAAA,CAAAA,qBAAAA,EAEE,KAFFA,8BAAAA;AAIA,SAAA,8BAAA;AACAC,IAAAA,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAA,KAAVA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAVA,iBAAAA,CAA8B,KAA9BA,sBAAAA,CAAAA;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBF,IAAAA,iBAAiB,CAAjBA,mBAAAA,CAAAA,qBAAAA,EAEE,KAFFA,8BAAAA;AAIAC,IAAAA,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAA,KAAVA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAVA,oBAAAA,CAAiC,KAAjCA,sBAAAA,CAAAA;AACD;;AAwCDQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,QAAA;AAAYC,MAAAA;AAAZ,QAAyB,KAA/B,KAAA;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,MAAA,KAAK,EAAEA,QAAQ,IAAI;AAAEC,QAAAA,IAAI,EAAEC;AAAR;AAArC,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,MAAA,KAAK,EAAE,KAAA,QAAA;AAAtB,KAAA,EAHN,QAGM,CADF,CADF,CADF;AAOD;;AAvEiE","sourcesContent":["import * as React from 'react';\nimport { AccessibilityInfo, Appearance, ColorSchemeName } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\ntype State = {\n  colorScheme: ColorSchemeName;\n  reduceMotionEnabled: boolean;\n};\n\nexport default class Provider extends React.Component<Props, State> {\n  state = {\n    reduceMotionEnabled: false,\n    colorScheme: Appearance?.getColorScheme() || 'light',\n  };\n\n  async componentDidMount() {\n    AccessibilityInfo.addEventListener(\n      'reduceMotionChanged',\n      this.updateReduceMotionSettingsInfo\n    );\n    this.updateReduceMotionSettingsInfo();\n    Appearance?.addChangeListener(this.handleAppearanceChange);\n  }\n\n  componentWillUnmount() {\n    AccessibilityInfo.removeEventListener(\n      'reduceMotionChanged',\n      this.updateReduceMotionSettingsInfo\n    );\n    Appearance?.removeChangeListener(this.handleAppearanceChange);\n  }\n\n  private handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    this.setState({ colorScheme });\n  };\n\n  private getTheme = () => {\n    const { theme: providedTheme } = this.props;\n    const { reduceMotionEnabled, colorScheme } = this.state;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  private updateReduceMotionSettingsInfo = async () => {\n    try {\n      const reduceMotionEnabled = await AccessibilityInfo.isReduceMotionEnabled();\n\n      this.setState({ reduceMotionEnabled });\n    } catch (err) {\n      console.warn(err);\n    }\n  };\n\n  render() {\n    const { children, settings } = this.props;\n\n    return (\n      <PortalHost>\n        <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n          <ThemeProvider theme={this.getTheme()}>{children}</ThemeProvider>\n        </SettingsProvider>\n      </PortalHost>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}