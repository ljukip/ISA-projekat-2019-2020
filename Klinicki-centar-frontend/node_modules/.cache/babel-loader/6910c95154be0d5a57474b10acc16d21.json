{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass ListItem extends React.Component {\n  renderDescription(descriptionColor, description) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines\n    } = this.props;\n    return typeof description === 'function' ? description({\n      ellipsizeMode: descriptionEllipsizeMode,\n      color: descriptionColor,\n      fontSize: styles.description.fontSize\n    }) : /*#__PURE__*/React.createElement(Text, {\n      numberOfLines: descriptionNumberOfLines,\n      ellipsizeMode: descriptionEllipsizeMode,\n      style: [styles.description, {\n        color: descriptionColor\n      }, descriptionStyle]\n    }, description);\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"titleEllipsizeMode\"]);\n\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n    return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n      style: [styles.container, style],\n      onPress: onPress\n    }), /*#__PURE__*/React.createElement(View, {\n      style: styles.row\n    }, left ? left({\n      color: descriptionColor,\n      style: description ? styles.iconMarginLeft : _objectSpread(_objectSpread({}, styles.iconMarginLeft), styles.marginVerticalNone)\n    }) : null, /*#__PURE__*/React.createElement(View, {\n      style: [styles.item, styles.content]\n    }, /*#__PURE__*/React.createElement(Text, {\n      ellipsizeMode: titleEllipsizeMode,\n      numberOfLines: titleNumberOfLines,\n      style: [styles.title, {\n        color: titleColor\n      }, titleStyle]\n    }, title), description ? this.renderDescription(descriptionColor, description) : null), right ? right({\n      color: descriptionColor,\n      style: description ? styles.iconMarginRight : _objectSpread(_objectSpread({}, styles.iconMarginRight), styles.marginVerticalNone)\n    }) : null));\n  }\n\n}\n\n_defineProperty(ListItem, \"displayName\", 'List.Item');\n\n_defineProperty(ListItem, \"defaultProps\", {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","React","titleNumberOfLines","descriptionNumberOfLines","renderDescription","description","ellipsizeMode","color","fontSize","styles","descriptionColor","render","titleEllipsizeMode","rest","titleColor","theme","onPress","row","left","style","right","container","padding","flexDirection","title","marginVerticalNone","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","item","paddingLeft","content","flex","justifyContent","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}