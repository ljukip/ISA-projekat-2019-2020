{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\n\nvar PredictionsClass =\n/** @class */\nfunction () {\n  /**\r\n   * Initialize Predictions with AWS configurations\r\n   * @param {PredictionsOptions} options - Configuration object for Predictions\r\n   */\n  function PredictionsClass(options) {\n    this._options = options;\n    this._convertPluggables = [];\n    this._identifyPluggables = [];\n    this._interpretPluggables = [];\n    Amplify.register(this);\n  }\n\n  PredictionsClass.prototype.getModuleName = function () {\n    return 'Predictions';\n  };\n  /**\r\n   * add plugin/pluggable into Predictions category\r\n   * @param {Object} pluggable - an instance of the plugin/pluggable\r\n   **/\n\n\n  PredictionsClass.prototype.addPluggable = function (pluggable) {\n    if (this.getPluggable(pluggable.getProviderName())) {\n      throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n    }\n\n    var pluggableAdded = false;\n\n    if (this.implementsConvertPluggable(pluggable)) {\n      this._convertPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsIdentifyPluggable(pluggable)) {\n      this._identifyPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsInterpretPluggable(pluggable)) {\n      this._interpretPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (pluggableAdded) {\n      this.configurePluggable(pluggable);\n    }\n  };\n  /**\r\n   * Get the plugin object\r\n   * @param providerName - the name of the plugin\r\n   */\n\n\n  PredictionsClass.prototype.getPluggable = function (providerName) {\n    var pluggable = this.getAllProviders().find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName=>', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\r\n   * Remove the plugin object\r\n   * @param providerName - the name of the plugin\r\n   */\n\n\n  PredictionsClass.prototype.removePluggable = function (providerName) {\n    this._convertPluggables = this._convertPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\r\n   * To make both top level providers and category level providers work with same interface and configuration\r\n   * this method duplicates Predictions config into parent level config (for top level provider) and\r\n   * category level config (such as convert, identify etc) and pass both to each provider.\r\n   */\n\n\n  PredictionsClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var predictionsConfig = options ? options.predictions || options : {};\n    predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n    this._options = Object.assign({}, this._options, predictionsConfig);\n    logger.debug('configure Predictions', this._options);\n    this.getAllProviders().forEach(function (pluggable) {\n      return _this.configurePluggable(pluggable);\n    });\n  };\n\n  PredictionsClass.prototype.interpret = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n    return pluggableToExecute.interpret(input);\n  };\n\n  PredictionsClass.prototype.convert = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n    return pluggableToExecute.convert(input);\n  };\n\n  PredictionsClass.prototype.identify = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n    return pluggableToExecute.identify(input);\n  }; // tslint:disable-next-line: max-line-length\n\n\n  PredictionsClass.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n    // Give preference to provider name first since it is more specific to this call, even if\n    // there is only one provider configured to error out if the name provided is not the one matched.\n    if (providerOptions && providerOptions.providerName) {\n      return __spread(pluggables).find(function (pluggable) {\n        return pluggable.getProviderName() === providerOptions.providerName;\n      });\n    } else {\n      if (pluggables.length === 1) {\n        return pluggables[0];\n      } else {\n        throw new Error('More than one or no providers are configured, ' + 'Either specify a provider name or configure exactly one provider');\n      }\n    }\n  };\n\n  PredictionsClass.prototype.getAllProviders = function () {\n    return __spread(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n  };\n\n  PredictionsClass.prototype.configurePluggable = function (pluggable) {\n    var categoryConfig = Object.assign({}, this._options['predictions'], // Parent predictions config for the top level provider\n    this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n    );\n    pluggable.configure(categoryConfig);\n  };\n\n  PredictionsClass.prototype.implementsConvertPluggable = function (obj) {\n    return obj && typeof obj.convert === 'function';\n  };\n\n  PredictionsClass.prototype.implementsIdentifyPluggable = function (obj) {\n    return obj && typeof obj.identify === 'function';\n  };\n\n  PredictionsClass.prototype.implementsInterpretPluggable = function (obj) {\n    return obj && typeof obj.interpret === 'function';\n  };\n\n  return PredictionsClass;\n}();\n\nexport { PredictionsClass };\nexport var Predictions = new PredictionsClass({});","map":{"version":3,"sources":["../src/Predictions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spread = (this && this.__spread) || function () {\r\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\r\nvar logger = new Logger('Predictions');\r\nvar PredictionsClass = /** @class */ (function () {\r\n    /**\r\n     * Initialize Predictions with AWS configurations\r\n     * @param {PredictionsOptions} options - Configuration object for Predictions\r\n     */\r\n    function PredictionsClass(options) {\r\n        this._options = options;\r\n        this._convertPluggables = [];\r\n        this._identifyPluggables = [];\r\n        this._interpretPluggables = [];\r\n        Amplify.register(this);\r\n    }\r\n    PredictionsClass.prototype.getModuleName = function () {\r\n        return 'Predictions';\r\n    };\r\n    /**\r\n     * add plugin/pluggable into Predictions category\r\n     * @param {Object} pluggable - an instance of the plugin/pluggable\r\n     **/\r\n    PredictionsClass.prototype.addPluggable = function (pluggable) {\r\n        if (this.getPluggable(pluggable.getProviderName())) {\r\n            throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\r\n        }\r\n        var pluggableAdded = false;\r\n        if (this.implementsConvertPluggable(pluggable)) {\r\n            this._convertPluggables.push(pluggable);\r\n            pluggableAdded = true;\r\n        }\r\n        if (this.implementsIdentifyPluggable(pluggable)) {\r\n            this._identifyPluggables.push(pluggable);\r\n            pluggableAdded = true;\r\n        }\r\n        if (this.implementsInterpretPluggable(pluggable)) {\r\n            this._interpretPluggables.push(pluggable);\r\n            pluggableAdded = true;\r\n        }\r\n        if (pluggableAdded) {\r\n            this.configurePluggable(pluggable);\r\n        }\r\n    };\r\n    /**\r\n     * Get the plugin object\r\n     * @param providerName - the name of the plugin\r\n     */\r\n    PredictionsClass.prototype.getPluggable = function (providerName) {\r\n        var pluggable = this.getAllProviders().find(function (pluggable) { return pluggable.getProviderName() === providerName; });\r\n        if (pluggable === undefined) {\r\n            logger.debug('No plugin found with providerName=>', providerName);\r\n            return null;\r\n        }\r\n        else\r\n            return pluggable;\r\n    };\r\n    /**\r\n     * Remove the plugin object\r\n     * @param providerName - the name of the plugin\r\n     */\r\n    PredictionsClass.prototype.removePluggable = function (providerName) {\r\n        this._convertPluggables = this._convertPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\r\n        this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\r\n        this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\r\n        return;\r\n    };\r\n    /**\r\n     * To make both top level providers and category level providers work with same interface and configuration\r\n     * this method duplicates Predictions config into parent level config (for top level provider) and\r\n     * category level config (such as convert, identify etc) and pass both to each provider.\r\n     */\r\n    PredictionsClass.prototype.configure = function (options) {\r\n        var _this = this;\r\n        var predictionsConfig = options ? options.predictions || options : {};\r\n        predictionsConfig = __assign(__assign({}, predictionsConfig), options);\r\n        this._options = Object.assign({}, this._options, predictionsConfig);\r\n        logger.debug('configure Predictions', this._options);\r\n        this.getAllProviders().forEach(function (pluggable) {\r\n            return _this.configurePluggable(pluggable);\r\n        });\r\n    };\r\n    PredictionsClass.prototype.interpret = function (input, options) {\r\n        var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\r\n        return pluggableToExecute.interpret(input);\r\n    };\r\n    PredictionsClass.prototype.convert = function (input, options) {\r\n        var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\r\n        return pluggableToExecute.convert(input);\r\n    };\r\n    PredictionsClass.prototype.identify = function (input, options) {\r\n        var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\r\n        return pluggableToExecute.identify(input);\r\n    };\r\n    // tslint:disable-next-line: max-line-length\r\n    PredictionsClass.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\r\n        // Give preference to provider name first since it is more specific to this call, even if\r\n        // there is only one provider configured to error out if the name provided is not the one matched.\r\n        if (providerOptions && providerOptions.providerName) {\r\n            return __spread(pluggables).find(function (pluggable) {\r\n                return pluggable.getProviderName() === providerOptions.providerName;\r\n            });\r\n        }\r\n        else {\r\n            if (pluggables.length === 1) {\r\n                return pluggables[0];\r\n            }\r\n            else {\r\n                throw new Error('More than one or no providers are configured, ' +\r\n                    'Either specify a provider name or configure exactly one provider');\r\n            }\r\n        }\r\n    };\r\n    PredictionsClass.prototype.getAllProviders = function () {\r\n        return __spread(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\r\n    };\r\n    PredictionsClass.prototype.configurePluggable = function (pluggable) {\r\n        var categoryConfig = Object.assign({}, this._options['predictions'], // Parent predictions config for the top level provider\r\n        this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\r\n        );\r\n        pluggable.configure(categoryConfig);\r\n    };\r\n    PredictionsClass.prototype.implementsConvertPluggable = function (obj) {\r\n        return obj && typeof obj.convert === 'function';\r\n    };\r\n    PredictionsClass.prototype.implementsIdentifyPluggable = function (obj) {\r\n        return obj && typeof obj.identify === 'function';\r\n    };\r\n    PredictionsClass.prototype.implementsInterpretPluggable = function (obj) {\r\n        return obj && typeof obj.interpret === 'function';\r\n    };\r\n    return PredictionsClass;\r\n}());\r\nexport { PredictionsClass };\r\nexport var Predictions = new PredictionsClass({});\r\n//# sourceMappingURL=Predictions.js.map"]},"metadata":{},"sourceType":"module"}