{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\nimport { SIGNATURE_HEADER } from \"./constants\";\n/**\r\n * @internal\r\n */\n\nexport function getCanonicalQuery(_a) {\n  var e_1, _b;\n\n  var _c = _a.query,\n      query = _c === void 0 ? {} : _c;\n  var keys = [];\n  var serialized = {};\n\n  var _loop_1 = function (key) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      return \"continue\";\n    }\n\n    keys.push(key);\n    var value = query[key];\n\n    if (typeof value === \"string\") {\n      serialized[key] = escapeUri(key) + \"=\" + escapeUri(value);\n    } else if (Array.isArray(value)) {\n      serialized[key] = value.slice(0).sort().reduce(function (encoded, value) {\n        return encoded.concat([escapeUri(key) + \"=\" + escapeUri(value)]);\n      }, []).join(\"&\");\n    }\n  };\n\n  try {\n    for (var _d = __values(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {\n      var key = _e.value;\n\n      _loop_1(key);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return keys.map(function (key) {\n    return serialized[key];\n  }).filter(function (serialized) {\n    return serialized;\n  }) // omit any falsy values\n  .join(\"&\");\n}","map":{"version":3,"sources":["../../src/getCanonicalQuery.ts"],"names":[],"mappings":";AACA,SAAS,SAAT,QAA0B,0BAA1B;AAEA,SAAS,gBAAT,QAAiC,aAAjC;AAEA;;;;AAGA,OAAM,SAAU,iBAAV,CAA4B,EAA5B,EAAuD;;;MAAzB,EAAA,GAAA,EAAA,CAAA,K;MAAA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,E;AAC5C,MAAM,IAAI,GAAkB,EAA5B;AACA,MAAM,UAAU,GAA8B,EAA9C;;0BACW,G,EAAG;AACZ,QAAI,GAAG,CAAC,WAAJ,OAAsB,gBAA1B,EAA4C;;AAE3C;;AAED,IAAA,IAAI,CAAC,IAAL,CAAU,GAAV;AACA,QAAM,KAAK,GAAG,KAAK,CAAC,GAAD,CAAnB;;AACA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,MAAA,UAAU,CAAC,GAAD,CAAV,GAAqB,SAAS,CAAC,GAAD,CAAT,GAAc,GAAd,GAAkB,SAAS,CAAC,KAAD,CAAhD;AACD,KAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AAC/B,MAAA,UAAU,CAAC,GAAD,CAAV,GAAkB,KAAK,CACpB,KADe,CACT,CADS,EAEf,IAFe,GAGf,MAHe,CAId,UAAC,OAAD,EAAyB,KAAzB,EAAsC;AAAK,eAAA,OAAO,CAAC,MAAR,CAAe,CAAI,SAAS,CAAC,GAAD,CAAT,GAAc,GAAd,GAAkB,SAAS,CAA9C,KAA8C,CAA/B,CAAf,CAAA;AAAyD,OAJtF,EAKd,EALc,EAOf,IAPe,CAOV,GAPU,CAAlB;AAQD;;;;AAlBH,SAAkB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,IAAnB,EAAA,CAAA,EAAyB,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA2C,CAAA,EAAA,CAAA,IAA3C,EAA2C,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA2C;AAAtC,UAAM,GAAG,GAAA,EAAA,CAAA,KAAT;;cAAM,G;AAmBV;;;;;;;;;;;;;AAED,SAAO,IAAI,CACR,GADI,CACA,UAAC,GAAD,EAAI;AAAK,WAAA,UAAU,CAAV,GAAU,CAAV;AAAe,GADxB,EAEJ,MAFI,CAEG,UAAC,UAAD,EAAW;AAAK,WAAA,UAAA;AAAU,GAF7B,EAE+B;AAF/B,GAGJ,IAHI,CAGC,GAHD,CAAP;AAID","sourceRoot":"","sourcesContent":["import { __values } from \"tslib\";\r\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\r\nimport { SIGNATURE_HEADER } from \"./constants\";\r\n/**\r\n * @internal\r\n */\r\nexport function getCanonicalQuery(_a) {\r\n    var e_1, _b;\r\n    var _c = _a.query, query = _c === void 0 ? {} : _c;\r\n    var keys = [];\r\n    var serialized = {};\r\n    var _loop_1 = function (key) {\r\n        if (key.toLowerCase() === SIGNATURE_HEADER) {\r\n            return \"continue\";\r\n        }\r\n        keys.push(key);\r\n        var value = query[key];\r\n        if (typeof value === \"string\") {\r\n            serialized[key] = escapeUri(key) + \"=\" + escapeUri(value);\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            serialized[key] = value\r\n                .slice(0)\r\n                .sort()\r\n                .reduce(function (encoded, value) { return encoded.concat([escapeUri(key) + \"=\" + escapeUri(value)]); }, [])\r\n                .join(\"&\");\r\n        }\r\n    };\r\n    try {\r\n        for (var _d = __values(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {\r\n            var key = _e.value;\r\n            _loop_1(key);\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n    return keys\r\n        .map(function (key) { return serialized[key]; })\r\n        .filter(function (serialized) { return serialized; }) // omit any falsy values\r\n        .join(\"&\");\r\n}\r\n//# sourceMappingURL=getCanonicalQuery.js.map"]},"metadata":{},"sourceType":"module"}