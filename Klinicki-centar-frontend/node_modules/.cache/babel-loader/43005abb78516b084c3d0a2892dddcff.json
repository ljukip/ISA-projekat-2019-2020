{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nconst defaultSize = 64;\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\n\nclass AvatarText extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      label,\n      size = defaultSize,\n      style,\n      theme,\n      labelStyle,\n      color\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"label\", \"size\", \"style\", \"theme\", \"labelStyle\", \"color\"]);\n\n    const _ref = StyleSheet.flatten(style) || {},\n          {\n      backgroundColor = theme.colors.primary\n    } = _ref,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n\n    const textColor = color || (Color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n    return /*#__PURE__*/React.createElement(View, _extends({\n      style: [{\n        width: size,\n        height: size,\n        borderRadius: size / 2,\n        backgroundColor\n      }, styles.container, restStyle]\n    }, rest), /*#__PURE__*/React.createElement(Text, {\n      style: [styles.text, {\n        color: textColor,\n        fontSize: size / 2,\n        lineHeight: size\n      }, labelStyle],\n      numberOfLines: 1\n    }, label));\n  }\n\n}\n\n_defineProperty(AvatarText, \"displayName\", 'Avatar.Text');\n\n_defineProperty(AvatarText, \"defaultProps\", {\n  size: defaultSize\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default withTheme(AvatarText);","map":{"version":3,"sources":["AvatarText.tsx"],"names":["defaultSize","AvatarText","React","size","render","color","rest","backgroundColor","theme","primary","restStyle","StyleSheet","textColor","Color","width","height","borderRadius","styles","fontSize","lineHeight","container","justifyContent","alignItems","text","textAlign","textAlignVertical","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,UAAA,QAAA,cAAA;AAOA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA,MAAA,oBAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AACA,SAAA,KAAA,QAAA,qBAAA;AAEA,MAAMA,WAAW,GAAjB,EAAA;AA6BA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAA,UAAA,SAAyBE,KAAK,CAA9B,SAAA,CAAgD;AAO9CE,EAAAA,MAAM,GAAG;AACP,UAAA,WAAA,GAQI,KARJ,KAAA;AAAA,UAAM;AAAA,MAAA,KAAA;AAEJD,MAAAA,IAAI,GAFA,WAAA;AAAA,MAAA,KAAA;AAAA,MAAA,KAAA;AAAA,MAAA,UAAA;AAMJE,MAAAA;AANI,QAAN,WAAA;AAAA,UAOKC,IAPL,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,OAAA,EAAA,YAAA,EAAA,OAAA,CAAA,CAAA;;AAUA,UAAA,IAAA,GACEK,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KADF,EAAA;AAAA,UAAM;AAAEJ,MAAAA,eAAe,GAAGC,KAAK,CAALA,MAAAA,CAAaC;AAAjC,QAAN,IAAA;AAAA,UAAmDC,SAAnD,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,CAAA;;AAEA,UAAME,SAAS,GACbP,KAAK,KACJQ,KAAK,CAALA,eAAK,CAALA,CAAAA,OAAAA,KAAAA,oBAAAA,GAFH,KACO,CADP;AAIA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,MAAA,KAAK,EAAE,CACL;AACEC,QAAAA,KAAK,EADP,IAAA;AAEEC,QAAAA,MAAM,EAFR,IAAA;AAGEC,QAAAA,YAAY,EAAEb,IAAI,GAHpB,CAAA;AAIEI,QAAAA;AAJF,OADK,EAOLU,MAAM,CAPD,SAAA,EAAA,SAAA;AADT,KAAA,EAAA,IAAA,CAAA,EAAA,aAaE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,KAAK,EAAE,CACLA,MAAM,CADD,IAAA,EAEL;AACEZ,QAAAA,KAAK,EADP,SAAA;AAEEa,QAAAA,QAAQ,EAAEf,IAAI,GAFhB,CAAA;AAGEgB,QAAAA,UAAU,EAAEhB;AAHd,OAFK,EADT,UACS,CADT;AAUE,MAAA,aAAa,EAAE;AAVjB,KAAA,EAdJ,KAcI,CAbF,CADF;AA8BD;;AAtD6C;;gBAA1CF,U,iBACiB,a;;gBADjBA,U,kBAGkB;AACpBE,EAAAA,IAAI,EAAEH;AADc,C;;AAsDxB,MAAMiB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EADL,QAAA;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAK/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EADL,QAAA;AAEJC,IAAAA,iBAAiB,EAAE;AAFf;AALyB,CAAlB,CAAf;AAWA,eAAeC,SAAS,CAAxB,UAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport Color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nclass AvatarText extends React.Component<Props> {\n  static displayName = 'Avatar.Text';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const {\n      label,\n      size = defaultSize,\n      style,\n      theme,\n      labelStyle,\n      color,\n      ...rest\n    } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      color ||\n      (Color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n        {...rest}\n      >\n        <Text\n          style={[\n            styles.text,\n            {\n              color: textColor,\n              fontSize: size / 2,\n              lineHeight: size,\n            },\n            labelStyle,\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]},"metadata":{},"sourceType":"module"}