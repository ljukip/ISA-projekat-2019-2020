{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet, View, I18nManager } from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst {\n  isRTL\n} = I18nManager;\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass ProgressBar extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      width: 0,\n      timer: new Animated.Value(0),\n      fade: new Animated.Value(0)\n    });\n\n    _defineProperty(this, \"indeterminateAnimation\", null);\n\n    _defineProperty(this, \"onLayout\", event => {\n      const {\n        visible\n      } = this.props;\n      const {\n        width: previousWidth\n      } = this.state;\n      this.setState({\n        width: event.nativeEvent.layout.width\n      }, () => {\n        // Start animation the very first time when previously the width was unclear\n        if (visible && previousWidth === 0) {\n          this.startAnimation();\n        }\n      });\n    });\n\n    _defineProperty(this, \"startAnimation\", () => {\n      const {\n        indeterminate,\n        progress,\n        theme: {\n          animation: {\n            scale\n          }\n        }\n      } = this.props;\n      const {\n        fade,\n        timer\n      } = this.state; // Show progress bar\n\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 1,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start(); // Animate progress bar\n\n      if (indeterminate) {\n        if (!this.indeterminateAnimation) {\n          this.indeterminateAnimation = Animated.timing(timer, {\n            duration: INDETERMINATE_DURATION,\n            toValue: 1,\n            // Animated.loop does not work if useNativeDriver is true on web\n            useNativeDriver: Platform.OS !== 'web',\n            isInteraction: false\n          });\n        } // Reset timer to the beginning\n\n\n        timer.setValue(0);\n        Animated.loop(this.indeterminateAnimation).start();\n      } else {\n        Animated.timing(timer, {\n          duration: 200 * scale,\n          toValue: progress ? progress : 0,\n          useNativeDriver: true,\n          isInteraction: false\n        }).start();\n      }\n    });\n\n    _defineProperty(this, \"stopAnimation\", () => {\n      const {\n        fade\n      } = this.state;\n      const {\n        scale\n      } = this.props.theme.animation; // Stop indeterminate animation\n\n      if (this.indeterminateAnimation) {\n        this.indeterminateAnimation.stop();\n      }\n\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      visible,\n      progress\n    } = this.props;\n\n    if (progress !== prevProps.progress || visible !== prevProps.visible) {\n      if (visible) {\n        this.startAnimation();\n      } else {\n        this.stopAnimation();\n      }\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      color,\n      indeterminate,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      progress,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"color\", \"indeterminate\", \"style\", \"theme\", \"progress\", \"visible\"]);\n\n    const {\n      fade,\n      timer,\n      width\n    } = this.state;\n    const tintColor = color || theme.colors.primary;\n    const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n    return /*#__PURE__*/React.createElement(View, _extends({\n      onLayout: this.onLayout\n    }, rest), /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.container, {\n        backgroundColor: trackTintColor,\n        opacity: fade\n      }, style]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.progressBar, {\n        backgroundColor: tintColor,\n        width,\n        transform: [{\n          translateX: timer.interpolate(indeterminate ? {\n            inputRange: [0, 0.5, 1],\n            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n          } : {\n            inputRange: [0, 1],\n            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n          })\n        }, {\n          // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n          scaleX: timer.interpolate(indeterminate ? {\n            inputRange: [0, 0.5, 1],\n            outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n          } : {\n            inputRange: [0, 1],\n            outputRange: [0.0001, 1]\n          })\n        }]\n      }]\n    })));\n  }\n\n}\n\n_defineProperty(ProgressBar, \"defaultProps\", {\n  visible: true,\n  progress: 0\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withTheme(ProgressBar);","map":{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","ProgressBar","React","visible","progress","width","timer","Animated","fade","componentDidUpdate","prevProps","event","previousWidth","theme","animation","scale","duration","toValue","useNativeDriver","isInteraction","Platform","render","rest","tintColor","color","trackTintColor","setColor","onLayout","styles","backgroundColor","opacity","transform","translateX","indeterminate","inputRange","outputRange","scaleX","container","height","overflow","progressBar","flex","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  width: number;\n  fade: Animated.Value;\n  timer: Animated.Value;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ProgressBar extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    progress: 0,\n  };\n\n  state = {\n    width: 0,\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(0),\n  };\n\n  indeterminateAnimation: Animated.CompositeAnimation | null = null;\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible, progress } = this.props;\n\n    if (progress !== prevProps.progress || visible !== prevProps.visible) {\n      if (visible) {\n        this.startAnimation();\n      } else {\n        this.stopAnimation();\n      }\n    }\n  }\n\n  private onLayout = (event: LayoutChangeEvent) => {\n    const { visible } = this.props;\n    const { width: previousWidth } = this.state;\n\n    this.setState({ width: event.nativeEvent.layout.width }, () => {\n      // Start animation the very first time when previously the width was unclear\n      if (visible && previousWidth === 0) {\n        this.startAnimation();\n      }\n    });\n  };\n\n  private startAnimation = () => {\n    const {\n      indeterminate,\n      progress,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n    const { fade, timer } = this.state;\n\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!this.indeterminateAnimation) {\n        this.indeterminateAnimation = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(this.indeterminateAnimation).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  };\n\n  private stopAnimation = () => {\n    const { fade } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    // Stop indeterminate animation\n    if (this.indeterminateAnimation) {\n      this.indeterminateAnimation.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      color,\n      indeterminate,\n      style,\n      theme,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      progress,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      visible,\n      ...rest\n    } = this.props;\n    const { fade, timer, width } = this.state;\n    const tintColor = color || theme.colors.primary;\n    const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n\n    return (\n      <View onLayout={this.onLayout} {...rest}>\n        <Animated.View\n          style={[\n            styles.container,\n            { backgroundColor: trackTintColor, opacity: fade },\n            style,\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                backgroundColor: tintColor,\n                width,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}