{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport DialogTitle from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <View>\n *       <Button onPress={showDialog}>Show Dialog</Button>\n *       <Portal>\n *         <Dialog visible={visible} onDismiss={hideDialog}>\n *           <Dialog.Title>Alert</Dialog.Title>\n *           <Dialog.Content>\n *             <Paragraph>This is simple dialog</Paragraph>\n *           </Dialog.Content>\n *           <Dialog.Actions>\n *             <Button onPress={hideDialog}>Done</Button>\n *           </Dialog.Actions>\n *         </Dialog>\n *       </Portal>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nclass Dialog extends React.Component {\n  // @component ./DialogContent.tsx\n  // @component ./DialogActions.tsx\n  // @component ./DialogTitle.tsx\n  // @component ./DialogScrollArea.tsx\n  render() {\n    const {\n      children,\n      dismissable,\n      onDismiss,\n      visible,\n      style,\n      theme\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Modal, {\n      dismissable: dismissable,\n      onDismiss: onDismiss,\n      visible: visible,\n      contentContainerStyle: [{\n        borderRadius: theme.roundness,\n        backgroundColor: theme.colors.surface\n      }, styles.container, style]\n    }, React.Children.toArray(children).filter(child => child != null && typeof child !== 'boolean').map((child, i) => {\n      if (i === 0 && /*#__PURE__*/React.isValidElement(child) && child.type === DialogContent) {\n        // Dialog content is the first item, so we add a top padding\n        return /*#__PURE__*/React.cloneElement(child, {\n          style: [{\n            paddingTop: 24\n          }, child.props.style]\n        });\n      }\n\n      return child;\n    }));\n  }\n\n}\n\n_defineProperty(Dialog, \"Content\", DialogContent);\n\n_defineProperty(Dialog, \"Actions\", DialogActions);\n\n_defineProperty(Dialog, \"Title\", DialogTitle);\n\n_defineProperty(Dialog, \"ScrollArea\", DialogScrollArea);\n\n_defineProperty(Dialog, \"defaultProps\", {\n  dismissable: true,\n  visible: false\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"sources":["Dialog.tsx"],"names":["Dialog","React","DialogContent","DialogActions","DialogTitle","DialogScrollArea","dismissable","visible","render","theme","borderRadius","backgroundColor","surface","styles","child","i","style","paddingTop","container","marginVertical","Platform","marginHorizontal","elevation","justifyContent","withTheme"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,QAAA,QAAA,cAAA;AACA,OAAA,KAAA,MAAA,UAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AACA,OAAA,aAAA,MAAA,iBAAA,C,CACA;;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,gBAAA,MAAA,oBAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,MAAA,MAAA,SAAqBC,KAAK,CAA1B,SAAA,CAA4C;AAC1C;AAEA;AAEA;AAEA;AAQAO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,QAAA;AAAA,MAAA,WAAA;AAAA,MAAA,SAAA;AAAA,MAAA,OAAA;AAAA,MAAA,KAAA;AAMJC,MAAAA;AANI,QAOF,KAPJ,KAAA;AASA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,WAAW,EADb,WAAA;AAEE,MAAA,SAAS,EAFX,SAAA;AAGE,MAAA,OAAO,EAHT,OAAA;AAIE,MAAA,qBAAqB,EAAE,CACrB;AACEC,QAAAA,YAAY,EAAED,KAAK,CADrB,SAAA;AAEEE,QAAAA,eAAe,EAAEF,KAAK,CAALA,MAAAA,CAAaG;AAFhC,OADqB,EAKrBC,MAAM,CALe,SAAA,EAAA,KAAA;AAJzB,KAAA,EAaG,KAAK,CAAL,QAAA,CAAA,OAAA,CAAA,QAAA,EAAA,MAAA,CACUC,KAAD,IAAWA,KAAK,IAALA,IAAAA,IAAiB,OAAA,KAAA,KADrC,SAAA,EAAA,GAAA,CAEM,CAAA,KAAA,EAAA,CAAA,KAAc;AACjB,UACEC,CAAC,KAADA,CAAAA,IAAAA,aACAd,KAAK,CAALA,cAAAA,CADAc,KACAd,CADAc,IAEAD,KAAK,CAALA,IAAAA,KAHF,aAAA,EAIE;AACA;AACA,eAAA,aAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BE,UAAAA,KAAK,EAAE,CAAC;AAAEC,YAAAA,UAAU,EAAE;AAAd,WAAD,EAAqBH,KAAK,CAALA,KAAAA,CAArB,KAAA;AADwB,SAA1B,CAAP;AAGD;;AAED,aAAA,KAAA;AA5BR,KAcK,CAbH,CADF;AAgCD;;AAzDyC;;gBAAtCd,M,aAEaE,a;;gBAFbF,M,aAIaG,a;;gBAJbH,M,WAMWI,W;;gBANXJ,M,gBAQgBK,gB;;gBARhBL,M,kBAUkB;AACpBM,EAAAA,WAAW,EADS,IAAA;AAEpBC,EAAAA,OAAO,EAAE;AAFW,C;;AAkDxB,MAAMM,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AACT;;;;;;;AAOAC,IAAAA,cAAc,EAAEC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,GAAAA,EAAAA,GARP,CAAA;AASTC,IAAAA,gBAAgB,EATP,EAAA;AAUTC,IAAAA,SAAS,EAVA,EAAA;AAWTC,IAAAA,cAAc,EAAE;AAXP;AADoB,CAAlB,CAAf;AAgBA,eAAeC,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <View>\n *       <Button onPress={showDialog}>Show Dialog</Button>\n *       <Portal>\n *         <Dialog visible={visible} onDismiss={hideDialog}>\n *           <Dialog.Title>Alert</Dialog.Title>\n *           <Dialog.Content>\n *             <Paragraph>This is simple dialog</Paragraph>\n *           </Dialog.Content>\n *           <Dialog.Actions>\n *             <Button onPress={hideDialog}>Done</Button>\n *           </Dialog.Actions>\n *         </Dialog>\n *       </Portal>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Dialog extends React.Component<Props> {\n  // @component ./DialogContent.tsx\n  static Content = DialogContent;\n  // @component ./DialogActions.tsx\n  static Actions = DialogActions;\n  // @component ./DialogTitle.tsx\n  static Title = DialogTitle;\n  // @component ./DialogScrollArea.tsx\n  static ScrollArea = DialogScrollArea;\n\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  render() {\n    const {\n      children,\n      dismissable,\n      onDismiss,\n      visible,\n      style,\n      theme,\n    } = this.props;\n\n    return (\n      <Modal\n        dismissable={dismissable}\n        onDismiss={onDismiss}\n        visible={visible}\n        contentContainerStyle={[\n          {\n            borderRadius: theme.roundness,\n            backgroundColor: theme.colors.surface,\n          },\n          styles.container,\n          style,\n        ]}\n      >\n        {React.Children.toArray(children)\n          .filter((child) => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              i === 0 &&\n              React.isValidElement(child) &&\n              child.type === DialogContent\n            ) {\n              // Dialog content is the first item, so we add a top padding\n              return React.cloneElement(child, {\n                style: [{ paddingTop: 24 }, child.props.style],\n              });\n            }\n\n            return child;\n          })}\n      </Modal>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: 24,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module"}