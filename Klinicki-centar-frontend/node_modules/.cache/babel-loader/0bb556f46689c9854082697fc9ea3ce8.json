{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport TouchableRipple from './TouchableRipple';\nimport Icon from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst IconButton = _ref => {\n  let {\n    icon,\n    color: customColor,\n    size = 24,\n    accessibilityLabel,\n    disabled,\n    onPress,\n    animated = false,\n    theme,\n    style\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"animated\", \"theme\", \"style\"]);\n\n  const iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, {\n      width: buttonSize,\n      height: buttonSize,\n      borderRadius: buttonSize / 2\n    }, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled\n    },\n    disabled: disabled,\n    hitSlop: // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n    TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n};\n\nconst styles = StyleSheet.create({\n  // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default withTheme(IconButton);","map":{"version":3,"sources":["IconButton.tsx"],"names":["IconButton","color","size","animated","style","rest","iconColor","theme","rippleColor","IconComponent","buttonSize","styles","width","height","borderRadius","disabled","TouchableRipple","top","left","bottom","right","container","alignItems","justifyContent","overflow","margin","opacity","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  // @ts-ignore - this should be fixed in react-theme-providersince withTheme() is not forwarding static property types\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"module"}