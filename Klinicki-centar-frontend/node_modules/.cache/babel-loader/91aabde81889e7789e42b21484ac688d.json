{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming'; // From https://material.io/design/motion/speed.html#duration\n\nconst ANIMATION_DURATION = 100;\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nclass CheckboxAndroid extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      scaleAnim: new Animated.Value(1)\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    const {\n      animation\n    } = this.props.theme;\n    Animated.sequence([Animated.timing(this.state.scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n      useNativeDriver: false\n    }), Animated.timing(this.state.scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * animation.scale : ANIMATION_DURATION * animation.scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      status,\n      disabled,\n      onPress,\n      theme\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0]\n    });\n    const icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n    return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: onPress,\n      disabled: disabled,\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: \"button\",\n      accessibilityRole: \"button\",\n      accessibilityState: {\n        disabled\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      style: {\n        transform: [{\n          scale: this.state.scaleAnim\n        }]\n      }\n    }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: icon,\n      size: 24,\n      color: checkboxColor,\n      direction: \"ltr\"\n    }), /*#__PURE__*/React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.fillContainer]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.fill, {\n        borderColor: checkboxColor\n      }, {\n        borderWidth\n      }]\n    }))));\n  }\n\n}\n\n_defineProperty(CheckboxAndroid, \"displayName\", 'Checkbox.Android');\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid); // @component-docs ignore-next-line\n\nexport { CheckboxAndroid };","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","React","scaleAnim","Animated","componentDidUpdate","prevProps","checked","animation","toValue","duration","useNativeDriver","render","theme","rest","status","indeterminate","checkedColor","uncheckedColor","color","rippleColor","checkboxColor","borderWidth","inputRange","outputRange","icon","disabled","styles","container","transform","scale","StyleSheet","borderColor","borderRadius","width","height","padding","fillContainer","alignItems","justifyContent","fill","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  scaleAnim: Animated.Value;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    const { animation } = this.props.theme;\n\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * animation.scale\n          : ANIMATION_DURATION * animation.scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'minus-box'\n      : checked\n      ? 'checkbox-marked'\n      : 'checkbox-blank-outline';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkboxColor}\n            direction=\"ltr\"\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}