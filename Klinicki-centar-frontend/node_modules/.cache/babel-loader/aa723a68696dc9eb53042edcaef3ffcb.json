{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nexport const ToggleButtonGroupContext = /*#__PURE__*/React.createContext(null);\n/**\n * Toggle group allows to control a group of toggle buttons.</br>\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, checkout <a href=\"/toggle-button-row.html\">`ToggleButton.Row`</a>.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-group.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Group\n *       onValueChange={value => setValue(value)}\n *       value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\n\nclass ToggleButtonGroup extends React.Component {\n  render() {\n    const {\n      value,\n      onValueChange,\n      children\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ToggleButtonGroupContext.Provider, {\n      value: {\n        value,\n        onValueChange\n      }\n    }, children);\n  }\n\n}\n\n_defineProperty(ToggleButtonGroup, \"displayName\", 'ToggleButton.Group');\n\nexport default ToggleButtonGroup;","map":{"version":3,"sources":["ToggleButtonGroup.tsx"],"names":["ToggleButtonGroupContext","React","ToggleButtonGroup","render","children","onValueChange"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAsBA,OAAO,MAAMA,wBAAwB,GAAA,aAAGC,KAAK,CAALA,aAAAA,CAAjC,IAAiCA,CAAjC;AAIP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,MAAA,iBAAA,SAAgCA,KAAK,CAArC,SAAA,CAAuD;AAGrDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,KAAA;AAAA,MAAA,aAAA;AAAwBC,MAAAA;AAAxB,QAAqC,KAA3C,KAAA;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA;AACE,MAAA,KAAK,EAAE;AAAA,QAAA,KAAA;AAELC,QAAAA;AAFK;AADT,KAAA,EADF,QACE,CADF;AAUD;;AAhBoD;;gBAAjDH,iB,iBACiB,oB;;AAkBvB,eAAA,iBAAA","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n};\n\ntype ToggleButtonContextType = {\n  value: string;\n  onValueChange: (item: string) => void;\n};\n\nexport const ToggleButtonGroupContext = React.createContext<\n  ToggleButtonContextType\n>(null as any);\n\n/**\n * Toggle group allows to control a group of toggle buttons.</br>\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, checkout <a href=\"/toggle-button-row.html\">`ToggleButton.Row`</a>.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-group.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Group\n *       onValueChange={value => setValue(value)}\n *       value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nclass ToggleButtonGroup extends React.Component<Props> {\n  static displayName = 'ToggleButton.Group';\n\n  render() {\n    const { value, onValueChange, children } = this.props;\n\n    return (\n      <ToggleButtonGroupContext.Provider\n        value={{\n          value,\n          onValueChange,\n        }}\n      >\n        {children}\n      </ToggleButtonGroupContext.Provider>\n    );\n  }\n}\n\nexport default ToggleButtonGroup;\n"]},"metadata":{},"sourceType":"module"}