{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, I18nManager } from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nclass ListAccordion extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      expanded: this.props.expanded || false\n    });\n\n    _defineProperty(this, \"handlePress\", () => {\n      this.props.onPress && this.props.onPress();\n\n      if (this.props.expanded === undefined) {\n        // Only update state of the `expanded` prop was not passed\n        // If it was passed, the component will act as a controlled component\n        this.setState(state => ({\n          expanded: !state.expanded\n        }));\n      }\n    });\n  }\n\n  render() {\n    const {\n      left,\n      title,\n      description,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      titleNumberOfLines,\n      descriptionNumberOfLines,\n      style,\n      id,\n      testID\n    } = this.props;\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n    const expandedInternal = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;\n    return /*#__PURE__*/React.createElement(ListAccordionGroupContext.Consumer, null, groupContext => {\n      if (groupContext !== null && !id) {\n        throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n      }\n\n      const expanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n      const handlePress = groupContext && id !== undefined ? () => groupContext.onAccordionPress(id) : this.handlePress;\n      return /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(TouchableRipple, {\n        style: [styles.container, style],\n        onPress: handlePress,\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        testID: testID\n      }, /*#__PURE__*/React.createElement(View, {\n        style: styles.row,\n        pointerEvents: \"none\"\n      }, left ? left({\n        color: expanded ? theme.colors.primary : descriptionColor\n      }) : null, /*#__PURE__*/React.createElement(View, {\n        style: [styles.item, styles.content]\n      }, /*#__PURE__*/React.createElement(Text, {\n        numberOfLines: titleNumberOfLines,\n        style: [styles.title, {\n          color: expanded ? theme.colors.primary : titleColor\n        }, titleStyle]\n      }, title), description && /*#__PURE__*/React.createElement(Text, {\n        numberOfLines: descriptionNumberOfLines,\n        style: [styles.description, {\n          color: descriptionColor\n        }, descriptionStyle]\n      }, description)), /*#__PURE__*/React.createElement(View, {\n        style: [styles.item, description ? styles.multiline : undefined]\n      }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n        name: expanded ? 'chevron-up' : 'chevron-down',\n        color: titleColor,\n        size: 24,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n      })))), expanded ? React.Children.map(children, child => {\n        if (left && /*#__PURE__*/React.isValidElement(child) && !child.props.left && !child.props.right) {\n          return /*#__PURE__*/React.cloneElement(child, {\n            style: [styles.child, child.props.style]\n          });\n        }\n\n        return child;\n      }) : null);\n    });\n  }\n\n}\n\n_defineProperty(ListAccordion, \"displayName\", 'List.Accordion');\n\n_defineProperty(ListAccordion, \"defaultProps\", {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","React","titleNumberOfLines","descriptionNumberOfLines","expanded","state","render","testID","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","handlePress","id","styles","left","description","I18nManager","child","style","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,UAAA,EAAA,WAAA,QAAA,cAAA;AAQA,OAAA,eAAA,MAAA,oBAAA;AACA,OAAA,qBAAA,MAAA,0BAAA;AACA,OAAA,IAAA,MAAA,oBAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AAEA,SAAA,yBAAA,QAAA,sBAAA;AAwEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,MAAA,aAAA,SAA4BC,KAAK,CAAjC,SAAA,CAA0D;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAQhD;AACNG,MAAAA,QAAQ,EAAE,KAAA,KAAA,CAAA,QAAA,IAAuB;AAD3B,KARgD,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAYlC,MAAM;AAC1B,WAAA,KAAA,CAAA,OAAA,IAAsB,KAAA,KAAA,CAAtB,OAAsB,EAAtB;;AAEA,UAAI,KAAA,KAAA,CAAA,QAAA,KAAJ,SAAA,EAAuC;AACrC;AACA;AACA,aAAA,QAAA,CAAeC,KAAD,KAAY;AACxBD,UAAAA,QAAQ,EAAE,CAACC,KAAK,CAACD;AADO,SAAZ,CAAd;AAGD;AArBqD,KAAA,CAAA;AAAA;;AAwBxDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,IAAA;AAAA,MAAA,KAAA;AAAA,MAAA,WAAA;AAAA,MAAA,QAAA;AAAA,MAAA,KAAA;AAAA,MAAA,UAAA;AAAA,MAAA,gBAAA;AAAA,MAAA,kBAAA;AAAA,MAAA,wBAAA;AAAA,MAAA,KAAA;AAAA,MAAA,EAAA;AAYJC,MAAAA;AAZI,QAaF,KAbJ,KAAA;AAcA,UAAMC,UAAU,GAAGC,KAAK,CAACC,KAAK,CAALA,MAAAA,CAAND,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAnB,MAAmBA,EAAnB;AACA,UAAME,gBAAgB,GAAGF,KAAK,CAACC,KAAK,CAALA,MAAAA,CAAND,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAzB,MAAyBA,EAAzB;AAKA,UAAMG,gBAAgB,GACpB,KAAA,KAAA,CAAA,QAAA,KAAA,SAAA,GACI,KAAA,KAAA,CADJ,QAAA,GAEI,KAAA,KAAA,CAHN,QAAA;AAKA,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,yBAAD,CAAA,QAAA,EAAA,IAAA,EACIC,YAAD,IAAiD;AAChD,UAAIA,YAAY,KAAZA,IAAAA,IAAyB,CAA7B,EAAA,EAAkC;AAChC,cAAM,IAAA,KAAA,CAAN,oFAAM,CAAN;AAGD;;AACD,YAAMT,QAAQ,GAAGS,YAAY,GACzBA,YAAY,CAAZA,UAAAA,KADyB,EAAA,GAA7B,gBAAA;AAGA,YAAMC,WAAW,GACfD,YAAY,IAAIE,EAAE,KAAlBF,SAAAA,GACI,MAAMA,YAAY,CAAZA,gBAAAA,CADVA,EACUA,CADVA,GAEI,KAHN,WAAA;AAIA,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AACE,QAAA,KAAK,EAAE,CAACG,MAAM,CAAP,SAAA,EADT,KACS,CADT;AAEE,QAAA,OAAO,EAFT,WAAA;AAGE,QAAA,mBAAmB,EAHrB,QAAA;AAIE,QAAA,0BAA0B,EAJ5B,QAAA;AAKE,QAAA,iBAAiB,EALnB,QAAA;AAME,QAAA,MAAM,EAAET;AANV,OAAA,EAAA,aAQE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAES,MAAM,CAAnB,GAAA;AAAyB,QAAA,aAAa,EAAC;AAAvC,OAAA,EACGC,IAAI,GACDA,IAAI,CAAC;AACHR,QAAAA,KAAK,EAAEL,QAAQ,GACXM,KAAK,CAALA,MAAAA,CADW,OAAA,GAEXC;AAHD,OAAD,CADH,GADP,IAAA,EAAA,aAQE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACK,MAAM,CAAP,IAAA,EAAcA,MAAM,CAApB,OAAA;AAAb,OAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,aAAa,EADf,kBAAA;AAEE,QAAA,KAAK,EAAE,CACLA,MAAM,CADD,KAAA,EAEL;AACEP,UAAAA,KAAK,EAAEL,QAAQ,GAAGM,KAAK,CAALA,MAAAA,CAAH,OAAA,GAA0BF;AAD3C,SAFK,EAAA,UAAA;AAFT,OAAA,EADF,KACE,CADF,EAaGU,WAAW,IAAA,aACV,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,aAAa,EADf,wBAAA;AAEE,QAAA,KAAK,EAAE,CACLF,MAAM,CADD,WAAA,EAEL;AACEP,UAAAA,KAAK,EAAEE;AADT,SAFK,EAAA,gBAAA;AAFT,OAAA,EAtBN,WAsBM,CAdJ,CARF,EAAA,aAoCE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,KAAK,EAAE,CACLK,MAAM,CADD,IAAA,EAELE,WAAW,GAAGF,MAAM,CAAT,SAAA,GAFN,SAAA;AADT,OAAA,EAAA,aAME,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;AACE,QAAA,IAAI,EAAEZ,QAAQ,GAAA,YAAA,GADhB,cAAA;AAEE,QAAA,KAAK,EAFP,UAAA;AAGE,QAAA,IAAI,EAHN,EAAA;AAIE,QAAA,SAAS,EAAEe,WAAW,CAAXA,KAAAA,GAAAA,KAAAA,GAA4B;AAJzC,OAAA,CANF,CApCF,CARF,CADF,EA4DGf,QAAQ,GACL,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA8BgB,KAAD,IAAW;AACtC,YACEH,IAAI,IAAA,aACJhB,KAAK,CAALA,cAAAA,CADAgB,KACAhB,CADAgB,IAEA,CAACG,KAAK,CAALA,KAAAA,CAFDH,IAAAA,IAGA,CAACG,KAAK,CAALA,KAAAA,CAJH,KAAA,EAKE;AACA,iBAAA,aAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BC,YAAAA,KAAK,EAAE,CAACL,MAAM,CAAP,KAAA,EAAeI,KAAK,CAALA,KAAAA,CAAf,KAAA;AADwB,WAA1B,CAAP;AAGD;;AAED,eAAA,KAAA;AAbG,OACL,CADK,GA7Db,IACE,CADF;AAfN,KACE,CADF;AAiGD;;AAnJuD;;gBAApDpB,a,iBACiB,gB;;gBADjBA,a,kBAGkC;AACpCE,EAAAA,kBAAkB,EADkB,CAAA;AAEpCC,EAAAA,wBAAwB,EAAE;AAFU,C;;AAmJxC,MAAMa,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BM,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE;AADA,GADoB;AAI/BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,aAAa,EADV,KAAA;AAEHC,IAAAA,UAAU,EAAE;AAFT,GAJ0B;AAQ/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EADG,EAAA;AAETF,IAAAA,UAAU,EAFD,QAAA;AAGTG,IAAAA,cAAc,EAAE;AAHP,GARoB;AAa/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL,GAbwB;AAgB/Bb,EAAAA,WAAW,EAAE;AACXa,IAAAA,QAAQ,EAAE;AADC,GAhBkB;AAmB/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE;AADJ,GAnByB;AAsB/Bb,EAAAA,KAAK,EAAE;AACLc,IAAAA,WAAW,EAAE;AADR,GAtBwB;AAyB/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EADG,CAAA;AAEPP,IAAAA,cAAc,EAAE;AAFT;AAzBsB,CAAlB,CAAf;AA+BA,eAAeQ,SAAS,CAAxB,aAAwB,CAAxB","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport {\n  ListAccordionGroupContext,\n  ListAccordionGroupContextType,\n} from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordion extends React.Component<Props, State> {\n  static displayName = 'List.Accordion';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  private handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState((state) => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      title,\n      description,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      titleNumberOfLines,\n      descriptionNumberOfLines,\n      style,\n      id,\n      testID,\n    } = this.props;\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expandedInternal =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <ListAccordionGroupContext.Consumer>\n        {(groupContext: ListAccordionGroupContextType) => {\n          if (groupContext !== null && !id) {\n            throw new Error(\n              'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n            );\n          }\n          const expanded = groupContext\n            ? groupContext.expandedId === id\n            : expandedInternal;\n          const handlePress =\n            groupContext && id !== undefined\n              ? () => groupContext.onAccordionPress(id)\n              : this.handlePress;\n          return (\n            <View>\n              <TouchableRipple\n                style={[styles.container, style]}\n                onPress={handlePress}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n                testID={testID}\n              >\n                <View style={styles.row} pointerEvents=\"none\">\n                  {left\n                    ? left({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View style={[styles.item, styles.content]}>\n                    <Text\n                      numberOfLines={titleNumberOfLines}\n                      style={[\n                        styles.title,\n                        {\n                          color: expanded ? theme.colors.primary : titleColor,\n                        },\n                        titleStyle,\n                      ]}\n                    >\n                      {title}\n                    </Text>\n                    {description && (\n                      <Text\n                        numberOfLines={descriptionNumberOfLines}\n                        style={[\n                          styles.description,\n                          {\n                            color: descriptionColor,\n                          },\n                          descriptionStyle,\n                        ]}\n                      >\n                        {description}\n                      </Text>\n                    )}\n                  </View>\n                  <View\n                    style={[\n                      styles.item,\n                      description ? styles.multiline : undefined,\n                    ]}\n                  >\n                    <MaterialCommunityIcon\n                      name={expanded ? 'chevron-up' : 'chevron-down'}\n                      color={titleColor}\n                      size={24}\n                      direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                    />\n                  </View>\n                </View>\n              </TouchableRipple>\n              {expanded\n                ? React.Children.map(children, (child) => {\n                    if (\n                      left &&\n                      React.isValidElement(child) &&\n                      !child.props.left &&\n                      !child.props.right\n                    ) {\n                      return React.cloneElement(child, {\n                        style: [styles.child, child.props.style],\n                      });\n                    }\n\n                    return child;\n                  })\n                : null}\n            </View>\n          );\n        }}\n      </ListAccordionGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}