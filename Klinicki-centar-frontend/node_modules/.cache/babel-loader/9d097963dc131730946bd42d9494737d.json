{"ast":null,"code":"import { DataUtil } from './util';\n/**\r\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\r\n */\n\nvar Query =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor for Query class.\r\n   * @param  {string|string[]} from?\r\n   * @hidden\r\n   */\n  function Query(from) {\n    /** @hidden */\n    this.subQuery = null;\n    /** @hidden */\n\n    this.isChild = false;\n    /** @hidden */\n\n    this.distincts = [];\n    this.queries = [];\n    this.key = '';\n    this.fKey = '';\n\n    if (typeof from === 'string') {\n      this.fromTable = from;\n    } else if (from && from instanceof Array) {\n      this.lookups = from;\n    }\n\n    this.expands = [];\n    this.sortedColumns = [];\n    this.groupedColumns = [];\n    this.subQuery = null;\n    this.isChild = false;\n    this.params = [];\n    return this;\n  }\n  /**\r\n   * Sets the primary key.\r\n   * @param  {string} field - Defines the column field.\r\n   */\n\n\n  Query.prototype.setKey = function (field) {\n    this.key = field;\n    return this;\n  };\n  /**\r\n   * Sets default DataManager to execute query.\r\n   * @param  {DataManager} dataManager - Defines the DataManager.\r\n   */\n\n\n  Query.prototype.using = function (dataManager) {\n    this.dataManager = dataManager;\n    return this;\n  };\n  /**\r\n   * Executes query with the given DataManager.\r\n   * @param  {DataManager} dataManager - Defines the DataManager.\r\n   * @param  {Function} done - Defines the success callback.\r\n   * @param  {Function} fail - Defines the failure callback.\r\n   * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\r\n   *\r\n   * <pre>\r\n   * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\r\n   * let query: Query = new Query();\r\n   * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\r\n   * let promise: Promise< Object > = query.execute(dataManager);\r\n   * promise.then((e: { result: Object }) => { });\r\n   * </pre>\r\n   */\n\n\n  Query.prototype.execute = function (dataManager, done, fail, always) {\n    dataManager = dataManager || this.dataManager;\n\n    if (dataManager) {\n      return dataManager.executeQuery(this, done, fail, always);\n    }\n\n    return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  };\n  /**\r\n   * Executes query with the local datasource.\r\n   * @param  {DataManager} dataManager - Defines the DataManager.\r\n   */\n\n\n  Query.prototype.executeLocal = function (dataManager) {\n    dataManager = dataManager || this.dataManager;\n\n    if (dataManager) {\n      return dataManager.executeLocal(this);\n    }\n\n    return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  };\n  /**\r\n   * Creates deep copy of the Query object.\r\n   */\n\n\n  Query.prototype.clone = function () {\n    var cloned = new Query();\n    cloned.queries = this.queries.slice(0);\n    cloned.key = this.key;\n    cloned.isChild = this.isChild;\n    cloned.dataManager = this.dataManager;\n    cloned.fromTable = this.fromTable;\n    cloned.params = this.params.slice(0);\n    cloned.expands = this.expands.slice(0);\n    cloned.sortedColumns = this.sortedColumns.slice(0);\n    cloned.groupedColumns = this.groupedColumns.slice(0);\n    cloned.subQuerySelector = this.subQuerySelector;\n    cloned.subQuery = this.subQuery;\n    cloned.fKey = this.fKey;\n    cloned.isCountRequired = this.isCountRequired;\n    cloned.distincts = this.distincts.slice(0);\n    return cloned;\n  };\n  /**\r\n   * Specifies the name of table to retrieve data in query execution.\r\n   * @param  {string} tableName - Defines the table name.\r\n   */\n\n\n  Query.prototype.from = function (tableName) {\n    this.fromTable = tableName;\n    return this;\n  };\n  /**\r\n   * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\r\n   * @param  {string} key - Defines the key of additional parameter.\r\n   * @param  {Function|string} value - Defines the value for the key.\r\n   */\n\n\n  Query.prototype.addParams = function (key, value) {\n    if (typeof value === 'function') {\n      this.params.push({\n        key: key,\n        fn: value\n      });\n    } else {\n      this.params.push({\n        key: key,\n        value: value\n      });\n    }\n\n    return this;\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Query.prototype.distinct = function (fields) {\n    if (typeof fields === 'string') {\n      this.distincts = [].slice.call([fields], 0);\n    } else {\n      this.distincts = fields.slice(0);\n    }\n\n    return this;\n  };\n  /**\r\n   * Expands the related table.\r\n   * @param  {string|Object[]} tables\r\n   */\n\n\n  Query.prototype.expand = function (tables) {\n    if (typeof tables === 'string') {\n      this.expands = [].slice.call([tables], 0);\n    } else {\n      this.expands = tables.slice(0);\n    }\n\n    return this;\n  };\n  /**\r\n   * Filter data with given filter criteria.\r\n   * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\r\n   * @param  {string} operator - Defines the operator how to filter data.\r\n   * @param  {string|number|boolean} value - Defines the values to match with data.\r\n   * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\r\n   * filter data with case insensitive.\r\n   */\n\n\n  Query.prototype.where = function (fieldName, operator, value, ignoreCase, ignoreAccent) {\n    operator = operator ? operator.toLowerCase() : null;\n    var predicate = null;\n\n    if (typeof fieldName === 'string') {\n      predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n    } else if (fieldName instanceof Predicate) {\n      predicate = fieldName;\n    }\n\n    this.queries.push({\n      fn: 'onWhere',\n      e: predicate\n    });\n    return this;\n  };\n  /**\r\n   * Search data with given search criteria.\r\n   * @param  {string|number|boolean} searchKey - Defines the search key.\r\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\r\n   * @param  {string} operator - Defines the operator how to search data.\r\n   * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\r\n   * filter data with case insensitive.\r\n   */\n\n\n  Query.prototype.search = function (searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [fieldNames];\n    }\n\n    if (!operator || operator === 'none') {\n      operator = 'contains';\n    }\n\n    var comparer = DataUtil.fnOperators[operator];\n    this.queries.push({\n      fn: 'onSearch',\n      e: {\n        fieldNames: fieldNames,\n        operator: operator,\n        searchKey: searchKey,\n        ignoreCase: ignoreCase,\n        ignoreAccent: ignoreAccent,\n        comparer: comparer\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Sort the data with given sort criteria.\r\n   * By default, sort direction is ascending.\r\n   * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\r\n   * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\r\n   */\n\n\n  Query.prototype.sortBy = function (fieldName, comparer, isFromGroup) {\n    var order = 'ascending';\n    var sorts;\n    var temp;\n\n    if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n      fieldName = fieldName.replace(/ desc$/i, '');\n      comparer = 'descending';\n    }\n\n    if (!comparer || typeof comparer === 'string') {\n      order = comparer ? comparer.toLowerCase() : 'ascending';\n      comparer = DataUtil.fnSort(comparer);\n    }\n\n    if (isFromGroup) {\n      sorts = Query.filterQueries(this.queries, 'onSortBy');\n\n      for (var i = 0; i < sorts.length; i++) {\n        temp = sorts[i].e.fieldName;\n\n        if (typeof temp === 'string') {\n          if (temp === fieldName) {\n            return this;\n          }\n        } else if (temp instanceof Array) {\n          for (var j = 0; j < temp.length; j++) {\n            if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n              return this;\n            }\n          }\n        }\n      }\n    }\n\n    this.queries.push({\n      fn: 'onSortBy',\n      e: {\n        fieldName: fieldName,\n        comparer: comparer,\n        direction: order\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Sorts data in descending order.\r\n   * @param  {string} fieldName - Defines the column field.\r\n   */\n\n\n  Query.prototype.sortByDesc = function (fieldName) {\n    return this.sortBy(fieldName, 'descending');\n  };\n  /**\r\n   * Groups data with the given field name.\r\n   * @param  {string} fieldName - Defines the column field.\r\n   */\n\n\n  Query.prototype.group = function (fieldName, fn, format) {\n    this.sortBy(fieldName, null, true);\n    this.queries.push({\n      fn: 'onGroup',\n      e: {\n        fieldName: fieldName,\n        comparer: fn ? fn : null,\n        format: format ? format : null\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Gets data based on the given page index and size.\r\n   * @param  {number} pageIndex - Defines the current page index.\r\n   * @param  {number} pageSize - Defines the no of records per page.\r\n   */\n\n\n  Query.prototype.page = function (pageIndex, pageSize) {\n    this.queries.push({\n      fn: 'onPage',\n      e: {\n        pageIndex: pageIndex,\n        pageSize: pageSize\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Gets data based on the given start and end index.\r\n   * @param  {number} start - Defines the start index of the datasource.\r\n   * @param  {number} end - Defines the end index of the datasource.\r\n   */\n\n\n  Query.prototype.range = function (start, end) {\n    this.queries.push({\n      fn: 'onRange',\n      e: {\n        start: start,\n        end: end\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Gets data from the top of the data source based on given number of records count.\r\n   * @param  {number} nos - Defines the no of records to retrieve from datasource.\r\n   */\n\n\n  Query.prototype.take = function (nos) {\n    this.queries.push({\n      fn: 'onTake',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Skips data with given number of records count from the top of the data source.\r\n   * @param  {number} nos - Defines the no of records skip in the datasource.\r\n   */\n\n\n  Query.prototype.skip = function (nos) {\n    this.queries.push({\n      fn: 'onSkip',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Selects specified columns from the data source.\r\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\r\n   */\n\n\n  Query.prototype.select = function (fieldNames) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [].slice.call([fieldNames], 0);\n    }\n\n    this.queries.push({\n      fn: 'onSelect',\n      e: {\n        fieldNames: fieldNames\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\r\n   * @param  {Query} query - Defines the query to relate two tables.\r\n   * @param  {Function} selectorFn - Defines the custom function to select records.\r\n   */\n\n\n  Query.prototype.hierarchy = function (query, selectorFn) {\n    this.subQuerySelector = selectorFn;\n    this.subQuery = query;\n    return this;\n  };\n  /**\r\n   * Sets the foreign key which is used to get data from the related table.\r\n   * @param  {string} key - Defines the foreign key.\r\n   */\n\n\n  Query.prototype.foreignKey = function (key) {\n    this.fKey = key;\n    return this;\n  };\n  /**\r\n   * It is used to get total number of records in the DataManager execution result.\r\n   */\n\n\n  Query.prototype.requiresCount = function () {\n    this.isCountRequired = true;\n    return this;\n  }; //type - sum, avg, min, max\n\n  /**\r\n   * Aggregate the data with given type and field name.\r\n   * @param  {string} type - Defines the aggregate type.\r\n   * @param  {string} field - Defines the column field to aggregate.\r\n   */\n\n\n  Query.prototype.aggregate = function (type, field) {\n    this.queries.push({\n      fn: 'onAggregates',\n      e: {\n        field: field,\n        type: type\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Pass array of filterColumn query for performing filter operation.\r\n   * @param  {QueryOptions[]} queries\r\n   * @param  {string} name\r\n   * @hidden\r\n   */\n\n\n  Query.filterQueries = function (queries, name) {\n    return queries.filter(function (q) {\n      return q.fn === name;\n    });\n  };\n  /**\r\n   * To get the list of queries which is already filtered in current data source.\r\n   * @param  {Object[]} queries\r\n   * @param  {string[]} singles\r\n   * @hidden\r\n   */\n\n\n  Query.filterQueryLists = function (queries, singles) {\n    var filtered = queries.filter(function (q) {\n      return singles.indexOf(q.fn) !== -1;\n    });\n    var res = {};\n\n    for (var i = 0; i < filtered.length; i++) {\n      if (!res[filtered[i].fn]) {\n        res[filtered[i].fn] = filtered[i].e;\n      }\n    }\n\n    return res;\n  };\n\n  return Query;\n}();\n\nexport { Query };\n/**\r\n * Predicate class is used to generate complex filter criteria.\r\n * This will be used by DataManager to perform multiple filtering operation.\r\n */\n\nvar Predicate =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor for Predicate class.\r\n   * @param  {string|Predicate} field\r\n   * @param  {string} operator\r\n   * @param  {string|number|boolean|Predicate|Predicate[]} value\r\n   * @param  {boolean=false} ignoreCase\r\n   * @hidden\r\n   */\n  function Predicate(field, operator, value, ignoreCase, ignoreAccent) {\n    if (ignoreCase === void 0) {\n      ignoreCase = false;\n    }\n    /** @hidden */\n\n\n    this.ignoreAccent = false;\n    /** @hidden */\n\n    this.isComplex = false;\n\n    if (typeof field === 'string') {\n      this.field = field;\n      this.operator = operator.toLowerCase();\n      this.value = value;\n      this.ignoreCase = ignoreCase;\n      this.ignoreAccent = ignoreAccent;\n      this.isComplex = false;\n      this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n    } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n      this.isComplex = true;\n      this.condition = operator.toLowerCase();\n      this.predicates = [field];\n\n      if (value instanceof Array) {\n        [].push.apply(this.predicates, value);\n      } else {\n        this.predicates.push(value);\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Adds n-number of new predicates on existing predicate with “and” condition.\r\n   * @param  {Object[]} args - Defines the collection of predicates.\r\n   */\n\n\n  Predicate.and = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n  };\n  /**\r\n   * Adds new predicate on existing predicate with “and” condition.\r\n   * @param  {string} field - Defines the column field.\r\n   * @param  {string} operator - Defines the operator how to filter data.\r\n   * @param  {string} value - Defines the values to match with data.\r\n   * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\r\n   * filter data with case insensitive.\r\n   */\n\n\n  Predicate.prototype.and = function (field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n  };\n  /**\r\n   * Adds n-number of new predicates on existing predicate with “or” condition.\r\n   * @param  {Object[]} args - Defines the collection of predicates.\r\n   */\n\n\n  Predicate.or = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n  };\n  /**\r\n   * Adds new predicate on existing predicate with “or” condition.\r\n   * @param  {string} field - Defines the column field.\r\n   * @param  {string} operator - Defines the operator how to filter data.\r\n   * @param  {string} value - Defines the values to match with data.\r\n   * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\r\n   * filter data with case insensitive.\r\n   */\n\n\n  Predicate.prototype.or = function (field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n  };\n  /**\r\n   * Converts plain JavaScript object to Predicate object.\r\n   * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\r\n   */\n\n\n  Predicate.fromJson = function (json) {\n    if (json instanceof Array) {\n      var res = [];\n\n      for (var i = 0, len = json.length; i < len; i++) {\n        res.push(this.fromJSONData(json[i]));\n      }\n\n      return res;\n    }\n\n    var pred = json;\n    return this.fromJSONData(pred);\n  };\n  /**\r\n   * Validate the record based on the predicates.\r\n   * @param  {Object} record - Defines the datasource record.\r\n   */\n\n\n  Predicate.prototype.validate = function (record) {\n    var predicate = this.predicates ? this.predicates : [];\n    var isAnd;\n    var ret;\n\n    if (!this.isComplex && this.comparer) {\n      return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n    }\n\n    isAnd = this.condition === 'and';\n\n    for (var i = 0; i < predicate.length; i++) {\n      ret = predicate[i].validate(record);\n\n      if (isAnd) {\n        if (!ret) {\n          return false;\n        }\n      } else {\n        if (ret) {\n          return true;\n        }\n      }\n    }\n\n    return isAnd;\n  };\n  /**\r\n   * Converts predicates to plain JavaScript.\r\n   * This method is uses Json stringify when serializing Predicate object.\r\n   */\n\n\n  Predicate.prototype.toJson = function () {\n    var predicates;\n    var p;\n\n    if (this.isComplex) {\n      predicates = [];\n      p = this.predicates;\n\n      for (var i = 0; i < p.length; i++) {\n        predicates.push(p[i].toJson());\n      }\n    }\n\n    return {\n      isComplex: this.isComplex,\n      field: this.field,\n      operator: this.operator,\n      value: this.value,\n      ignoreCase: this.ignoreCase,\n      ignoreAccent: this.ignoreAccent,\n      condition: this.condition,\n      predicates: predicates\n    };\n  };\n\n  Predicate.combinePredicates = function (predicates, operator) {\n    if (predicates.length === 1) {\n      if (!(predicates[0] instanceof Array)) {\n        return predicates[0];\n      }\n\n      predicates = predicates[0];\n    }\n\n    return new Predicate(predicates[0], operator, predicates.slice(1));\n  };\n\n  Predicate.combine = function (pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n    if (field instanceof Predicate) {\n      return Predicate[condition](pred, field);\n    }\n\n    if (typeof field === 'string') {\n      return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n    }\n\n    return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n  };\n\n  Predicate.fromJSONData = function (json) {\n    var preds = json.predicates || [];\n    var len = preds.length;\n    var predicates = [];\n    var result;\n\n    for (var i = 0; i < len; i++) {\n      predicates.push(this.fromJSONData(preds[i]));\n    }\n\n    if (!json.isComplex) {\n      result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n    } else {\n      result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n    }\n\n    return result;\n  };\n\n  return Predicate;\n}();\n\nexport { Predicate };","map":{"version":3,"sources":["C:/Users/Ljubica/Desktop/ISA-projekat-2019-2020/klinicki-centar-frontend/node_modules/@syncfusion/ej2-data/src/query.js"],"names":["DataUtil","Query","from","subQuery","isChild","distincts","queries","key","fKey","fromTable","Array","lookups","expands","sortedColumns","groupedColumns","params","prototype","setKey","field","using","dataManager","execute","done","fail","always","executeQuery","throwError","executeLocal","clone","cloned","slice","subQuerySelector","isCountRequired","tableName","addParams","value","push","fn","distinct","fields","call","expand","tables","where","fieldName","operator","ignoreCase","ignoreAccent","toLowerCase","predicate","Predicate","e","search","searchKey","fieldNames","comparer","fnOperators","sortBy","isFromGroup","order","sorts","temp","endsWith","replace","fnSort","filterQueries","i","length","j","direction","sortByDesc","group","format","page","pageIndex","pageSize","range","start","end","take","nos","skip","select","hierarchy","query","selectorFn","foreignKey","requiresCount","aggregate","type","name","filter","q","filterQueryLists","singles","filtered","indexOf","res","isComplex","processOperator","condition","predicates","apply","and","args","_i","arguments","combinePredicates","combine","or","fromJson","json","len","fromJSONData","pred","validate","record","isAnd","ret","getObject","toJson","p","preds","result"],"mappings":"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","sourcesContent":["import { DataUtil } from './util';\r\n/**\r\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    /**\r\n     * Constructor for Query class.\r\n     * @param  {string|string[]} from?\r\n     * @hidden\r\n     */\r\n    function Query(from) {\r\n        /** @hidden */\r\n        this.subQuery = null;\r\n        /** @hidden */\r\n        this.isChild = false;\r\n        /** @hidden */\r\n        this.distincts = [];\r\n        this.queries = [];\r\n        this.key = '';\r\n        this.fKey = '';\r\n        if (typeof from === 'string') {\r\n            this.fromTable = from;\r\n        }\r\n        else if (from && from instanceof Array) {\r\n            this.lookups = from;\r\n        }\r\n        this.expands = [];\r\n        this.sortedColumns = [];\r\n        this.groupedColumns = [];\r\n        this.subQuery = null;\r\n        this.isChild = false;\r\n        this.params = [];\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the primary key.\r\n     * @param  {string} field - Defines the column field.\r\n     */\r\n    Query.prototype.setKey = function (field) {\r\n        this.key = field;\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets default DataManager to execute query.\r\n     * @param  {DataManager} dataManager - Defines the DataManager.\r\n     */\r\n    Query.prototype.using = function (dataManager) {\r\n        this.dataManager = dataManager;\r\n        return this;\r\n    };\r\n    /**\r\n     * Executes query with the given DataManager.\r\n     * @param  {DataManager} dataManager - Defines the DataManager.\r\n     * @param  {Function} done - Defines the success callback.\r\n     * @param  {Function} fail - Defines the failure callback.\r\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\r\n     *\r\n     * <pre>\r\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\r\n     * let query: Query = new Query();\r\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\r\n     * let promise: Promise< Object > = query.execute(dataManager);\r\n     * promise.then((e: { result: Object }) => { });\r\n     * </pre>\r\n     */\r\n    Query.prototype.execute = function (dataManager, done, fail, always) {\r\n        dataManager = dataManager || this.dataManager;\r\n        if (dataManager) {\r\n            return dataManager.executeQuery(this, done, fail, always);\r\n        }\r\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\r\n    };\r\n    /**\r\n     * Executes query with the local datasource.\r\n     * @param  {DataManager} dataManager - Defines the DataManager.\r\n     */\r\n    Query.prototype.executeLocal = function (dataManager) {\r\n        dataManager = dataManager || this.dataManager;\r\n        if (dataManager) {\r\n            return dataManager.executeLocal(this);\r\n        }\r\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\r\n    };\r\n    /**\r\n     * Creates deep copy of the Query object.\r\n     */\r\n    Query.prototype.clone = function () {\r\n        var cloned = new Query();\r\n        cloned.queries = this.queries.slice(0);\r\n        cloned.key = this.key;\r\n        cloned.isChild = this.isChild;\r\n        cloned.dataManager = this.dataManager;\r\n        cloned.fromTable = this.fromTable;\r\n        cloned.params = this.params.slice(0);\r\n        cloned.expands = this.expands.slice(0);\r\n        cloned.sortedColumns = this.sortedColumns.slice(0);\r\n        cloned.groupedColumns = this.groupedColumns.slice(0);\r\n        cloned.subQuerySelector = this.subQuerySelector;\r\n        cloned.subQuery = this.subQuery;\r\n        cloned.fKey = this.fKey;\r\n        cloned.isCountRequired = this.isCountRequired;\r\n        cloned.distincts = this.distincts.slice(0);\r\n        return cloned;\r\n    };\r\n    /**\r\n     * Specifies the name of table to retrieve data in query execution.\r\n     * @param  {string} tableName - Defines the table name.\r\n     */\r\n    Query.prototype.from = function (tableName) {\r\n        this.fromTable = tableName;\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\r\n     * @param  {string} key - Defines the key of additional parameter.\r\n     * @param  {Function|string} value - Defines the value for the key.\r\n     */\r\n    Query.prototype.addParams = function (key, value) {\r\n        if (typeof value === 'function') {\r\n            this.params.push({ key: key, fn: value });\r\n        }\r\n        else {\r\n            this.params.push({ key: key, value: value });\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    Query.prototype.distinct = function (fields) {\r\n        if (typeof fields === 'string') {\r\n            this.distincts = [].slice.call([fields], 0);\r\n        }\r\n        else {\r\n            this.distincts = fields.slice(0);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Expands the related table.\r\n     * @param  {string|Object[]} tables\r\n     */\r\n    Query.prototype.expand = function (tables) {\r\n        if (typeof tables === 'string') {\r\n            this.expands = [].slice.call([tables], 0);\r\n        }\r\n        else {\r\n            this.expands = tables.slice(0);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Filter data with given filter criteria.\r\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\r\n     * @param  {string} operator - Defines the operator how to filter data.\r\n     * @param  {string|number|boolean} value - Defines the values to match with data.\r\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\r\n     * filter data with case insensitive.\r\n     */\r\n    Query.prototype.where = function (fieldName, operator, value, ignoreCase, ignoreAccent) {\r\n        operator = operator ? (operator).toLowerCase() : null;\r\n        var predicate = null;\r\n        if (typeof fieldName === 'string') {\r\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\r\n        }\r\n        else if (fieldName instanceof Predicate) {\r\n            predicate = fieldName;\r\n        }\r\n        this.queries.push({\r\n            fn: 'onWhere',\r\n            e: predicate\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Search data with given search criteria.\r\n     * @param  {string|number|boolean} searchKey - Defines the search key.\r\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\r\n     * @param  {string} operator - Defines the operator how to search data.\r\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\r\n     * filter data with case insensitive.\r\n     */\r\n    Query.prototype.search = function (searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\r\n        if (typeof fieldNames === 'string') {\r\n            fieldNames = [fieldNames];\r\n        }\r\n        if (!operator || operator === 'none') {\r\n            operator = 'contains';\r\n        }\r\n        var comparer = DataUtil.fnOperators[operator];\r\n        this.queries.push({\r\n            fn: 'onSearch',\r\n            e: {\r\n                fieldNames: fieldNames,\r\n                operator: operator,\r\n                searchKey: searchKey,\r\n                ignoreCase: ignoreCase,\r\n                ignoreAccent: ignoreAccent,\r\n                comparer: comparer\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Sort the data with given sort criteria.\r\n     * By default, sort direction is ascending.\r\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\r\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\r\n     */\r\n    Query.prototype.sortBy = function (fieldName, comparer, isFromGroup) {\r\n        var order = 'ascending';\r\n        var sorts;\r\n        var temp;\r\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\r\n            fieldName = fieldName.replace(/ desc$/i, '');\r\n            comparer = 'descending';\r\n        }\r\n        if (!comparer || typeof comparer === 'string') {\r\n            order = comparer ? comparer.toLowerCase() : 'ascending';\r\n            comparer = DataUtil.fnSort(comparer);\r\n        }\r\n        if (isFromGroup) {\r\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\r\n            for (var i = 0; i < sorts.length; i++) {\r\n                temp = sorts[i].e.fieldName;\r\n                if (typeof temp === 'string') {\r\n                    if (temp === fieldName) {\r\n                        return this;\r\n                    }\r\n                }\r\n                else if (temp instanceof Array) {\r\n                    for (var j = 0; j < temp.length; j++) {\r\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\r\n                            return this;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.queries.push({\r\n            fn: 'onSortBy',\r\n            e: {\r\n                fieldName: fieldName,\r\n                comparer: comparer,\r\n                direction: order\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Sorts data in descending order.\r\n     * @param  {string} fieldName - Defines the column field.\r\n     */\r\n    Query.prototype.sortByDesc = function (fieldName) {\r\n        return this.sortBy(fieldName, 'descending');\r\n    };\r\n    /**\r\n     * Groups data with the given field name.\r\n     * @param  {string} fieldName - Defines the column field.\r\n     */\r\n    Query.prototype.group = function (fieldName, fn, format) {\r\n        this.sortBy(fieldName, null, true);\r\n        this.queries.push({\r\n            fn: 'onGroup',\r\n            e: {\r\n                fieldName: fieldName,\r\n                comparer: fn ? fn : null,\r\n                format: format ? format : null\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets data based on the given page index and size.\r\n     * @param  {number} pageIndex - Defines the current page index.\r\n     * @param  {number} pageSize - Defines the no of records per page.\r\n     */\r\n    Query.prototype.page = function (pageIndex, pageSize) {\r\n        this.queries.push({\r\n            fn: 'onPage',\r\n            e: {\r\n                pageIndex: pageIndex,\r\n                pageSize: pageSize\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets data based on the given start and end index.\r\n     * @param  {number} start - Defines the start index of the datasource.\r\n     * @param  {number} end - Defines the end index of the datasource.\r\n     */\r\n    Query.prototype.range = function (start, end) {\r\n        this.queries.push({\r\n            fn: 'onRange',\r\n            e: {\r\n                start: start,\r\n                end: end\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets data from the top of the data source based on given number of records count.\r\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\r\n     */\r\n    Query.prototype.take = function (nos) {\r\n        this.queries.push({\r\n            fn: 'onTake',\r\n            e: {\r\n                nos: nos\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Skips data with given number of records count from the top of the data source.\r\n     * @param  {number} nos - Defines the no of records skip in the datasource.\r\n     */\r\n    Query.prototype.skip = function (nos) {\r\n        this.queries.push({\r\n            fn: 'onSkip',\r\n            e: { nos: nos }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Selects specified columns from the data source.\r\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\r\n     */\r\n    Query.prototype.select = function (fieldNames) {\r\n        if (typeof fieldNames === 'string') {\r\n            fieldNames = [].slice.call([fieldNames], 0);\r\n        }\r\n        this.queries.push({\r\n            fn: 'onSelect',\r\n            e: { fieldNames: fieldNames }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\r\n     * @param  {Query} query - Defines the query to relate two tables.\r\n     * @param  {Function} selectorFn - Defines the custom function to select records.\r\n     */\r\n    Query.prototype.hierarchy = function (query, selectorFn) {\r\n        this.subQuerySelector = selectorFn;\r\n        this.subQuery = query;\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the foreign key which is used to get data from the related table.\r\n     * @param  {string} key - Defines the foreign key.\r\n     */\r\n    Query.prototype.foreignKey = function (key) {\r\n        this.fKey = key;\r\n        return this;\r\n    };\r\n    /**\r\n     * It is used to get total number of records in the DataManager execution result.\r\n     */\r\n    Query.prototype.requiresCount = function () {\r\n        this.isCountRequired = true;\r\n        return this;\r\n    };\r\n    //type - sum, avg, min, max\r\n    /**\r\n     * Aggregate the data with given type and field name.\r\n     * @param  {string} type - Defines the aggregate type.\r\n     * @param  {string} field - Defines the column field to aggregate.\r\n     */\r\n    Query.prototype.aggregate = function (type, field) {\r\n        this.queries.push({\r\n            fn: 'onAggregates',\r\n            e: { field: field, type: type }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Pass array of filterColumn query for performing filter operation.\r\n     * @param  {QueryOptions[]} queries\r\n     * @param  {string} name\r\n     * @hidden\r\n     */\r\n    Query.filterQueries = function (queries, name) {\r\n        return queries.filter(function (q) {\r\n            return q.fn === name;\r\n        });\r\n    };\r\n    /**\r\n     * To get the list of queries which is already filtered in current data source.\r\n     * @param  {Object[]} queries\r\n     * @param  {string[]} singles\r\n     * @hidden\r\n     */\r\n    Query.filterQueryLists = function (queries, singles) {\r\n        var filtered = queries.filter(function (q) {\r\n            return singles.indexOf(q.fn) !== -1;\r\n        });\r\n        var res = {};\r\n        for (var i = 0; i < filtered.length; i++) {\r\n            if (!res[filtered[i].fn]) {\r\n                res[filtered[i].fn] = filtered[i].e;\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    return Query;\r\n}());\r\nexport { Query };\r\n/**\r\n * Predicate class is used to generate complex filter criteria.\r\n * This will be used by DataManager to perform multiple filtering operation.\r\n */\r\nvar Predicate = /** @class */ (function () {\r\n    /**\r\n     * Constructor for Predicate class.\r\n     * @param  {string|Predicate} field\r\n     * @param  {string} operator\r\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\r\n     * @param  {boolean=false} ignoreCase\r\n     * @hidden\r\n     */\r\n    function Predicate(field, operator, value, ignoreCase, ignoreAccent) {\r\n        if (ignoreCase === void 0) { ignoreCase = false; }\r\n        /** @hidden */\r\n        this.ignoreAccent = false;\r\n        /** @hidden */\r\n        this.isComplex = false;\r\n        if (typeof field === 'string') {\r\n            this.field = field;\r\n            this.operator = operator.toLowerCase();\r\n            this.value = value;\r\n            this.ignoreCase = ignoreCase;\r\n            this.ignoreAccent = ignoreAccent;\r\n            this.isComplex = false;\r\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\r\n        }\r\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\r\n            this.isComplex = true;\r\n            this.condition = operator.toLowerCase();\r\n            this.predicates = [field];\r\n            if (value instanceof Array) {\r\n                [].push.apply(this.predicates, value);\r\n            }\r\n            else {\r\n                this.predicates.push(value);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds n-number of new predicates on existing predicate with “and” condition.\r\n     * @param  {Object[]} args - Defines the collection of predicates.\r\n     */\r\n    Predicate.and = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\r\n    };\r\n    /**\r\n     * Adds new predicate on existing predicate with “and” condition.\r\n     * @param  {string} field - Defines the column field.\r\n     * @param  {string} operator - Defines the operator how to filter data.\r\n     * @param  {string} value - Defines the values to match with data.\r\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\r\n     * filter data with case insensitive.\r\n     */\r\n    Predicate.prototype.and = function (field, operator, value, ignoreCase, ignoreAccent) {\r\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\r\n    };\r\n    /**\r\n     * Adds n-number of new predicates on existing predicate with “or” condition.\r\n     * @param  {Object[]} args - Defines the collection of predicates.\r\n     */\r\n    Predicate.or = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\r\n    };\r\n    /**\r\n     * Adds new predicate on existing predicate with “or” condition.\r\n     * @param  {string} field - Defines the column field.\r\n     * @param  {string} operator - Defines the operator how to filter data.\r\n     * @param  {string} value - Defines the values to match with data.\r\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\r\n     * filter data with case insensitive.\r\n     */\r\n    Predicate.prototype.or = function (field, operator, value, ignoreCase, ignoreAccent) {\r\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\r\n    };\r\n    /**\r\n     * Converts plain JavaScript object to Predicate object.\r\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\r\n     */\r\n    Predicate.fromJson = function (json) {\r\n        if (json instanceof Array) {\r\n            var res = [];\r\n            for (var i = 0, len = json.length; i < len; i++) {\r\n                res.push(this.fromJSONData(json[i]));\r\n            }\r\n            return res;\r\n        }\r\n        var pred = json;\r\n        return this.fromJSONData(pred);\r\n    };\r\n    /**\r\n     * Validate the record based on the predicates.\r\n     * @param  {Object} record - Defines the datasource record.\r\n     */\r\n    Predicate.prototype.validate = function (record) {\r\n        var predicate = this.predicates ? this.predicates : [];\r\n        var isAnd;\r\n        var ret;\r\n        if (!this.isComplex && this.comparer) {\r\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\r\n        }\r\n        isAnd = this.condition === 'and';\r\n        for (var i = 0; i < predicate.length; i++) {\r\n            ret = predicate[i].validate(record);\r\n            if (isAnd) {\r\n                if (!ret) {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (ret) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return isAnd;\r\n    };\r\n    /**\r\n     * Converts predicates to plain JavaScript.\r\n     * This method is uses Json stringify when serializing Predicate object.\r\n     */\r\n    Predicate.prototype.toJson = function () {\r\n        var predicates;\r\n        var p;\r\n        if (this.isComplex) {\r\n            predicates = [];\r\n            p = this.predicates;\r\n            for (var i = 0; i < p.length; i++) {\r\n                predicates.push(p[i].toJson());\r\n            }\r\n        }\r\n        return {\r\n            isComplex: this.isComplex,\r\n            field: this.field,\r\n            operator: this.operator,\r\n            value: this.value,\r\n            ignoreCase: this.ignoreCase,\r\n            ignoreAccent: this.ignoreAccent,\r\n            condition: this.condition,\r\n            predicates: predicates\r\n        };\r\n    };\r\n    Predicate.combinePredicates = function (predicates, operator) {\r\n        if (predicates.length === 1) {\r\n            if (!(predicates[0] instanceof Array)) {\r\n                return predicates[0];\r\n            }\r\n            predicates = predicates[0];\r\n        }\r\n        return new Predicate(predicates[0], operator, predicates.slice(1));\r\n    };\r\n    Predicate.combine = function (pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\r\n        if (field instanceof Predicate) {\r\n            return Predicate[condition](pred, field);\r\n        }\r\n        if (typeof field === 'string') {\r\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\r\n        }\r\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\r\n    };\r\n    Predicate.fromJSONData = function (json) {\r\n        var preds = json.predicates || [];\r\n        var len = preds.length;\r\n        var predicates = [];\r\n        var result;\r\n        for (var i = 0; i < len; i++) {\r\n            predicates.push(this.fromJSONData(preds[i]));\r\n        }\r\n        if (!json.isComplex) {\r\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\r\n        }\r\n        else {\r\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\r\n        }\r\n        return result;\r\n    };\r\n    return Predicate;\r\n}());\r\nexport { Predicate };\r\n"]},"metadata":{},"sourceType":"module"}