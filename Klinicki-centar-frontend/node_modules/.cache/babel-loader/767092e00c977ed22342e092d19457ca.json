{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nclass CheckboxItem extends React.Component {\n  render() {\n    const _this$props = this.props,\n          {\n      style,\n      status,\n      label,\n      onPress,\n      labelStyle,\n      theme: {\n        colors\n      }\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\"]);\n\n    return /*#__PURE__*/React.createElement(TouchableRipple, {\n      onPress: onPress\n    }, /*#__PURE__*/React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, /*#__PURE__*/React.createElement(Text, {\n      style: [styles.label, labelStyle, {\n        color: colors.primary\n      }]\n    }, label), /*#__PURE__*/React.createElement(CheckBox, _extends({\n      status: status\n    }, props))));\n  }\n\n}\n\n_defineProperty(CheckboxItem, \"displayName\", 'Checkbox.Item');\n\nexport default withTheme(CheckboxItem); // @component-docs ignore-next-line\n\nexport { CheckboxItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","React","render","theme","colors","props","onPress","styles","color","primary","status","withTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,UAAA,EAAA,IAAA,QAAA,cAAA;AAQA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,IAAA,MAAA,oBAAA;AACA,OAAA,eAAA,MAAA,oBAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AAyCA;;;;;;;;;;;;;;;;;;;AAmBA,MAAA,YAAA,SAA2BC,KAAK,CAAhC,SAAA,CAAkD;AAGhDC,EAAAA,MAAM,GAAG;AACP,UAAA,WAAA,GAQI,KARJ,KAAA;AAAA,UAAM;AAAA,MAAA,KAAA;AAAA,MAAA,MAAA;AAAA,MAAA,KAAA;AAAA,MAAA,OAAA;AAAA,MAAA,UAAA;AAMJC,MAAAA,KAAK,EAAE;AAAEC,QAAAA;AAAF;AANH,QAAN,WAAA;AAAA,UAOKC,KAPL,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,YAAA,EAAA,OAAA,CAAA,CAAA;;AAUA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAiB,MAAA,OAAO,EAAEC;AAA1B,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EAAb,KAAa,CAAb;AAAwC,MAAA,aAAa,EAAC;AAAtD,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAE,CAACA,MAAM,CAAP,KAAA,EAAA,UAAA,EAA2B;AAAEC,QAAAA,KAAK,EAAEJ,MAAM,CAACK;AAAhB,OAA3B;AAAb,KAAA,EADF,KACE,CADF,EAAA,aAIE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AAAU,MAAA,MAAM,EAAEC;AAAlB,KAAA,EANN,KAMM,CAAA,CAJF,CADF,CADF;AAUD;;AAxB+C;;gBAA5CV,Y,iBACiB,e;;AA0BvB,eAAeW,SAAS,CAAxB,YAAwB,CAAxB,C,CAEA;;AACA,SAAA,YAAA;AAEA,MAAMJ,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EADJ,KAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,cAAc,EAHL,eAAA;AAITC,IAAAA,eAAe,EAJN,CAAA;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nclass CheckboxItem extends React.Component<Props> {\n  static displayName = 'Checkbox.Item';\n\n  render() {\n    const {\n      style,\n      status,\n      label,\n      onPress,\n      labelStyle,\n      theme: { colors },\n      ...props\n    } = this.props;\n\n    return (\n      <TouchableRipple onPress={onPress}>\n        <View style={[styles.container, style]} pointerEvents=\"none\">\n          <Text style={[styles.label, labelStyle, { color: colors.primary }]}>\n            {label}\n          </Text>\n          <CheckBox status={status} {...props}></CheckBox>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}