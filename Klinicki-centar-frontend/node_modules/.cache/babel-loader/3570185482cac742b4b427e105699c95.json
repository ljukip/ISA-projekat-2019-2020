{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport IconButton from '../../IconButton';\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\nconst StyleContext = /*#__PURE__*/React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {}\n});\nexport const IconAdornment = ({\n  icon,\n  topPosition,\n  side,\n  isTextInputFocused,\n  forceFocus\n}) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET\n  };\n  const contextState = {\n    style,\n    isTextInputFocused,\n    forceFocus\n  };\n  return /*#__PURE__*/React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\n\nconst TextInputIcon = _ref => {\n  let {\n    name,\n    onPress\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"onPress\"]);\n\n  const {\n    style,\n    isTextInputFocused,\n    forceFocus\n  } = React.useContext(StyleContext);\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (!isTextInputFocused) {\n      forceFocus();\n    }\n\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n  }, [forceFocus, isTextInputFocused, onPress]);\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style]\n  }, /*#__PURE__*/React.createElement(IconButton, _extends({\n    icon: name,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl\n  }, rest)));\n};\n\nTextInputIcon.displayName = 'TextInput.Icon';\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;","map":{"version":3,"sources":["Icon.tsx"],"names":["ICON_SIZE","ICON_OFFSET","StyleContext","style","isTextInputFocused","forceFocus","IconAdornment","top","contextState","TextInputIcon","onPress","rest","React","onPressWithFocusControl","styles","container","position","width","height","justifyContent","alignItems","iconButton","margin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,EAAA,UAAA,QAAA,cAAA;AAEA,OAAA,UAAA,MAAA,kBAAA;AAaA,OAAO,MAAMA,SAAS,GAAf,EAAA;AACP,MAAMC,WAAW,GAAjB,EAAA;AAQA,MAAMC,YAAY,GAAA,aAAG,KAAK,CAAL,aAAA,CAAsC;AACzDC,EAAAA,KAAK,EADoD,EAAA;AAEzDC,EAAAA,kBAAkB,EAFuC,KAAA;AAGzDC,EAAAA,UAAU,EAAE,MAAM,CAAE;AAHqC,CAAtC,CAArB;AAMA,OAAO,MAAMC,aAOZ,GAAG,CAAC;AAAA,EAAA,IAAA;AAAA,EAAA,WAAA;AAAA,EAAA,IAAA;AAAA,EAAA,kBAAA;AAA+CD,EAAAA;AAA/C,CAAD,KAAiE;AACnE,QAAMF,KAAK,GAAG;AACZI,IAAAA,GAAG,EADS,WAAA;AAEZ,KAAA,IAAA,GAAQN;AAFI,GAAd;AAIA,QAAMO,YAAY,GAAG;AAAA,IAAA,KAAA;AAAA,IAAA,kBAAA;AAA6BH,IAAAA;AAA7B,GAArB;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AAAuB,IAAA,KAAK,EAAEG;AAA9B,GAAA,EADF,IACE,CADF;AAdK,CAAA;;AAmBP,MAAMC,aAAa,GAAG,IAAA,IAAuC;AAAA,MAAtC;AAAA,IAAA,IAAA;AAAQC,IAAAA;AAAR,MAAsC,IAAA;AAAA,MAAlBC,IAAkB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,MAAA,EAAA,SAAA,CAAA,CAAA;;AAC3D,QAAM;AAAA,IAAA,KAAA;AAAA,IAAA,kBAAA;AAA6BN,IAAAA;AAA7B,MAA4CO,KAAK,CAALA,UAAAA,CAAlD,YAAkDA,CAAlD;AAIA,QAAMC,uBAAuB,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AACtD,QAAI,CAAJ,kBAAA,EAAyB;AACvBR,MAAAA,UAAU;AACX;;AACDK,IAAAA,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,EAAPA;AAJ8B,GAAA,EAK7B,CAAA,UAAA,EAAA,kBAAA,EALH,OAKG,CAL6B,CAAhC;AAOA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACI,MAAM,CAAP,SAAA,EAAA,KAAA;AAAb,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;AACE,IAAA,IAAI,EADN,IAAA;AAEE,IAAA,KAAK,EAAEA,MAAM,CAFf,UAAA;AAGE,IAAA,IAAI,EAHN,SAAA;AAIE,IAAA,OAAO,EAAED;AAJX,GAAA,EAFJ,IAEI,CAAA,CADF,CADF;AAZF,CAAA;;AAwBAJ,aAAa,CAAbA,WAAAA,GAAAA,gBAAAA;AAEA,MAAMK,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EADC,UAAA;AAETC,IAAAA,KAAK,EAFI,SAAA;AAGTC,IAAAA,MAAM,EAHG,SAAA;AAITC,IAAAA,cAAc,EAJL,QAAA;AAKTC,IAAAA,UAAU,EAAE;AALH,GADoB;AAQ/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,MAAM,EAAE;AADE;AARmB,CAAlB,CAAf;AAaA,eAAA,aAAA","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\n\ntype Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme'\n> & {\n  name: string;\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nexport const IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\nconst TextInputIcon = ({ name, onPress, ...rest }: Props) => {\n  const { style, isTextInputFocused, forceFocus } = React.useContext(\n    StyleContext\n  );\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (!isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n"]},"metadata":{},"sourceType":"module"}