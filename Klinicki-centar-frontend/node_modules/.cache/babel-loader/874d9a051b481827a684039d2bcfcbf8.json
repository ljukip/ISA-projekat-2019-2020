{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport ToggleButton from './ToggleButton';\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\n\nclass ToggleButtonRow extends React.Component {\n  render() {\n    const {\n      value,\n      onValueChange,\n      children,\n      style\n    } = this.props;\n    const count = React.Children.count(children);\n    return /*#__PURE__*/React.createElement(ToggleButton.Group, {\n      value: value,\n      onValueChange: onValueChange\n    }, /*#__PURE__*/React.createElement(View, {\n      style: [styles.row, style]\n    }, React.Children.map(children, (child, i) => {\n      // @ts-ignore\n      if (child && child.type === ToggleButton) {\n        // @ts-ignore\n        return /*#__PURE__*/React.cloneElement(child, {\n          style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, // @ts-ignore\n          child.props.style]\n        });\n      }\n\n      return child;\n    })));\n  }\n\n}\n\n_defineProperty(ToggleButtonRow, \"displayName\", 'ToggleButton.Row');\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;","map":{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","React","render","style","count","onValueChange","styles","child","i","row","flexDirection","button","borderWidth","StyleSheet","hairlineWidth","first","borderTopRightRadius","borderBottomRightRadius","middle","borderRadius","borderLeftWidth","last","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,IAAA,QAAA,cAAA;AACA,OAAA,YAAA,MAAA,gBAAA;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAA,eAAA,SAA8BC,KAAK,CAAnC,SAAA,CAAqD;AAGnDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,KAAA;AAAA,MAAA,aAAA;AAAA,MAAA,QAAA;AAAkCC,MAAAA;AAAlC,QAA4C,KAAlD,KAAA;AACA,UAAMC,KAAK,GAAGH,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAd,QAAcA,CAAd;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,KAAA,EAAA;AAAoB,MAAA,KAAK,EAAzB,KAAA;AAAkC,MAAA,aAAa,EAAEI;AAAjD,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAE,CAACC,MAAM,CAAP,GAAA,EAAA,KAAA;AAAb,KAAA,EACG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,CAAA,KAAA,EAAA,CAAA,KAAc;AAC1C;AACA,UAAIC,KAAK,IAAIA,KAAK,CAALA,IAAAA,KAAb,YAAA,EAA0C;AACxC;AACA,eAAA,aAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAC/BJ,UAAAA,KAAK,EAAE,CACLG,MAAM,CADD,MAAA,EAELE,CAAC,KAADA,CAAAA,GACIF,MAAM,CADVE,KAAAA,GAEIA,CAAC,KAAKJ,KAAK,GAAXI,CAAAA,GACAF,MAAM,CADNE,IAAAA,GAEAF,MAAM,CANL,MAAA,EAOL;AACAC,UAAAA,KAAK,CAALA,KAAAA,CARK,KAAA;AADwB,SAA1B,CAAP;AAYD;;AAED,aAAA,KAAA;AArBR,KAGO,CADH,CADF,CADF;AA0BD;;AAjCkD;;gBAA/CP,e,iBACiB,kB;;AAmCvB,MAAMM,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,GAAG,EAAE;AACHC,IAAAA,aAAa,EAAE;AADZ,GAD0B;AAI/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,WAAW,EAAEC,UAAU,CAACC;AADlB,GAJuB;AAQ/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,oBAAoB,EADf,CAAA;AAELC,IAAAA,uBAAuB,EAAE;AAFpB,GARwB;AAa/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,YAAY,EADN,CAAA;AAENC,IAAAA,eAAe,EAAE;AAFX,GAbuB;AAkB/BC,EAAAA,IAAI,EAAE;AACJD,IAAAA,eAAe,EADX,CAAA;AAEJE,IAAAA,mBAAmB,EAFf,CAAA;AAGJC,IAAAA,sBAAsB,EAAE;AAHpB;AAlByB,CAAlB,CAAf;AAyBA,eAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nclass ToggleButtonRow extends React.Component<Props> {\n  static displayName = 'ToggleButton.Row';\n\n  render() {\n    const { value, onValueChange, children, style } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButton.Group value={value} onValueChange={onValueChange}>\n        <View style={[styles.row, style]}>\n          {React.Children.map(children, (child, i) => {\n            // @ts-ignore\n            if (child && child.type === ToggleButton) {\n              // @ts-ignore\n              return React.cloneElement(child, {\n                style: [\n                  styles.button,\n                  i === 0\n                    ? styles.first\n                    : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                  // @ts-ignore\n                  child.props.style,\n                ],\n              });\n            }\n\n            return child;\n          })}\n        </View>\n      </ToggleButton.Group>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n"]},"metadata":{},"sourceType":"module"}