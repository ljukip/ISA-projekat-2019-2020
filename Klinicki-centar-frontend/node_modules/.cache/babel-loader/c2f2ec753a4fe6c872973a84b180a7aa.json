{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport color from 'color';\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport AppbarHeader from './AppbarHeader';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\n\nclass Appbar extends React.Component {\n  // @component ./AppbarContent.tsx\n  // @component ./AppbarAction.tsx\n  // @component ./AppbarBackAction.tsx\n  // @component ./AppbarHeader.tsx\n  render() {\n    const _this$props = this.props,\n          {\n      children,\n      dark,\n      style,\n      theme\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"dark\", \"style\", \"theme\"]);\n\n    const {\n      colors,\n      dark: isDarkTheme,\n      mode\n    } = theme;\n\n    const _ref = StyleSheet.flatten(style) || {},\n          {\n      backgroundColor: customBackground,\n      elevation = 4\n    } = _ref,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\", \"elevation\"]);\n\n    let isDark;\n    const backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n    }\n\n    let shouldCenterContent = false;\n    let shouldAddLeftSpacing = false;\n    let shouldAddRightSpacing = false;\n\n    if (Platform.OS === 'ios') {\n      let hasAppbarContent = false;\n      let leftItemsCount = 0;\n      let rightItemsCount = 0;\n      React.Children.forEach(children, child => {\n        if ( /*#__PURE__*/React.isValidElement(child)) {\n          if (child.type === AppbarContent) {\n            hasAppbarContent = true;\n          } else if (hasAppbarContent) {\n            rightItemsCount++;\n          } else {\n            leftItemsCount++;\n          }\n        }\n      });\n      shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n      shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n      shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n    }\n\n    return /*#__PURE__*/React.createElement(Surface //@ts-ignore\n    , _extends({\n      style: [{\n        backgroundColor\n      }, styles.appbar, {\n        elevation\n      }, restStyle]\n    }, rest), shouldAddLeftSpacing ? /*#__PURE__*/React.createElement(View, {\n      style: styles.spacing\n    }) : null, React.Children.toArray(children).filter(child => child != null && typeof child !== 'boolean').map((child, i) => {\n      if (! /*#__PURE__*/React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction // @ts-ignore\n      ].includes(child.type)) {\n        return child;\n      }\n\n      const props = {\n        color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? white : black\n      };\n\n      if (child.type === AppbarContent) {\n        props.style = [// Since content is not first item, add extra left margin\n        i !== 0 && {\n          marginLeft: 8\n        }, shouldCenterContent && {\n          alignItems: 'center'\n        }, child.props.style];\n      }\n\n      return /*#__PURE__*/React.cloneElement(child, props);\n    }), shouldAddRightSpacing ? /*#__PURE__*/React.createElement(View, {\n      style: styles.spacing\n    }) : null);\n  }\n\n}\n\n_defineProperty(Appbar, \"Content\", AppbarContent);\n\n_defineProperty(Appbar, \"Action\", AppbarAction);\n\n_defineProperty(Appbar, \"BackAction\", AppbarBackAction);\n\n_defineProperty(Appbar, \"Header\", AppbarHeader);\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4\n  },\n  spacing: {\n    width: 48\n  }\n});\nexport default withTheme(Appbar);","map":{"version":3,"sources":["Appbar.tsx"],"names":["DEFAULT_APPBAR_HEIGHT","Appbar","React","AppbarContent","AppbarAction","AppbarBackAction","AppbarHeader","render","theme","rest","dark","mode","backgroundColor","elevation","restStyle","StyleSheet","customBackground","isDarkTheme","overlay","colors","isDark","color","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","hasAppbarContent","leftItemsCount","rightItemsCount","child","styles","spacing","props","black","i","marginLeft","alignItems","appbar","height","flexDirection","paddingHorizontal","width","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  AppbarContent as _AppbarContent,\n} from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport AppbarHeader, { AppbarHeader as _AppbarHeader } from './AppbarHeader';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\n\ntype Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nclass Appbar extends React.Component<Props> {\n  // @component ./AppbarContent.tsx\n  static Content = AppbarContent;\n  // @component ./AppbarAction.tsx\n  static Action = AppbarAction;\n  // @component ./AppbarBackAction.tsx\n  static BackAction = AppbarBackAction;\n  // @component ./AppbarHeader.tsx\n  static Header = AppbarHeader;\n\n  render() {\n    const { children, dark, style, theme, ...rest } = this.props;\n\n    const { colors, dark: isDarkTheme, mode } = theme;\n    const {\n      backgroundColor: customBackground,\n      elevation = 4,\n      ...restStyle\n    }: ViewStyle = StyleSheet.flatten(style) || {};\n\n    let isDark: boolean;\n\n    const backgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    let shouldCenterContent = false;\n    let shouldAddLeftSpacing = false;\n    let shouldAddRightSpacing = false;\n    if (Platform.OS === 'ios') {\n      let hasAppbarContent = false;\n      let leftItemsCount = 0;\n      let rightItemsCount = 0;\n\n      React.Children.forEach(children, (child) => {\n        if (React.isValidElement(child)) {\n          if (child.type === AppbarContent) {\n            hasAppbarContent = true;\n          } else if (hasAppbarContent) {\n            rightItemsCount++;\n          } else {\n            leftItemsCount++;\n          }\n        }\n      });\n\n      shouldCenterContent =\n        hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n      shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n      shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n    }\n    return (\n      <Surface\n        //@ts-ignore\n        style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n        {...rest}\n      >\n        {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n        {React.Children.toArray(children)\n          .filter((child) => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              !React.isValidElement(child) ||\n              ![\n                AppbarContent,\n                AppbarAction,\n                AppbarBackAction,\n                // @ts-ignore\n              ].includes(child.type)\n            ) {\n              return child;\n            }\n\n            const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n              color:\n                typeof child.props.color !== 'undefined'\n                  ? child.props.color\n                  : isDark\n                  ? white\n                  : black,\n            };\n\n            if (child.type === AppbarContent) {\n              props.style = [\n                // Since content is not first item, add extra left margin\n                i !== 0 && { marginLeft: 8 },\n                shouldCenterContent && { alignItems: 'center' },\n                child.props.style,\n              ];\n            }\n            return React.cloneElement(child, props);\n          })}\n        {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n"]},"metadata":{},"sourceType":"module"}