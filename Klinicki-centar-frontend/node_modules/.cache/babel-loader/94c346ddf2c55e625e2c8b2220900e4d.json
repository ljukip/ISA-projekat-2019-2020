{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { LexRuntimeServiceClient } from \"./LexRuntimeServiceClient\";\nimport { DeleteSessionCommand } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\nimport { PostContentCommand } from \"./commands/PostContentCommand\";\nimport { PostTextCommand } from \"./commands/PostTextCommand\";\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\n/**\r\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\r\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\r\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\r\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\r\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\r\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\r\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\r\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\r\n *       a list of build-time operations, see the build-time API, . </p>\r\n */\n\nvar LexRuntimeService =\n/** @class */\nfunction (_super) {\n  __extends(LexRuntimeService, _super);\n\n  function LexRuntimeService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LexRuntimeService.prototype.deleteSession = function (args, optionsOrCb, cb) {\n    var command = new DeleteSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.getSession = function (args, optionsOrCb, cb) {\n    var command = new GetSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.postContent = function (args, optionsOrCb, cb) {\n    var command = new PostContentCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.postText = function (args, optionsOrCb, cb) {\n    var command = new PostTextCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.putSession = function (args, optionsOrCb, cb) {\n    var command = new PutSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return LexRuntimeService;\n}(LexRuntimeServiceClient);\n\nexport { LexRuntimeService };","map":{"version":3,"sources":["../../LexRuntimeService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\r\nimport { LexRuntimeServiceClient } from \"./LexRuntimeServiceClient\";\r\nimport { DeleteSessionCommand, } from \"./commands/DeleteSessionCommand\";\r\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\r\nimport { PostContentCommand } from \"./commands/PostContentCommand\";\r\nimport { PostTextCommand } from \"./commands/PostTextCommand\";\r\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\r\n/**\r\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\r\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\r\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\r\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\r\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\r\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\r\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\r\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\r\n *       a list of build-time operations, see the build-time API, . </p>\r\n */\r\nvar LexRuntimeService = /** @class */ (function (_super) {\r\n    __extends(LexRuntimeService, _super);\r\n    function LexRuntimeService() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    LexRuntimeService.prototype.deleteSession = function (args, optionsOrCb, cb) {\r\n        var command = new DeleteSessionCommand(args);\r\n        if (typeof optionsOrCb === \"function\") {\r\n            this.send(command, optionsOrCb);\r\n        }\r\n        else if (typeof cb === \"function\") {\r\n            if (typeof optionsOrCb !== \"object\")\r\n                throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\r\n            this.send(command, optionsOrCb || {}, cb);\r\n        }\r\n        else {\r\n            return this.send(command, optionsOrCb);\r\n        }\r\n    };\r\n    LexRuntimeService.prototype.getSession = function (args, optionsOrCb, cb) {\r\n        var command = new GetSessionCommand(args);\r\n        if (typeof optionsOrCb === \"function\") {\r\n            this.send(command, optionsOrCb);\r\n        }\r\n        else if (typeof cb === \"function\") {\r\n            if (typeof optionsOrCb !== \"object\")\r\n                throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\r\n            this.send(command, optionsOrCb || {}, cb);\r\n        }\r\n        else {\r\n            return this.send(command, optionsOrCb);\r\n        }\r\n    };\r\n    LexRuntimeService.prototype.postContent = function (args, optionsOrCb, cb) {\r\n        var command = new PostContentCommand(args);\r\n        if (typeof optionsOrCb === \"function\") {\r\n            this.send(command, optionsOrCb);\r\n        }\r\n        else if (typeof cb === \"function\") {\r\n            if (typeof optionsOrCb !== \"object\")\r\n                throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\r\n            this.send(command, optionsOrCb || {}, cb);\r\n        }\r\n        else {\r\n            return this.send(command, optionsOrCb);\r\n        }\r\n    };\r\n    LexRuntimeService.prototype.postText = function (args, optionsOrCb, cb) {\r\n        var command = new PostTextCommand(args);\r\n        if (typeof optionsOrCb === \"function\") {\r\n            this.send(command, optionsOrCb);\r\n        }\r\n        else if (typeof cb === \"function\") {\r\n            if (typeof optionsOrCb !== \"object\")\r\n                throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\r\n            this.send(command, optionsOrCb || {}, cb);\r\n        }\r\n        else {\r\n            return this.send(command, optionsOrCb);\r\n        }\r\n    };\r\n    LexRuntimeService.prototype.putSession = function (args, optionsOrCb, cb) {\r\n        var command = new PutSessionCommand(args);\r\n        if (typeof optionsOrCb === \"function\") {\r\n            this.send(command, optionsOrCb);\r\n        }\r\n        else if (typeof cb === \"function\") {\r\n            if (typeof optionsOrCb !== \"object\")\r\n                throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\r\n            this.send(command, optionsOrCb || {}, cb);\r\n        }\r\n        else {\r\n            return this.send(command, optionsOrCb);\r\n        }\r\n    };\r\n    return LexRuntimeService;\r\n}(LexRuntimeServiceClient));\r\nexport { LexRuntimeService };\r\n//# sourceMappingURL=LexRuntimeService.js.map"]},"metadata":{},"sourceType":"module"}