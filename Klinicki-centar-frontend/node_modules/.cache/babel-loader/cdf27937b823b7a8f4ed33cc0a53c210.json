{"ast":null,"code":"/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport Client from './Client';\nimport CognitoUser from './CognitoUser';\nimport StorageHelper from './StorageHelper';\n/** @class */\n\nvar CognitoUserPool = /*#__PURE__*/function () {\n  /**\r\n   * Constructs a new CognitoUserPool object\r\n   * @param {object} data Creation options.\r\n   * @param {string} data.UserPoolId Cognito user pool id.\r\n   * @param {string} data.ClientId User pool application client id.\r\n   * @param {string} data.endpoint Optional custom service endpoint.\r\n   * @param {object} data.fetchOptions Optional options for fetch API.\r\n   *        (only credentials option is supported)\r\n   * @param {object} data.Storage Optional storage object.\r\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\r\n   *        boolean flag indicating if the data collection is enabled\r\n   *        to support cognito advanced security features. By default, this\r\n   *        flag is set to true.\r\n   */\n  function CognitoUserPool(data) {\n    var _ref = data || {},\n        UserPoolId = _ref.UserPoolId,\n        ClientId = _ref.ClientId,\n        endpoint = _ref.endpoint,\n        fetchOptions = _ref.fetchOptions,\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n\n    if (!UserPoolId || !ClientId) {\n      throw new Error('Both UserPoolId and ClientId are required.');\n    }\n\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n      throw new Error('Invalid UserPoolId format.');\n    }\n\n    var region = UserPoolId.split('_')[0];\n    this.userPoolId = UserPoolId;\n    this.clientId = ClientId;\n    this.client = new Client(region, endpoint, fetchOptions);\n    /**\r\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\r\n     * if no input value is provided.\r\n     */\n\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n    this.storage = data.Storage || new StorageHelper().getStorage();\n  }\n  /**\r\n   * @returns {string} the user pool id\r\n   */\n\n\n  var _proto = CognitoUserPool.prototype;\n\n  _proto.getUserPoolId = function getUserPoolId() {\n    return this.userPoolId;\n  }\n  /**\r\n   * @returns {string} the client id\r\n   */\n  ;\n\n  _proto.getClientId = function getClientId() {\n    return this.clientId;\n  }\n  /**\r\n   * @typedef {object} SignUpResult\r\n   * @property {CognitoUser} user New user.\r\n   * @property {bool} userConfirmed If the user is already confirmed.\r\n   */\n\n  /**\r\n   * method for signing up a user\r\n   * @param {string} username User's username.\r\n   * @param {string} password Plain-text initial password entered by user.\r\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n   * @param {(AttributeArg[])=} validationData Application metadata.\r\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\r\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\r\n   * @returns {void}\r\n   */\n  ;\n\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n    var _this = this;\n\n    var jsonReq = {\n      ClientId: this.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: userAttributes,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData(username)) {\n      jsonReq.UserContextData = this.getUserContextData(username);\n    }\n\n    this.client.request('SignUp', jsonReq, function (err, data) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var cognitoUser = {\n        Username: username,\n        Pool: _this,\n        Storage: _this.storage\n      };\n      var returnData = {\n        user: new CognitoUser(cognitoUser),\n        userConfirmed: data.UserConfirmed,\n        userSub: data.UserSub,\n        codeDeliveryDetails: data.CodeDeliveryDetails\n      };\n      return callback(null, returnData);\n    });\n  }\n  /**\r\n   * method for getting the current user of the application from the local storage\r\n   *\r\n   * @returns {CognitoUser} the user retrieved from storage\r\n   */\n  ;\n\n  _proto.getCurrentUser = function getCurrentUser() {\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n    var lastAuthUser = this.storage.getItem(lastUserKey);\n\n    if (lastAuthUser) {\n      var cognitoUser = {\n        Username: lastAuthUser,\n        Pool: this,\n        Storage: this.storage\n      };\n      return new CognitoUser(cognitoUser);\n    }\n\n    return null;\n  }\n  /**\r\n   * This method returns the encoded data string used for cognito advanced security feature.\r\n   * This would be generated only when developer has included the JS used for collecting the\r\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\r\n   * features\r\n   * @param {string} username the username for the context data\r\n   * @returns {string} the user context data\r\n   **/\n  ;\n\n  _proto.getUserContextData = function getUserContextData(username) {\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\n      return undefined;\n    }\n    /* eslint-disable */\n\n\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n    /* eslint-enable */\n\n    if (this.advancedSecurityDataCollectionFlag) {\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n\n      if (advancedSecurityData) {\n        var userContextData = {\n          EncodedData: advancedSecurityData\n        };\n        return userContextData;\n      }\n    }\n\n    return {};\n  };\n\n  return CognitoUserPool;\n}();\n\nexport { CognitoUserPool as default };","map":{"version":3,"sources":["C:/Users/Ljubica/Desktop/ISA-projekat-2019-2020/klinicki-centar-frontend/node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js"],"names":["Client","CognitoUser","StorageHelper","CognitoUserPool","data","_ref","UserPoolId","ClientId","endpoint","fetchOptions","AdvancedSecurityDataCollectionFlag","Error","test","region","split","userPoolId","clientId","client","advancedSecurityDataCollectionFlag","storage","Storage","getStorage","_proto","prototype","getUserPoolId","getClientId","signUp","username","password","userAttributes","validationData","callback","clientMetadata","_this","jsonReq","Username","Password","UserAttributes","ValidationData","ClientMetadata","getUserContextData","UserContextData","request","err","cognitoUser","Pool","returnData","user","userConfirmed","UserConfirmed","userSub","UserSub","codeDeliveryDetails","CodeDeliveryDetails","getCurrentUser","lastUserKey","lastAuthUser","getItem","AmazonCognitoAdvancedSecurityData","undefined","amazonCognitoAdvancedSecurityDataConst","advancedSecurityData","getData","userContextData","EncodedData","default"],"mappings":"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","sourcesContent":["/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport Client from './Client';\r\nimport CognitoUser from './CognitoUser';\r\nimport StorageHelper from './StorageHelper';\r\n/** @class */\r\n\r\nvar CognitoUserPool = /*#__PURE__*/function () {\r\n  /**\r\n   * Constructs a new CognitoUserPool object\r\n   * @param {object} data Creation options.\r\n   * @param {string} data.UserPoolId Cognito user pool id.\r\n   * @param {string} data.ClientId User pool application client id.\r\n   * @param {string} data.endpoint Optional custom service endpoint.\r\n   * @param {object} data.fetchOptions Optional options for fetch API.\r\n   *        (only credentials option is supported)\r\n   * @param {object} data.Storage Optional storage object.\r\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\r\n   *        boolean flag indicating if the data collection is enabled\r\n   *        to support cognito advanced security features. By default, this\r\n   *        flag is set to true.\r\n   */\r\n  function CognitoUserPool(data) {\r\n    var _ref = data || {},\r\n        UserPoolId = _ref.UserPoolId,\r\n        ClientId = _ref.ClientId,\r\n        endpoint = _ref.endpoint,\r\n        fetchOptions = _ref.fetchOptions,\r\n        AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\r\n\r\n    if (!UserPoolId || !ClientId) {\r\n      throw new Error('Both UserPoolId and ClientId are required.');\r\n    }\r\n\r\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\r\n      throw new Error('Invalid UserPoolId format.');\r\n    }\r\n\r\n    var region = UserPoolId.split('_')[0];\r\n    this.userPoolId = UserPoolId;\r\n    this.clientId = ClientId;\r\n    this.client = new Client(region, endpoint, fetchOptions);\r\n    /**\r\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\r\n     * if no input value is provided.\r\n     */\r\n\r\n    this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\r\n    this.storage = data.Storage || new StorageHelper().getStorage();\r\n  }\r\n  /**\r\n   * @returns {string} the user pool id\r\n   */\r\n\r\n\r\n  var _proto = CognitoUserPool.prototype;\r\n\r\n  _proto.getUserPoolId = function getUserPoolId() {\r\n    return this.userPoolId;\r\n  }\r\n  /**\r\n   * @returns {string} the client id\r\n   */\r\n  ;\r\n\r\n  _proto.getClientId = function getClientId() {\r\n    return this.clientId;\r\n  }\r\n  /**\r\n   * @typedef {object} SignUpResult\r\n   * @property {CognitoUser} user New user.\r\n   * @property {bool} userConfirmed If the user is already confirmed.\r\n   */\r\n\r\n  /**\r\n   * method for signing up a user\r\n   * @param {string} username User's username.\r\n   * @param {string} password Plain-text initial password entered by user.\r\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n   * @param {(AttributeArg[])=} validationData Application metadata.\r\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\r\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\r\n   * @returns {void}\r\n   */\r\n  ;\r\n\r\n  _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\r\n    var _this = this;\r\n\r\n    var jsonReq = {\r\n      ClientId: this.clientId,\r\n      Username: username,\r\n      Password: password,\r\n      UserAttributes: userAttributes,\r\n      ValidationData: validationData,\r\n      ClientMetadata: clientMetadata\r\n    };\r\n\r\n    if (this.getUserContextData(username)) {\r\n      jsonReq.UserContextData = this.getUserContextData(username);\r\n    }\r\n\r\n    this.client.request('SignUp', jsonReq, function (err, data) {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n\r\n      var cognitoUser = {\r\n        Username: username,\r\n        Pool: _this,\r\n        Storage: _this.storage\r\n      };\r\n      var returnData = {\r\n        user: new CognitoUser(cognitoUser),\r\n        userConfirmed: data.UserConfirmed,\r\n        userSub: data.UserSub,\r\n        codeDeliveryDetails: data.CodeDeliveryDetails\r\n      };\r\n      return callback(null, returnData);\r\n    });\r\n  }\r\n  /**\r\n   * method for getting the current user of the application from the local storage\r\n   *\r\n   * @returns {CognitoUser} the user retrieved from storage\r\n   */\r\n  ;\r\n\r\n  _proto.getCurrentUser = function getCurrentUser() {\r\n    var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\r\n    var lastAuthUser = this.storage.getItem(lastUserKey);\r\n\r\n    if (lastAuthUser) {\r\n      var cognitoUser = {\r\n        Username: lastAuthUser,\r\n        Pool: this,\r\n        Storage: this.storage\r\n      };\r\n      return new CognitoUser(cognitoUser);\r\n    }\r\n\r\n    return null;\r\n  }\r\n  /**\r\n   * This method returns the encoded data string used for cognito advanced security feature.\r\n   * This would be generated only when developer has included the JS used for collecting the\r\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\r\n   * features\r\n   * @param {string} username the username for the context data\r\n   * @returns {string} the user context data\r\n   **/\r\n  ;\r\n\r\n  _proto.getUserContextData = function getUserContextData(username) {\r\n    if (typeof AmazonCognitoAdvancedSecurityData === 'undefined') {\r\n      return undefined;\r\n    }\r\n    /* eslint-disable */\r\n\r\n\r\n    var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\r\n    /* eslint-enable */\r\n\r\n    if (this.advancedSecurityDataCollectionFlag) {\r\n      var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\r\n\r\n      if (advancedSecurityData) {\r\n        var userContextData = {\r\n          EncodedData: advancedSecurityData\r\n        };\r\n        return userContextData;\r\n      }\r\n    }\r\n\r\n    return {};\r\n  };\r\n\r\n  return CognitoUserPool;\r\n}();\r\n\r\nexport { CognitoUserPool as default };"]},"metadata":{},"sourceType":"module"}