{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from './Icon';\nimport TextInputAffix, { AffixAdornment } from './Affix';\nimport { ADORNMENT_OFFSET } from '../constants';\nimport { Platform } from 'react-native';\nimport { AdornmentSide, AdornmentType } from './enums';\nexport function getAdornmentConfig({\n  left,\n  right\n}) {\n  let adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(({\n      side,\n      adornment\n    }) => {\n      if (adornment && /*#__PURE__*/React.isValidElement(adornment)) {\n        let type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side,\n          type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  inputOffset = 0\n}) {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(({\n      type,\n      side\n    }) => {\n      const isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n      const isLeftSide = side === AdornmentSide.Left;\n      const offset = (isLeftSide ? leftAffixWidth : rightAffixWidth) + ADORNMENT_OFFSET;\n      const paddingKey = \"padding\".concat(captalize(side));\n      if (isWeb) return {\n        [paddingKey]: offset\n      };\n      const isAffix = type === AdornmentType.Affix;\n      const marginKey = \"margin\".concat(captalize(side));\n      return {\n        [marginKey]: isAffix ? 0 : offset,\n        [paddingKey]: isAffix ? offset : inputOffset\n      };\n    });\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce((mergedStyles, currentStyle) => {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = text => text.charAt(0).toUpperCase() + text.slice(1);\n\nconst TextInputAdornment = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus\n}) => {\n  if (adornmentConfig.length) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, adornmentConfig.map(({\n      type,\n      side\n    }) => {\n      let inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      const commonProps = {\n        key: side,\n        side: side,\n        testID: \"\".concat(side, \"-\").concat(type, \"-adornment\"),\n        isTextInputFocused\n      };\n\n      if (type === AdornmentType.Icon) {\n        return /*#__PURE__*/React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return /*#__PURE__*/React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["right","adornmentConfig","left","side","AdornmentSide","adornment","React","type","AdornmentType","inputOffset","adornmentStyleAdjustmentForNativeInput","isWeb","Platform","isLeftSide","offset","paddingKey","captalize","isAffix","marginKey","allStyleAdjustmentsMerged","text","TextInputAdornment","forceFocus","inputAdornmentComponent","commonProps","key","testID","isTextInputFocused","topPosition","onAffixChange","visible"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './Icon';\nimport TextInputAffix, { AffixAdornment } from './Affix';\nimport { ADORNMENT_OFFSET } from '../constants';\nimport {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n  Platform,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  inputOffset = 0,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isWeb = Platform.OS !== 'ios' && Platform.OS !== 'android';\n        const isLeftSide = side === AdornmentSide.Left;\n        const offset =\n          (isLeftSide ? leftAffixWidth : rightAffixWidth) + ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n\n        if (isWeb) return { [paddingKey]: offset };\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}