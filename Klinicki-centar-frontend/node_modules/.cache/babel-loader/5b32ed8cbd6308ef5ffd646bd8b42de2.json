{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, Animated, SafeAreaView, TouchableWithoutFeedback, View } from 'react-native';\nimport color from 'color';\nimport FAB from './FAB';\nimport Text from '../Typography/Text';\nimport Card from '../Card/Card';\nimport { withTheme } from '../../core/theming';\n/**\n * A component to display a stack of FABs with related actions in a speed dial.\n * To render the group above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { FAB, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [state, setState] = React.useState({ open: false });\n *\n *   const onStateChange = ({ open }) => setState({ open });\n *\n *   const { open } = state;\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <FAB.Group\n *           open={open}\n *           icon={open ? 'calendar-today' : 'plus'}\n *           actions={[\n *             { icon: 'plus', onPress: () => console.log('Pressed add') },\n *             {\n *               icon: 'star',\n *               label: 'Star',\n *               onPress: () => console.log('Pressed star'),\n *             },\n *             {\n *               icon: 'email',\n *               label: 'Email',\n *               onPress: () => console.log('Pressed email'),\n *             },\n *             {\n *               icon: 'bell',\n *               label: 'Remind',\n *               onPress: () => console.log('Pressed notifications'),\n *             },\n *           ]}\n *           onStateChange={onStateChange}\n *           onPress={() => {\n *             if (open) {\n *               // do something if the speed dial is open\n *             }\n *           }}\n *         />\n *       </Portal>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nclass FABGroup extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      backdrop: new Animated.Value(0),\n      animations: []\n    });\n\n    _defineProperty(this, \"close\", () => this.props.onStateChange({\n      open: false\n    }));\n\n    _defineProperty(this, \"toggle\", () => this.props.onStateChange({\n      open: !this.props.open\n    }));\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      animations: nextProps.actions.map((_, i) => prevState.animations[i] || new Animated.Value(nextProps.open ? 1 : 0))\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.open === prevProps.open) {\n      return;\n    }\n\n    const {\n      scale\n    } = this.props.theme.animation;\n\n    if (this.props.open) {\n      Animated.parallel([Animated.timing(this.state.backdrop, {\n        toValue: 1,\n        duration: 250 * scale,\n        useNativeDriver: true\n      }), Animated.stagger(50 * scale, this.state.animations.map(animation => Animated.timing(animation, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      })).reverse())]).start();\n    } else {\n      Animated.parallel([Animated.timing(this.state.backdrop, {\n        toValue: 0,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }), ...this.state.animations.map(animation => Animated.timing(animation, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }))]).start();\n    }\n  }\n\n  render() {\n    const {\n      actions,\n      icon,\n      open,\n      onPress: _onPress,\n      accessibilityLabel,\n      theme,\n      style,\n      fabStyle,\n      visible,\n      testID\n    } = this.props;\n    const {\n      colors\n    } = theme;\n    const labelColor = theme.dark ? colors.text : color(colors.text).fade(0.54).rgb().string();\n    const backdropOpacity = open ? this.state.backdrop.interpolate({\n      inputRange: [0, 0.5, 1],\n      outputRange: [0, 1, 1]\n    }) : this.state.backdrop;\n    const opacities = this.state.animations;\n    const scales = opacities.map(opacity => open ? opacity.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.8, 1]\n    }) : 1);\n    return /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"box-none\",\n      style: [styles.container, style]\n    }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n      onPress: this.close\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: open ? 'auto' : 'none',\n      style: [styles.backdrop, {\n        opacity: backdropOpacity,\n        backgroundColor: colors.backdrop\n      }]\n    })), /*#__PURE__*/React.createElement(SafeAreaView, {\n      pointerEvents: \"box-none\",\n      style: styles.safeArea\n    }, /*#__PURE__*/React.createElement(View, {\n      pointerEvents: open ? 'box-none' : 'none'\n    }, actions.map((it, i) => /*#__PURE__*/React.createElement(View, {\n      key: i // eslint-disable-line react/no-array-index-key\n      ,\n      style: styles.item,\n      pointerEvents: open ? 'box-none' : 'none'\n    }, it.label && /*#__PURE__*/React.createElement(Card, {\n      style: [styles.label, {\n        transform: [{\n          scale: scales[i]\n        }],\n        opacity: opacities[i]\n      }],\n      onPress: () => {\n        it.onPress();\n        this.close();\n      },\n      accessibilityLabel: it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label,\n      accessibilityTraits: \"button\",\n      accessibilityComponentType: \"button\",\n      accessibilityRole: \"button\"\n    }, /*#__PURE__*/React.createElement(Text, {\n      style: {\n        color: labelColor\n      }\n    }, it.label)), /*#__PURE__*/React.createElement(FAB, {\n      small: true,\n      icon: it.icon,\n      color: it.color,\n      style: [{\n        transform: [{\n          scale: scales[i]\n        }],\n        opacity: opacities[i],\n        backgroundColor: theme.colors.surface\n      }, it.style],\n      onPress: () => {\n        it.onPress();\n        this.close();\n      },\n      accessibilityLabel: typeof it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label,\n      accessibilityTraits: \"button\",\n      accessibilityComponentType: \"button\",\n      accessibilityRole: \"button\",\n      testID: it.testID,\n      visible: open\n    })))), /*#__PURE__*/React.createElement(FAB, {\n      onPress: () => {\n        _onPress === null || _onPress === void 0 ? void 0 : _onPress();\n        this.toggle();\n      },\n      icon: icon,\n      color: this.props.color,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityTraits: \"button\",\n      accessibilityComponentType: \"button\",\n      accessibilityRole: \"button\",\n      style: [styles.fab, fabStyle],\n      visible: visible,\n      testID: testID\n    })));\n  }\n\n}\n\n_defineProperty(FABGroup, \"displayName\", 'FAB.Group');\n\nexport default withTheme(FABGroup); // @component-docs ignore-next-line\n\nexport { FABGroup };\nconst styles = StyleSheet.create({\n  safeArea: {\n    alignItems: 'flex-end'\n  },\n  container: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    justifyContent: 'flex-end'\n  }),\n  fab: {\n    marginHorizontal: 16,\n    marginBottom: 16,\n    marginTop: 0\n  },\n  backdrop: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: {\n    borderRadius: 5,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    marginVertical: 8,\n    marginHorizontal: 16,\n    elevation: 2\n  },\n  item: {\n    marginHorizontal: 24,\n    marginBottom: 16,\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["FABGroup.tsx"],"names":["FABGroup","React","animations","nextProps","prevState","Animated","backdrop","componentDidUpdate","prevProps","scale","toValue","duration","useNativeDriver","animation","open","render","onPress","testID","colors","labelColor","theme","color","backdropOpacity","inputRange","outputRange","opacities","scales","opacity","styles","close","backgroundColor","safeArea","actions","it","transform","surface","withTheme","alignItems","container","StyleSheet","justifyContent","fab","marginHorizontal","marginBottom","marginTop","label","borderRadius","paddingHorizontal","paddingVertical","marginVertical","elevation","item","flexDirection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,QAAA,EAAA,YAAA,EAAA,wBAAA,EAAA,IAAA,QAAA,cAAA;AASA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,GAAA,MAAA,OAAA;AACA,OAAA,IAAA,MAAA,oBAAA;AACA,OAAA,IAAA,MAAA,cAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AA6EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,MAAA,QAAA,SAAuBC,KAAK,CAA5B,SAAA,CAAqD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAYpC;AACbK,MAAAA,QAAQ,EAAE,IAAID,QAAQ,CAAZ,KAAA,CADG,CACH,CADG;AAEbH,MAAAA,UAAU,EAAE;AAFC,KAZoC,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EA6DnC,MAAM,KAAA,KAAA,CAAA,aAAA,CAAyB;AAAEY,MAAAA,IAAI,EAAE;AAAR,KAAzB,CA7D6B,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EA+DlC,MAAM,KAAA,KAAA,CAAA,aAAA,CAAyB;AAAEA,MAAAA,IAAI,EAAE,CAAC,KAAA,KAAA,CAAWA;AAApB,KAAzB,CA/D4B,CAAA;AAAA;;AAGnD,SAAA,wBAAA,CAAA,SAAA,EAAA,SAAA,EAAoE;AAClE,WAAO;AACLZ,MAAAA,UAAU,EAAEC,SAAS,CAATA,OAAAA,CAAAA,GAAAA,CACV,CAAA,CAAA,EAAA,CAAA,KACEC,SAAS,CAATA,UAAAA,CAAAA,CAAAA,KAA2B,IAAIC,QAAQ,CAAZ,KAAA,CAAmBF,SAAS,CAATA,IAAAA,GAAAA,CAAAA,GAFtCA,CAEmB,CAFnBA;AADP,KAAP;AAMD;;AAODI,EAAAA,kBAAkB,CAAA,SAAA,EAAmB;AACnC,QAAI,KAAA,KAAA,CAAA,IAAA,KAAoBC,SAAS,CAAjC,IAAA,EAAwC;AACtC;AACD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAA,KAAA,CAAA,KAAA,CAAlB,SAAA;;AACA,QAAI,KAAA,KAAA,CAAJ,IAAA,EAAqB;AACnBJ,MAAAA,QAAQ,CAARA,QAAAA,CAAkB,CAChB,QAAQ,CAAR,MAAA,CAAgB,KAAA,KAAA,CAAhB,QAAA,EAAqC;AACnCK,QAAAA,OAAO,EAD4B,CAAA;AAEnCC,QAAAA,QAAQ,EAAE,MAFyB,KAAA;AAGnCC,QAAAA,eAAe,EAAE;AAHkB,OAArC,CADgB,EAMhBP,QAAQ,CAARA,OAAAA,CACE,KADFA,KAAAA,EAEE,KAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CACQQ,SAAD,IACH,QAAQ,CAAR,MAAA,CAAA,SAAA,EAA2B;AACzBH,QAAAA,OAAO,EADkB,CAAA;AAEzBC,QAAAA,QAAQ,EAAE,MAFe,KAAA;AAGzBC,QAAAA,eAAe,EAAE;AAHQ,OAA3B,CAFJ,EARJP,OAQI,EAFFA,CANgB,CAAlBA,EAAAA,KAAAA;AADF,KAAA,MAoBO;AACLA,MAAAA,QAAQ,CAARA,QAAAA,CAAkB,CAChB,QAAQ,CAAR,MAAA,CAAgB,KAAA,KAAA,CAAhB,QAAA,EAAqC;AACnCK,QAAAA,OAAO,EAD4B,CAAA;AAEnCC,QAAAA,QAAQ,EAAE,MAFyB,KAAA;AAGnCC,QAAAA,eAAe,EAAE;AAHkB,OAArC,CADgB,EAMhB,GAAG,KAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CAA2BC,SAAD,IAC3B,QAAQ,CAAR,MAAA,CAAA,SAAA,EAA2B;AACzBH,QAAAA,OAAO,EADkB,CAAA;AAEzBC,QAAAA,QAAQ,EAAE,MAFe,KAAA;AAGzBC,QAAAA,eAAe,EAAE;AAHQ,OAA3B,CADC,CANa,CAAlBP,EAAAA,KAAAA;AAcD;AACF;;AAMDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAA,MAAA,OAAA;AAAA,MAAA,IAAA;AAAA,MAAA,IAAA;AAIJC,MAAAA,OAAO,EAJH,QAAA;AAAA,MAAA,kBAAA;AAAA,MAAA,KAAA;AAAA,MAAA,KAAA;AAAA,MAAA,QAAA;AAAA,MAAA,OAAA;AAUJC,MAAAA;AAVI,QAWF,KAXJ,KAAA;AAYA,UAAM;AAAEC,MAAAA;AAAF,QAAN,KAAA;AAEA,UAAMC,UAAU,GAAGC,KAAK,CAALA,IAAAA,GACfF,MAAM,CADSE,IAAAA,GAEfC,KAAK,CAACH,MAAM,CAAZG,IAAK,CAALA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAFJ,MAEIA,EAFJ;AAGA,UAAMC,eAAe,GAAGR,IAAI,GACxB,KAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAgC;AAC9BS,MAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,GAAA,EADkB,CAClB,CADkB;AAE9BC,MAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAFiB,KAAhC,CADwB,GAKxB,KAAA,KAAA,CALJ,QAAA;AAOA,UAAMC,SAAS,GAAG,KAAA,KAAA,CAAlB,UAAA;AACA,UAAMC,MAAM,GAAG,SAAS,CAAT,GAAA,CAAeC,OAAD,IAC3Bb,IAAI,GACA,OAAO,CAAP,WAAA,CAAoB;AAClBS,MAAAA,UAAU,EAAE,CAAA,CAAA,EADM,CACN,CADM;AAElBC,MAAAA,WAAW,EAAE,CAAA,GAAA,EAAA,CAAA;AAFK,KAApB,CADA,GADN,CAAe,CAAf;AASA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,aAAa,EAAnB,UAAA;AAA+B,MAAA,KAAK,EAAE,CAACI,MAAM,CAAP,SAAA,EAAA,KAAA;AAAtC,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AAA0B,MAAA,OAAO,EAAE,KAAKC;AAAxC,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,MAAA,aAAa,EAAEf,IAAI,GAAA,MAAA,GADrB,MAAA;AAEE,MAAA,KAAK,EAAE,CACLc,MAAM,CADD,QAAA,EAEL;AACED,QAAAA,OAAO,EADT,eAAA;AAEEG,QAAAA,eAAe,EAAEZ,MAAM,CAACZ;AAF1B,OAFK;AAFT,KAAA,CADF,CADF,EAAA,aAaE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AAAc,MAAA,aAAa,EAA3B,UAAA;AAAuC,MAAA,KAAK,EAAEsB,MAAM,CAACG;AAArD,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,aAAa,EAAEjB,IAAI,GAAA,UAAA,GAAgB;AAAzC,KAAA,EACGkB,OAAO,CAAPA,GAAAA,CAAY,CAAA,EAAA,EAAA,CAAA,KAAA,aACX,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,GAAG,EADL,CAAA,CACU;AADV;AAEE,MAAA,KAAK,EAAEJ,MAAM,CAFf,IAAA;AAGE,MAAA,aAAa,EAAEd,IAAI,GAAA,UAAA,GAAgB;AAHrC,KAAA,EAKGmB,EAAE,CAAFA,KAAAA,IAAAA,aACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,KAAK,EACH,CACEL,MAAM,CADR,KAAA,EAEE;AACEM,QAAAA,SAAS,EAAE,CAAC;AAAEzB,UAAAA,KAAK,EAAEiB,MAAM,CAAA,CAAA;AAAf,SAAD,CADb;AAEEC,QAAAA,OAAO,EAAEF,SAAS,CAAA,CAAA;AAFpB,OAFF,CAFJ;AAUE,MAAA,OAAO,EAAE,MAAM;AACbQ,QAAAA,EAAE,CAAFA,OAAAA;AACA,aAAA,KAAA;AAZJ,OAAA;AAcE,MAAA,kBAAkB,EAChBA,EAAE,CAAFA,kBAAAA,KAAAA,WAAAA,GACIA,EAAE,CADNA,kBAAAA,GAEIA,EAAE,CAjBV,KAAA;AAmBE,MAAA,mBAAmB,EAnBrB,QAAA;AAoBE,MAAA,0BAA0B,EApB5B,QAAA;AAqBE,MAAA,iBAAiB,EAAC;AArBpB,KAAA,EAAA,aAuBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAE;AAAEZ,QAAAA,KAAK,EAAEF;AAAT;AAAb,KAAA,EAAqCc,EAAE,CA7B7C,KA6BM,CAvBF,CANJ,EAAA,aAgCE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,MAAA,KAAK,EADP,IAAA;AAEE,MAAA,IAAI,EAAEA,EAAE,CAFV,IAAA;AAGE,MAAA,KAAK,EAAEA,EAAE,CAHX,KAAA;AAIE,MAAA,KAAK,EACH,CACE;AACEC,QAAAA,SAAS,EAAE,CAAC;AAAEzB,UAAAA,KAAK,EAAEiB,MAAM,CAAA,CAAA;AAAf,SAAD,CADb;AAEEC,QAAAA,OAAO,EAAEF,SAAS,CAFpB,CAEoB,CAFpB;AAGEK,QAAAA,eAAe,EAAEV,KAAK,CAALA,MAAAA,CAAae;AAHhC,OADF,EAMEF,EAAE,CAXR,KAKI,CALJ;AAcE,MAAA,OAAO,EAAE,MAAM;AACbA,QAAAA,EAAE,CAAFA,OAAAA;AACA,aAAA,KAAA;AAhBJ,OAAA;AAkBE,MAAA,kBAAkB,EAChB,OAAOA,EAAE,CAAT,kBAAA,KAAA,WAAA,GACIA,EAAE,CADN,kBAAA,GAEIA,EAAE,CArBV,KAAA;AAuBE,MAAA,mBAAmB,EAvBrB,QAAA;AAwBE,MAAA,0BAA0B,EAxB5B,QAAA;AAyBE,MAAA,iBAAiB,EAzBnB,QAAA;AA0BE,MAAA,MAAM,EAAEA,EAAE,CA1BZ,MAAA;AA2BE,MAAA,OAAO,EAAEnB;AA3BX,KAAA,CAhCF,CADDkB,CADH,CADF,EAAA,aAmEE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,MAAA,OAAO,EAAE,MAAM;AACbhB,QAAAA,QAAO,KAAPA,IAAAA,IAAAA,QAAO,KAAA,KAAPA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAO,EAAPA;AACA,aAAA,MAAA;AAHJ,OAAA;AAKE,MAAA,IAAI,EALN,IAAA;AAME,MAAA,KAAK,EAAE,KAAA,KAAA,CANT,KAAA;AAOE,MAAA,kBAAkB,EAPpB,kBAAA;AAQE,MAAA,mBAAmB,EARrB,QAAA;AASE,MAAA,0BAA0B,EAT5B,QAAA;AAUE,MAAA,iBAAiB,EAVnB,QAAA;AAWE,MAAA,KAAK,EAAE,CAACY,MAAM,CAAP,GAAA,EAXT,QAWS,CAXT;AAYE,MAAA,OAAO,EAZT,OAAA;AAaE,MAAA,MAAM,EAAEX;AAbV,KAAA,CAnEF,CAbF,CADF;AAmGD;;AAvMkD;;gBAA/CjB,Q,iBACiB,W;;AAyMvB,eAAeoC,SAAS,CAAxB,QAAwB,CAAxB,C,CAEA;;AACA,SAAA,QAAA;AAEA,MAAMR,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,QAAQ,EAAE;AACRM,IAAAA,UAAU,EAAE;AADJ,GADqB;AAI/BC,EAAAA,SAAS,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACJC,UAAU,CADN,kBAAA,CAAA,EAAA,EAAA,EAAA;AAEPC,IAAAA,cAAc,EAAE;AAFT,GAAA,CAJsB;AAQ/BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,gBAAgB,EADb,EAAA;AAEHC,IAAAA,YAAY,EAFT,EAAA;AAGHC,IAAAA,SAAS,EAAE;AAHR,GAR0B;AAa/BtC,EAAAA,QAAQ,EAAA,aAAA,CAAA,EAAA,EACHiC,UAAU,CAdgB,kBAavB,CAbuB;AAgB/BM,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EADP,CAAA;AAELC,IAAAA,iBAAiB,EAFZ,EAAA;AAGLC,IAAAA,eAAe,EAHV,CAAA;AAILC,IAAAA,cAAc,EAJT,CAAA;AAKLP,IAAAA,gBAAgB,EALX,EAAA;AAMLQ,IAAAA,SAAS,EAAE;AANN,GAhBwB;AAwB/BC,EAAAA,IAAI,EAAE;AACJT,IAAAA,gBAAgB,EADZ,EAAA;AAEJC,IAAAA,YAAY,EAFR,EAAA;AAGJS,IAAAA,aAAa,EAHT,KAAA;AAIJZ,IAAAA,cAAc,EAJV,UAAA;AAKJH,IAAAA,UAAU,EAAE;AALR;AAxByB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  SafeAreaView,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport FAB from './FAB';\nimport Text from '../Typography/Text';\nimport Card from '../Card/Card';\nimport { withTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Action items to display in the form of a speed dial.\n   * An action item should contain the following properties:\n   * - `icon`: icon to display (required)\n   * - `label`: optional label text\n   * - `accessibilityLabel`: accessibility label for the action, uses label by default if specified\n   * - `color`: custom icon color of the action item\n   * - `style`: pass additional styles for the fab item, for example, `backgroundColor`\n   * - `onPress`: callback that is called when `FAB` is pressed (required)\n   */\n  actions: Array<{\n    icon: IconSource;\n    label?: string;\n    color?: string;\n    accessibilityLabel?: string;\n    style?: StyleProp<ViewStyle>;\n    onPress: () => void;\n    testID?: string;\n  }>;\n  /**\n   * Icon to display for the `FAB`.\n   * You can toggle it based on whether the speed dial is open to display a different icon.\n   */\n  icon: IconSource;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for the `FAB`.\n   */\n  color?: string;\n  /**\n   * Function to execute on pressing the `FAB`.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the speed dial is open.\n   */\n  open: boolean;\n  /**\n   * Callback which is called on opening and closing the speed dial.\n   * The open state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onStateChange: (state: { open: boolean }) => void;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Style for the group. You can use it to pass additional styles if you need.\n   * For example, you can set an additional padding if you have a tab bar at the bottom.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the FAB. It allows to pass the FAB button styles, such as backgroundColor.\n   */\n  fabStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from Group props to FAB.\n   */\n  testID?: string;\n};\n\ntype State = {\n  backdrop: Animated.Value;\n  animations: Animated.Value[];\n};\n\n/**\n * A component to display a stack of FABs with related actions in a speed dial.\n * To render the group above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { FAB, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [state, setState] = React.useState({ open: false });\n *\n *   const onStateChange = ({ open }) => setState({ open });\n *\n *   const { open } = state;\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <FAB.Group\n *           open={open}\n *           icon={open ? 'calendar-today' : 'plus'}\n *           actions={[\n *             { icon: 'plus', onPress: () => console.log('Pressed add') },\n *             {\n *               icon: 'star',\n *               label: 'Star',\n *               onPress: () => console.log('Pressed star'),\n *             },\n *             {\n *               icon: 'email',\n *               label: 'Email',\n *               onPress: () => console.log('Pressed email'),\n *             },\n *             {\n *               icon: 'bell',\n *               label: 'Remind',\n *               onPress: () => console.log('Pressed notifications'),\n *             },\n *           ]}\n *           onStateChange={onStateChange}\n *           onPress={() => {\n *             if (open) {\n *               // do something if the speed dial is open\n *             }\n *           }}\n *         />\n *       </Portal>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass FABGroup extends React.Component<Props, State> {\n  static displayName = 'FAB.Group';\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    return {\n      animations: nextProps.actions.map(\n        (_, i) =>\n          prevState.animations[i] || new Animated.Value(nextProps.open ? 1 : 0)\n      ),\n    };\n  }\n\n  state: State = {\n    backdrop: new Animated.Value(0),\n    animations: [],\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.open === prevProps.open) {\n      return;\n    }\n\n    const { scale } = this.props.theme.animation;\n    if (this.props.open) {\n      Animated.parallel([\n        Animated.timing(this.state.backdrop, {\n          toValue: 1,\n          duration: 250 * scale,\n          useNativeDriver: true,\n        }),\n        Animated.stagger(\n          50 * scale,\n          this.state.animations\n            .map((animation) =>\n              Animated.timing(animation, {\n                toValue: 1,\n                duration: 150 * scale,\n                useNativeDriver: true,\n              })\n            )\n            .reverse()\n        ),\n      ]).start();\n    } else {\n      Animated.parallel([\n        Animated.timing(this.state.backdrop, {\n          toValue: 0,\n          duration: 200 * scale,\n          useNativeDriver: true,\n        }),\n        ...this.state.animations.map((animation) =>\n          Animated.timing(animation, {\n            toValue: 0,\n            duration: 150 * scale,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start();\n    }\n  }\n\n  private close = () => this.props.onStateChange({ open: false });\n\n  private toggle = () => this.props.onStateChange({ open: !this.props.open });\n\n  render() {\n    const {\n      actions,\n      icon,\n      open,\n      onPress,\n      accessibilityLabel,\n      theme,\n      style,\n      fabStyle,\n      visible,\n      testID,\n    } = this.props;\n    const { colors } = theme;\n\n    const labelColor = theme.dark\n      ? colors.text\n      : color(colors.text).fade(0.54).rgb().string();\n    const backdropOpacity = open\n      ? this.state.backdrop.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, 1, 1],\n        })\n      : this.state.backdrop;\n\n    const opacities = this.state.animations;\n    const scales = opacities.map((opacity) =>\n      open\n        ? opacity.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0.8, 1],\n          })\n        : 1\n    );\n\n    return (\n      <View pointerEvents=\"box-none\" style={[styles.container, style]}>\n        <TouchableWithoutFeedback onPress={this.close}>\n          <Animated.View\n            pointerEvents={open ? 'auto' : 'none'}\n            style={[\n              styles.backdrop,\n              {\n                opacity: backdropOpacity,\n                backgroundColor: colors.backdrop,\n              },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaView pointerEvents=\"box-none\" style={styles.safeArea}>\n          <View pointerEvents={open ? 'box-none' : 'none'}>\n            {actions.map((it, i) => (\n              <View\n                key={i} // eslint-disable-line react/no-array-index-key\n                style={styles.item}\n                pointerEvents={open ? 'box-none' : 'none'}\n              >\n                {it.label && (\n                  <Card\n                    style={\n                      [\n                        styles.label,\n                        {\n                          transform: [{ scale: scales[i] }],\n                          opacity: opacities[i],\n                        },\n                      ] as StyleProp<ViewStyle>\n                    }\n                    onPress={() => {\n                      it.onPress();\n                      this.close();\n                    }}\n                    accessibilityLabel={\n                      it.accessibilityLabel !== 'undefined'\n                        ? it.accessibilityLabel\n                        : it.label\n                    }\n                    accessibilityTraits=\"button\"\n                    accessibilityComponentType=\"button\"\n                    accessibilityRole=\"button\"\n                  >\n                    <Text style={{ color: labelColor }}>{it.label}</Text>\n                  </Card>\n                )}\n                <FAB\n                  small\n                  icon={it.icon}\n                  color={it.color}\n                  style={\n                    [\n                      {\n                        transform: [{ scale: scales[i] }],\n                        opacity: opacities[i],\n                        backgroundColor: theme.colors.surface,\n                      },\n                      it.style,\n                    ] as StyleProp<ViewStyle>\n                  }\n                  onPress={() => {\n                    it.onPress();\n                    this.close();\n                  }}\n                  accessibilityLabel={\n                    typeof it.accessibilityLabel !== 'undefined'\n                      ? it.accessibilityLabel\n                      : it.label\n                  }\n                  accessibilityTraits=\"button\"\n                  accessibilityComponentType=\"button\"\n                  accessibilityRole=\"button\"\n                  testID={it.testID}\n                  visible={open}\n                />\n              </View>\n            ))}\n          </View>\n          <FAB\n            onPress={() => {\n              onPress?.();\n              this.toggle();\n            }}\n            icon={icon}\n            color={this.props.color}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            style={[styles.fab, fabStyle]}\n            visible={visible}\n            testID={testID}\n          />\n        </SafeAreaView>\n      </View>\n    );\n  }\n}\n\nexport default withTheme(FABGroup);\n\n// @component-docs ignore-next-line\nexport { FABGroup };\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    alignItems: 'flex-end',\n  },\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'flex-end',\n  },\n  fab: {\n    marginHorizontal: 16,\n    marginBottom: 16,\n    marginTop: 0,\n  },\n  backdrop: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    borderRadius: 5,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    marginVertical: 8,\n    marginHorizontal: 16,\n    elevation: 2,\n  },\n  item: {\n    marginHorizontal: 24,\n    marginBottom: 16,\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}